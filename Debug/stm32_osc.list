
stm32_osc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cd0  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d8  08005ea8  08005ea8  00015ea8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006180  08006180  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006180  08006180  00016180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006188  08006188  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006188  08006188  00016188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800618c  0800618c  0001618c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006190  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000072c  20000070  08006200  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000079c  08006200  0002079c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021e3c  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004375  00000000  00000000  00041f1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000d6d1  00000000  00000000  00046294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001210  00000000  00000000  00053968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001375  00000000  00000000  00054b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021d9b  00000000  00000000  00055eed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00023874  00000000  00000000  00077c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ddce0  00000000  00000000  0009b4fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003e40  00000000  00000000  001791dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0017d01c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005e90 	.word	0x08005e90

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	08005e90 	.word	0x08005e90

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2uiz>:
 8000b40:	004a      	lsls	r2, r1, #1
 8000b42:	d211      	bcs.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b44:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b48:	d211      	bcs.n	8000b6e <__aeabi_d2uiz+0x2e>
 8000b4a:	d50d      	bpl.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b4c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b50:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b54:	d40e      	bmi.n	8000b74 <__aeabi_d2uiz+0x34>
 8000b56:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	4770      	bx	lr
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_d2uiz+0x3a>
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0000 	mov.w	r0, #0
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_d2f>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b88:	bf24      	itt	cs
 8000b8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b92:	d90d      	bls.n	8000bb0 <__aeabi_d2f+0x30>
 8000b94:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba8:	bf08      	it	eq
 8000baa:	f020 0001 	biceq.w	r0, r0, #1
 8000bae:	4770      	bx	lr
 8000bb0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb4:	d121      	bne.n	8000bfa <__aeabi_d2f+0x7a>
 8000bb6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bba:	bfbc      	itt	lt
 8000bbc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bc0:	4770      	bxlt	lr
 8000bc2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bca:	f1c2 0218 	rsb	r2, r2, #24
 8000bce:	f1c2 0c20 	rsb	ip, r2, #32
 8000bd2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bda:	bf18      	it	ne
 8000bdc:	f040 0001 	orrne.w	r0, r0, #1
 8000be0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bec:	ea40 000c 	orr.w	r0, r0, ip
 8000bf0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf8:	e7cc      	b.n	8000b94 <__aeabi_d2f+0x14>
 8000bfa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfe:	d107      	bne.n	8000c10 <__aeabi_d2f+0x90>
 8000c00:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c04:	bf1e      	ittt	ne
 8000c06:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c0a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0e:	4770      	bxne	lr
 8000c10:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c14:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <__aeabi_uldivmod>:
 8000c20:	b953      	cbnz	r3, 8000c38 <__aeabi_uldivmod+0x18>
 8000c22:	b94a      	cbnz	r2, 8000c38 <__aeabi_uldivmod+0x18>
 8000c24:	2900      	cmp	r1, #0
 8000c26:	bf08      	it	eq
 8000c28:	2800      	cmpeq	r0, #0
 8000c2a:	bf1c      	itt	ne
 8000c2c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c30:	f04f 30ff 	movne.w	r0, #4294967295
 8000c34:	f000 bad0 	b.w	80011d8 <__aeabi_idiv0>
 8000c38:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c40:	f000 f966 	bl	8000f10 <__udivmoddi4>
 8000c44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4c:	b004      	add	sp, #16
 8000c4e:	4770      	bx	lr

08000c50 <__mulsc3>:
 8000c50:	ee60 6a01 	vmul.f32	s13, s0, s2
 8000c54:	ee20 6aa1 	vmul.f32	s12, s1, s3
 8000c58:	ee20 5a21 	vmul.f32	s10, s0, s3
 8000c5c:	ee76 7ac6 	vsub.f32	s15, s13, s12
 8000c60:	ee61 5a20 	vmul.f32	s11, s2, s1
 8000c64:	eef4 7a67 	vcmp.f32	s15, s15
 8000c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c6c:	ee35 7a25 	vadd.f32	s14, s10, s11
 8000c70:	d604      	bvs.n	8000c7c <__mulsc3+0x2c>
 8000c72:	eeb0 0a67 	vmov.f32	s0, s15
 8000c76:	eef0 0a47 	vmov.f32	s1, s14
 8000c7a:	4770      	bx	lr
 8000c7c:	eeb4 7a47 	vcmp.f32	s14, s14
 8000c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c84:	d7f5      	bvc.n	8000c72 <__mulsc3+0x22>
 8000c86:	eddf 4a9e 	vldr	s9, [pc, #632]	; 8000f00 <__mulsc3+0x2b0>
 8000c8a:	eeb0 4ac0 	vabs.f32	s8, s0
 8000c8e:	eeb4 4a64 	vcmp.f32	s8, s9
 8000c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c96:	bfcc      	ite	gt
 8000c98:	2301      	movgt	r3, #1
 8000c9a:	2300      	movle	r3, #0
 8000c9c:	eeb0 4ae0 	vabs.f32	s8, s1
 8000ca0:	f300 80a0 	bgt.w	8000de4 <__mulsc3+0x194>
 8000ca4:	eeb4 4a64 	vcmp.f32	s8, s9
 8000ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cac:	f300 809a 	bgt.w	8000de4 <__mulsc3+0x194>
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	eddf 4a93 	vldr	s9, [pc, #588]	; 8000f00 <__mulsc3+0x2b0>
 8000cb6:	eeb0 4ac1 	vabs.f32	s8, s2
 8000cba:	eeb4 4a64 	vcmp.f32	s8, s9
 8000cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cc2:	eef0 3ae1 	vabs.f32	s7, s3
 8000cc6:	dc48      	bgt.n	8000d5a <__mulsc3+0x10a>
 8000cc8:	eef4 3a64 	vcmp.f32	s7, s9
 8000ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cd0:	dc43      	bgt.n	8000d5a <__mulsc3+0x10a>
 8000cd2:	bb9b      	cbnz	r3, 8000d3c <__mulsc3+0xec>
 8000cd4:	eef0 6ae6 	vabs.f32	s13, s13
 8000cd8:	eef4 6a64 	vcmp.f32	s13, s9
 8000cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ce0:	dc14      	bgt.n	8000d0c <__mulsc3+0xbc>
 8000ce2:	eeb0 6ac6 	vabs.f32	s12, s12
 8000ce6:	eeb4 6a64 	vcmp.f32	s12, s9
 8000cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cee:	dc0d      	bgt.n	8000d0c <__mulsc3+0xbc>
 8000cf0:	eeb0 5ac5 	vabs.f32	s10, s10
 8000cf4:	eeb4 5a64 	vcmp.f32	s10, s9
 8000cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cfc:	dc06      	bgt.n	8000d0c <__mulsc3+0xbc>
 8000cfe:	eef0 5ae5 	vabs.f32	s11, s11
 8000d02:	eef4 5a64 	vcmp.f32	s11, s9
 8000d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d0a:	ddb2      	ble.n	8000c72 <__mulsc3+0x22>
 8000d0c:	eeb4 0a40 	vcmp.f32	s0, s0
 8000d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d14:	f180 80e7 	bvs.w	8000ee6 <__mulsc3+0x296>
 8000d18:	eef4 0a60 	vcmp.f32	s1, s1
 8000d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d20:	f180 80d4 	bvs.w	8000ecc <__mulsc3+0x27c>
 8000d24:	eeb4 1a41 	vcmp.f32	s2, s2
 8000d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d2c:	f180 80c1 	bvs.w	8000eb2 <__mulsc3+0x262>
 8000d30:	eef4 1a61 	vcmp.f32	s3, s3
 8000d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d38:	f180 80ae 	bvs.w	8000e98 <__mulsc3+0x248>
 8000d3c:	ee61 7ae0 	vnmul.f32	s15, s3, s1
 8000d40:	ee60 0a81 	vmul.f32	s1, s1, s2
 8000d44:	eee0 7a01 	vfma.f32	s15, s0, s2
 8000d48:	eee0 0a21 	vfma.f32	s1, s0, s3
 8000d4c:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8000f04 <__mulsc3+0x2b4>
 8000d50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d54:	ee20 7a87 	vmul.f32	s14, s1, s14
 8000d58:	e78b      	b.n	8000c72 <__mulsc3+0x22>
 8000d5a:	eddf 7a69 	vldr	s15, [pc, #420]	; 8000f00 <__mulsc3+0x2b0>
 8000d5e:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8000f00 <__mulsc3+0x2b0>
 8000d62:	eeb4 4a67 	vcmp.f32	s8, s15
 8000d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d6a:	bfcc      	ite	gt
 8000d6c:	2301      	movgt	r3, #1
 8000d6e:	2300      	movle	r3, #0
 8000d70:	ee07 3a90 	vmov	s15, r3
 8000d74:	ee11 3a10 	vmov	r3, s2
 8000d78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	eef0 7ae7 	vabs.f32	s15, s15
 8000d82:	eef4 3a47 	vcmp.f32	s7, s14
 8000d86:	bfb8      	it	lt
 8000d88:	eef1 7a67 	vneglt.f32	s15, s15
 8000d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d90:	bfcc      	ite	gt
 8000d92:	2301      	movgt	r3, #1
 8000d94:	2300      	movle	r3, #0
 8000d96:	eeb0 1a67 	vmov.f32	s2, s15
 8000d9a:	ee07 3a90 	vmov	s15, r3
 8000d9e:	ee11 3a90 	vmov	r3, s3
 8000da2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	eef0 7ae7 	vabs.f32	s15, s15
 8000dac:	eeb4 0a40 	vcmp.f32	s0, s0
 8000db0:	bfb8      	it	lt
 8000db2:	eef1 7a67 	vneglt.f32	s15, s15
 8000db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dba:	eef0 1a67 	vmov.f32	s3, s15
 8000dbe:	d651      	bvs.n	8000e64 <__mulsc3+0x214>
 8000dc0:	eef4 0a60 	vcmp.f32	s1, s1
 8000dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dc8:	d7b8      	bvc.n	8000d3c <__mulsc3+0xec>
 8000dca:	ee10 3a90 	vmov	r3, s1
 8000dce:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8000f08 <__mulsc3+0x2b8>
 8000dd2:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8000f0c <__mulsc3+0x2bc>
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	bfb4      	ite	lt
 8000dda:	eef0 0a67 	vmovlt.f32	s1, s15
 8000dde:	eef0 0a47 	vmovge.f32	s1, s14
 8000de2:	e7ab      	b.n	8000d3c <__mulsc3+0xec>
 8000de4:	ee04 3a90 	vmov	s9, r3
 8000de8:	eddf 3a45 	vldr	s7, [pc, #276]	; 8000f00 <__mulsc3+0x2b0>
 8000dec:	ee10 3a10 	vmov	r3, s0
 8000df0:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	eef0 4ae4 	vabs.f32	s9, s9
 8000dfa:	eeb4 4a63 	vcmp.f32	s8, s7
 8000dfe:	bfb8      	it	lt
 8000e00:	eef1 4a64 	vneglt.f32	s9, s9
 8000e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e08:	bfcc      	ite	gt
 8000e0a:	2301      	movgt	r3, #1
 8000e0c:	2300      	movle	r3, #0
 8000e0e:	eeb0 0a64 	vmov.f32	s0, s9
 8000e12:	ee04 3a90 	vmov	s9, r3
 8000e16:	ee10 3a90 	vmov	r3, s1
 8000e1a:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	eef0 4ae4 	vabs.f32	s9, s9
 8000e24:	eeb4 1a41 	vcmp.f32	s2, s2
 8000e28:	bfb8      	it	lt
 8000e2a:	eef1 4a64 	vneglt.f32	s9, s9
 8000e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e32:	eef0 0a64 	vmov.f32	s1, s9
 8000e36:	d622      	bvs.n	8000e7e <__mulsc3+0x22e>
 8000e38:	eef4 1a61 	vcmp.f32	s3, s3
 8000e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e40:	bf78      	it	vc
 8000e42:	2301      	movvc	r3, #1
 8000e44:	f5ff af35 	bvc.w	8000cb2 <__mulsc3+0x62>
 8000e48:	ee11 3a90 	vmov	r3, s3
 8000e4c:	ed9f 4a2e 	vldr	s8, [pc, #184]	; 8000f08 <__mulsc3+0x2b8>
 8000e50:	eddf 4a2e 	vldr	s9, [pc, #184]	; 8000f0c <__mulsc3+0x2bc>
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	bfb4      	ite	lt
 8000e58:	eef0 1a64 	vmovlt.f32	s3, s9
 8000e5c:	eef0 1a44 	vmovge.f32	s3, s8
 8000e60:	2301      	movs	r3, #1
 8000e62:	e726      	b.n	8000cb2 <__mulsc3+0x62>
 8000e64:	ee10 3a10 	vmov	r3, s0
 8000e68:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8000f08 <__mulsc3+0x2b8>
 8000e6c:	eddf 7a27 	vldr	s15, [pc, #156]	; 8000f0c <__mulsc3+0x2bc>
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	bfb4      	ite	lt
 8000e74:	eeb0 0a67 	vmovlt.f32	s0, s15
 8000e78:	eeb0 0a47 	vmovge.f32	s0, s14
 8000e7c:	e7a0      	b.n	8000dc0 <__mulsc3+0x170>
 8000e7e:	ee11 3a10 	vmov	r3, s2
 8000e82:	ed9f 4a21 	vldr	s8, [pc, #132]	; 8000f08 <__mulsc3+0x2b8>
 8000e86:	eddf 4a21 	vldr	s9, [pc, #132]	; 8000f0c <__mulsc3+0x2bc>
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	bfb4      	ite	lt
 8000e8e:	eeb0 1a64 	vmovlt.f32	s2, s9
 8000e92:	eeb0 1a44 	vmovge.f32	s2, s8
 8000e96:	e7cf      	b.n	8000e38 <__mulsc3+0x1e8>
 8000e98:	ee11 3a90 	vmov	r3, s3
 8000e9c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000f08 <__mulsc3+0x2b8>
 8000ea0:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8000f0c <__mulsc3+0x2bc>
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	bfb4      	ite	lt
 8000ea8:	eef0 1a67 	vmovlt.f32	s3, s15
 8000eac:	eef0 1a47 	vmovge.f32	s3, s14
 8000eb0:	e744      	b.n	8000d3c <__mulsc3+0xec>
 8000eb2:	ee11 3a10 	vmov	r3, s2
 8000eb6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000f08 <__mulsc3+0x2b8>
 8000eba:	eddf 7a14 	vldr	s15, [pc, #80]	; 8000f0c <__mulsc3+0x2bc>
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	bfb4      	ite	lt
 8000ec2:	eeb0 1a67 	vmovlt.f32	s2, s15
 8000ec6:	eeb0 1a47 	vmovge.f32	s2, s14
 8000eca:	e731      	b.n	8000d30 <__mulsc3+0xe0>
 8000ecc:	ee10 3a90 	vmov	r3, s1
 8000ed0:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000f08 <__mulsc3+0x2b8>
 8000ed4:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8000f0c <__mulsc3+0x2bc>
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	bfb4      	ite	lt
 8000edc:	eef0 0a67 	vmovlt.f32	s1, s15
 8000ee0:	eef0 0a47 	vmovge.f32	s1, s14
 8000ee4:	e71e      	b.n	8000d24 <__mulsc3+0xd4>
 8000ee6:	ee10 3a10 	vmov	r3, s0
 8000eea:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000f08 <__mulsc3+0x2b8>
 8000eee:	eddf 7a07 	vldr	s15, [pc, #28]	; 8000f0c <__mulsc3+0x2bc>
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	bfb4      	ite	lt
 8000ef6:	eeb0 0a67 	vmovlt.f32	s0, s15
 8000efa:	eeb0 0a47 	vmovge.f32	s0, s14
 8000efe:	e70b      	b.n	8000d18 <__mulsc3+0xc8>
 8000f00:	7f7fffff 	.word	0x7f7fffff
 8000f04:	7f800000 	.word	0x7f800000
 8000f08:	00000000 	.word	0x00000000
 8000f0c:	80000000 	.word	0x80000000

08000f10 <__udivmoddi4>:
 8000f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f14:	9e08      	ldr	r6, [sp, #32]
 8000f16:	460d      	mov	r5, r1
 8000f18:	4604      	mov	r4, r0
 8000f1a:	460f      	mov	r7, r1
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d14a      	bne.n	8000fb6 <__udivmoddi4+0xa6>
 8000f20:	428a      	cmp	r2, r1
 8000f22:	4694      	mov	ip, r2
 8000f24:	d965      	bls.n	8000ff2 <__udivmoddi4+0xe2>
 8000f26:	fab2 f382 	clz	r3, r2
 8000f2a:	b143      	cbz	r3, 8000f3e <__udivmoddi4+0x2e>
 8000f2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f30:	f1c3 0220 	rsb	r2, r3, #32
 8000f34:	409f      	lsls	r7, r3
 8000f36:	fa20 f202 	lsr.w	r2, r0, r2
 8000f3a:	4317      	orrs	r7, r2
 8000f3c:	409c      	lsls	r4, r3
 8000f3e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000f42:	fa1f f58c 	uxth.w	r5, ip
 8000f46:	fbb7 f1fe 	udiv	r1, r7, lr
 8000f4a:	0c22      	lsrs	r2, r4, #16
 8000f4c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000f50:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000f54:	fb01 f005 	mul.w	r0, r1, r5
 8000f58:	4290      	cmp	r0, r2
 8000f5a:	d90a      	bls.n	8000f72 <__udivmoddi4+0x62>
 8000f5c:	eb1c 0202 	adds.w	r2, ip, r2
 8000f60:	f101 37ff 	add.w	r7, r1, #4294967295
 8000f64:	f080 811c 	bcs.w	80011a0 <__udivmoddi4+0x290>
 8000f68:	4290      	cmp	r0, r2
 8000f6a:	f240 8119 	bls.w	80011a0 <__udivmoddi4+0x290>
 8000f6e:	3902      	subs	r1, #2
 8000f70:	4462      	add	r2, ip
 8000f72:	1a12      	subs	r2, r2, r0
 8000f74:	b2a4      	uxth	r4, r4
 8000f76:	fbb2 f0fe 	udiv	r0, r2, lr
 8000f7a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000f7e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f82:	fb00 f505 	mul.w	r5, r0, r5
 8000f86:	42a5      	cmp	r5, r4
 8000f88:	d90a      	bls.n	8000fa0 <__udivmoddi4+0x90>
 8000f8a:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f92:	f080 8107 	bcs.w	80011a4 <__udivmoddi4+0x294>
 8000f96:	42a5      	cmp	r5, r4
 8000f98:	f240 8104 	bls.w	80011a4 <__udivmoddi4+0x294>
 8000f9c:	4464      	add	r4, ip
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000fa4:	1b64      	subs	r4, r4, r5
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	b11e      	cbz	r6, 8000fb2 <__udivmoddi4+0xa2>
 8000faa:	40dc      	lsrs	r4, r3
 8000fac:	2300      	movs	r3, #0
 8000fae:	e9c6 4300 	strd	r4, r3, [r6]
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d908      	bls.n	8000fcc <__udivmoddi4+0xbc>
 8000fba:	2e00      	cmp	r6, #0
 8000fbc:	f000 80ed 	beq.w	800119a <__udivmoddi4+0x28a>
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	e9c6 0500 	strd	r0, r5, [r6]
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fcc:	fab3 f183 	clz	r1, r3
 8000fd0:	2900      	cmp	r1, #0
 8000fd2:	d149      	bne.n	8001068 <__udivmoddi4+0x158>
 8000fd4:	42ab      	cmp	r3, r5
 8000fd6:	d302      	bcc.n	8000fde <__udivmoddi4+0xce>
 8000fd8:	4282      	cmp	r2, r0
 8000fda:	f200 80f8 	bhi.w	80011ce <__udivmoddi4+0x2be>
 8000fde:	1a84      	subs	r4, r0, r2
 8000fe0:	eb65 0203 	sbc.w	r2, r5, r3
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	4617      	mov	r7, r2
 8000fe8:	2e00      	cmp	r6, #0
 8000fea:	d0e2      	beq.n	8000fb2 <__udivmoddi4+0xa2>
 8000fec:	e9c6 4700 	strd	r4, r7, [r6]
 8000ff0:	e7df      	b.n	8000fb2 <__udivmoddi4+0xa2>
 8000ff2:	b902      	cbnz	r2, 8000ff6 <__udivmoddi4+0xe6>
 8000ff4:	deff      	udf	#255	; 0xff
 8000ff6:	fab2 f382 	clz	r3, r2
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	f040 8090 	bne.w	8001120 <__udivmoddi4+0x210>
 8001000:	1a8a      	subs	r2, r1, r2
 8001002:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001006:	fa1f fe8c 	uxth.w	lr, ip
 800100a:	2101      	movs	r1, #1
 800100c:	fbb2 f5f7 	udiv	r5, r2, r7
 8001010:	fb07 2015 	mls	r0, r7, r5, r2
 8001014:	0c22      	lsrs	r2, r4, #16
 8001016:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800101a:	fb0e f005 	mul.w	r0, lr, r5
 800101e:	4290      	cmp	r0, r2
 8001020:	d908      	bls.n	8001034 <__udivmoddi4+0x124>
 8001022:	eb1c 0202 	adds.w	r2, ip, r2
 8001026:	f105 38ff 	add.w	r8, r5, #4294967295
 800102a:	d202      	bcs.n	8001032 <__udivmoddi4+0x122>
 800102c:	4290      	cmp	r0, r2
 800102e:	f200 80cb 	bhi.w	80011c8 <__udivmoddi4+0x2b8>
 8001032:	4645      	mov	r5, r8
 8001034:	1a12      	subs	r2, r2, r0
 8001036:	b2a4      	uxth	r4, r4
 8001038:	fbb2 f0f7 	udiv	r0, r2, r7
 800103c:	fb07 2210 	mls	r2, r7, r0, r2
 8001040:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001044:	fb0e fe00 	mul.w	lr, lr, r0
 8001048:	45a6      	cmp	lr, r4
 800104a:	d908      	bls.n	800105e <__udivmoddi4+0x14e>
 800104c:	eb1c 0404 	adds.w	r4, ip, r4
 8001050:	f100 32ff 	add.w	r2, r0, #4294967295
 8001054:	d202      	bcs.n	800105c <__udivmoddi4+0x14c>
 8001056:	45a6      	cmp	lr, r4
 8001058:	f200 80bb 	bhi.w	80011d2 <__udivmoddi4+0x2c2>
 800105c:	4610      	mov	r0, r2
 800105e:	eba4 040e 	sub.w	r4, r4, lr
 8001062:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001066:	e79f      	b.n	8000fa8 <__udivmoddi4+0x98>
 8001068:	f1c1 0720 	rsb	r7, r1, #32
 800106c:	408b      	lsls	r3, r1
 800106e:	fa22 fc07 	lsr.w	ip, r2, r7
 8001072:	ea4c 0c03 	orr.w	ip, ip, r3
 8001076:	fa05 f401 	lsl.w	r4, r5, r1
 800107a:	fa20 f307 	lsr.w	r3, r0, r7
 800107e:	40fd      	lsrs	r5, r7
 8001080:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001084:	4323      	orrs	r3, r4
 8001086:	fbb5 f8f9 	udiv	r8, r5, r9
 800108a:	fa1f fe8c 	uxth.w	lr, ip
 800108e:	fb09 5518 	mls	r5, r9, r8, r5
 8001092:	0c1c      	lsrs	r4, r3, #16
 8001094:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001098:	fb08 f50e 	mul.w	r5, r8, lr
 800109c:	42a5      	cmp	r5, r4
 800109e:	fa02 f201 	lsl.w	r2, r2, r1
 80010a2:	fa00 f001 	lsl.w	r0, r0, r1
 80010a6:	d90b      	bls.n	80010c0 <__udivmoddi4+0x1b0>
 80010a8:	eb1c 0404 	adds.w	r4, ip, r4
 80010ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80010b0:	f080 8088 	bcs.w	80011c4 <__udivmoddi4+0x2b4>
 80010b4:	42a5      	cmp	r5, r4
 80010b6:	f240 8085 	bls.w	80011c4 <__udivmoddi4+0x2b4>
 80010ba:	f1a8 0802 	sub.w	r8, r8, #2
 80010be:	4464      	add	r4, ip
 80010c0:	1b64      	subs	r4, r4, r5
 80010c2:	b29d      	uxth	r5, r3
 80010c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80010c8:	fb09 4413 	mls	r4, r9, r3, r4
 80010cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80010d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80010d4:	45a6      	cmp	lr, r4
 80010d6:	d908      	bls.n	80010ea <__udivmoddi4+0x1da>
 80010d8:	eb1c 0404 	adds.w	r4, ip, r4
 80010dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80010e0:	d26c      	bcs.n	80011bc <__udivmoddi4+0x2ac>
 80010e2:	45a6      	cmp	lr, r4
 80010e4:	d96a      	bls.n	80011bc <__udivmoddi4+0x2ac>
 80010e6:	3b02      	subs	r3, #2
 80010e8:	4464      	add	r4, ip
 80010ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80010ee:	fba3 9502 	umull	r9, r5, r3, r2
 80010f2:	eba4 040e 	sub.w	r4, r4, lr
 80010f6:	42ac      	cmp	r4, r5
 80010f8:	46c8      	mov	r8, r9
 80010fa:	46ae      	mov	lr, r5
 80010fc:	d356      	bcc.n	80011ac <__udivmoddi4+0x29c>
 80010fe:	d053      	beq.n	80011a8 <__udivmoddi4+0x298>
 8001100:	b156      	cbz	r6, 8001118 <__udivmoddi4+0x208>
 8001102:	ebb0 0208 	subs.w	r2, r0, r8
 8001106:	eb64 040e 	sbc.w	r4, r4, lr
 800110a:	fa04 f707 	lsl.w	r7, r4, r7
 800110e:	40ca      	lsrs	r2, r1
 8001110:	40cc      	lsrs	r4, r1
 8001112:	4317      	orrs	r7, r2
 8001114:	e9c6 7400 	strd	r7, r4, [r6]
 8001118:	4618      	mov	r0, r3
 800111a:	2100      	movs	r1, #0
 800111c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001120:	f1c3 0120 	rsb	r1, r3, #32
 8001124:	fa02 fc03 	lsl.w	ip, r2, r3
 8001128:	fa20 f201 	lsr.w	r2, r0, r1
 800112c:	fa25 f101 	lsr.w	r1, r5, r1
 8001130:	409d      	lsls	r5, r3
 8001132:	432a      	orrs	r2, r5
 8001134:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001138:	fa1f fe8c 	uxth.w	lr, ip
 800113c:	fbb1 f0f7 	udiv	r0, r1, r7
 8001140:	fb07 1510 	mls	r5, r7, r0, r1
 8001144:	0c11      	lsrs	r1, r2, #16
 8001146:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800114a:	fb00 f50e 	mul.w	r5, r0, lr
 800114e:	428d      	cmp	r5, r1
 8001150:	fa04 f403 	lsl.w	r4, r4, r3
 8001154:	d908      	bls.n	8001168 <__udivmoddi4+0x258>
 8001156:	eb1c 0101 	adds.w	r1, ip, r1
 800115a:	f100 38ff 	add.w	r8, r0, #4294967295
 800115e:	d22f      	bcs.n	80011c0 <__udivmoddi4+0x2b0>
 8001160:	428d      	cmp	r5, r1
 8001162:	d92d      	bls.n	80011c0 <__udivmoddi4+0x2b0>
 8001164:	3802      	subs	r0, #2
 8001166:	4461      	add	r1, ip
 8001168:	1b49      	subs	r1, r1, r5
 800116a:	b292      	uxth	r2, r2
 800116c:	fbb1 f5f7 	udiv	r5, r1, r7
 8001170:	fb07 1115 	mls	r1, r7, r5, r1
 8001174:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001178:	fb05 f10e 	mul.w	r1, r5, lr
 800117c:	4291      	cmp	r1, r2
 800117e:	d908      	bls.n	8001192 <__udivmoddi4+0x282>
 8001180:	eb1c 0202 	adds.w	r2, ip, r2
 8001184:	f105 38ff 	add.w	r8, r5, #4294967295
 8001188:	d216      	bcs.n	80011b8 <__udivmoddi4+0x2a8>
 800118a:	4291      	cmp	r1, r2
 800118c:	d914      	bls.n	80011b8 <__udivmoddi4+0x2a8>
 800118e:	3d02      	subs	r5, #2
 8001190:	4462      	add	r2, ip
 8001192:	1a52      	subs	r2, r2, r1
 8001194:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001198:	e738      	b.n	800100c <__udivmoddi4+0xfc>
 800119a:	4631      	mov	r1, r6
 800119c:	4630      	mov	r0, r6
 800119e:	e708      	b.n	8000fb2 <__udivmoddi4+0xa2>
 80011a0:	4639      	mov	r1, r7
 80011a2:	e6e6      	b.n	8000f72 <__udivmoddi4+0x62>
 80011a4:	4610      	mov	r0, r2
 80011a6:	e6fb      	b.n	8000fa0 <__udivmoddi4+0x90>
 80011a8:	4548      	cmp	r0, r9
 80011aa:	d2a9      	bcs.n	8001100 <__udivmoddi4+0x1f0>
 80011ac:	ebb9 0802 	subs.w	r8, r9, r2
 80011b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80011b4:	3b01      	subs	r3, #1
 80011b6:	e7a3      	b.n	8001100 <__udivmoddi4+0x1f0>
 80011b8:	4645      	mov	r5, r8
 80011ba:	e7ea      	b.n	8001192 <__udivmoddi4+0x282>
 80011bc:	462b      	mov	r3, r5
 80011be:	e794      	b.n	80010ea <__udivmoddi4+0x1da>
 80011c0:	4640      	mov	r0, r8
 80011c2:	e7d1      	b.n	8001168 <__udivmoddi4+0x258>
 80011c4:	46d0      	mov	r8, sl
 80011c6:	e77b      	b.n	80010c0 <__udivmoddi4+0x1b0>
 80011c8:	3d02      	subs	r5, #2
 80011ca:	4462      	add	r2, ip
 80011cc:	e732      	b.n	8001034 <__udivmoddi4+0x124>
 80011ce:	4608      	mov	r0, r1
 80011d0:	e70a      	b.n	8000fe8 <__udivmoddi4+0xd8>
 80011d2:	4464      	add	r4, ip
 80011d4:	3802      	subs	r0, #2
 80011d6:	e742      	b.n	800105e <__udivmoddi4+0x14e>

080011d8 <__aeabi_idiv0>:
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop

080011dc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80011dc:	b510      	push	{r4, lr}

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011de:	2400      	movs	r4, #0
{
 80011e0:	b08c      	sub	sp, #48	; 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 80011e2:	2220      	movs	r2, #32
 80011e4:	4621      	mov	r1, r4
 80011e6:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 80011e8:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80011ec:	9403      	str	r4, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011ee:	f003 f924 	bl	800443a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011f2:	481f      	ldr	r0, [pc, #124]	; (8001270 <MX_ADC1_Init+0x94>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 80011f4:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80011f8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80011fc:	e9c0 1300 	strd	r1, r3, [r0]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.GainCompensation = 0;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001200:	2304      	movs	r3, #4
 8001202:	6183      	str	r3, [r0, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001204:	f44f 6cac 	mov.w	ip, #1376	; 0x560
  hadc1.Init.NbrOfConversion = 1;
 8001208:	2301      	movs	r3, #1
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800120a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800120e:	8384      	strh	r4, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001210:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001214:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001218:	e9c0 c20b 	strd	ip, r2, [r0, #44]	; 0x2c
  hadc1.Init.NbrOfConversion = 1;
 800121c:	6203      	str	r3, [r0, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800121e:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001222:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001226:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001228:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800122c:	f000 feb8 	bl	8001fa0 <HAL_ADC_Init>
 8001230:	b108      	cbz	r0, 8001236 <MX_ADC1_Init+0x5a>
  {
    Error_Handler();
 8001232:	f000 fb7f 	bl	8001934 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001236:	480e      	ldr	r0, [pc, #56]	; (8001270 <MX_ADC1_Init+0x94>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001238:	9401      	str	r4, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800123a:	a901      	add	r1, sp, #4
 800123c:	f001 fa6c 	bl	8002718 <HAL_ADCEx_MultiModeConfigChannel>
 8001240:	b108      	cbz	r0, 8001246 <MX_ADC1_Init+0x6a>
  {
    Error_Handler();
 8001242:	f000 fb77 	bl	8001934 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001246:	4a0b      	ldr	r2, [pc, #44]	; (8001274 <MX_ADC1_Init+0x98>)
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001248:	4809      	ldr	r0, [pc, #36]	; (8001270 <MX_ADC1_Init+0x94>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800124a:	2306      	movs	r3, #6
 800124c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001250:	2300      	movs	r3, #0
 8001252:	227f      	movs	r2, #127	; 0x7f
 8001254:	e9cd 3206 	strd	r3, r2, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001258:	a904      	add	r1, sp, #16
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800125a:	2204      	movs	r2, #4
  sConfig.Offset = 0;
 800125c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001260:	f000 ffde 	bl	8002220 <HAL_ADC_ConfigChannel>
 8001264:	b108      	cbz	r0, 800126a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001266:	f000 fb65 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800126a:	b00c      	add	sp, #48	; 0x30
 800126c:	bd10      	pop	{r4, pc}
 800126e:	bf00      	nop
 8001270:	2000008c 	.word	0x2000008c
 8001274:	14f00020 	.word	0x14f00020

08001278 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001278:	b570      	push	{r4, r5, r6, lr}
 800127a:	b098      	sub	sp, #96	; 0x60
 800127c:	4605      	mov	r5, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127e:	2214      	movs	r2, #20
 8001280:	2100      	movs	r1, #0
 8001282:	a802      	add	r0, sp, #8
 8001284:	f003 f8d9 	bl	800443a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001288:	2244      	movs	r2, #68	; 0x44
 800128a:	2100      	movs	r1, #0
 800128c:	a807      	add	r0, sp, #28
 800128e:	f003 f8d4 	bl	800443a <memset>
  if(adcHandle->Instance==ADC1)
 8001292:	682b      	ldr	r3, [r5, #0]
 8001294:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001298:	d143      	bne.n	8001322 <HAL_ADC_MspInit+0xaa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800129a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800129e:	9307      	str	r3, [sp, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012a0:	a807      	add	r0, sp, #28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80012a2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80012a6:	9316      	str	r3, [sp, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012a8:	f002 f8d0 	bl	800344c <HAL_RCCEx_PeriphCLKConfig>
 80012ac:	b108      	cbz	r0, 80012b2 <HAL_ADC_MspInit+0x3a>
    {
      Error_Handler();
 80012ae:	f000 fb41 	bl	8001934 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80012b2:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <HAL_ADC_MspInit+0xb0>)
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b4:	481d      	ldr	r0, [pc, #116]	; (800132c <HAL_ADC_MspInit+0xb4>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 80012b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80012b8:	4c1d      	ldr	r4, [pc, #116]	; (8001330 <HAL_ADC_MspInit+0xb8>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 80012ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80012be:	64da      	str	r2, [r3, #76]	; 0x4c
 80012c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012c2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80012c6:	9200      	str	r2, [sp, #0]
 80012c8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012cc:	f042 0202 	orr.w	r2, r2, #2
 80012d0:	64da      	str	r2, [r3, #76]	; 0x4c
 80012d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2600      	movs	r6, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012dc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e0:	2303      	movs	r3, #3
 80012e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e6:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ec:	f001 fc1c 	bl	8002b28 <HAL_GPIO_Init>
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80012f0:	4910      	ldr	r1, [pc, #64]	; (8001334 <HAL_ADC_MspInit+0xbc>)
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012f2:	6226      	str	r6, [r4, #32]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80012f4:	2305      	movs	r3, #5
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012f6:	2080      	movs	r0, #128	; 0x80
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80012f8:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001300:	e9c4 0304 	strd	r0, r3, [r4, #16]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001304:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 8001308:	2320      	movs	r3, #32
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800130a:	4620      	mov	r0, r4
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800130c:	e9c4 6602 	strd	r6, r6, [r4, #8]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001310:	e9c4 c306 	strd	ip, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001314:	f001 fb0a 	bl	800292c <HAL_DMA_Init>
 8001318:	b108      	cbz	r0, 800131e <HAL_ADC_MspInit+0xa6>
    {
      Error_Handler();
 800131a:	f000 fb0b 	bl	8001934 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800131e:	656c      	str	r4, [r5, #84]	; 0x54
 8001320:	62a5      	str	r5, [r4, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001322:	b018      	add	sp, #96	; 0x60
 8001324:	bd70      	pop	{r4, r5, r6, pc}
 8001326:	bf00      	nop
 8001328:	40021000 	.word	0x40021000
 800132c:	48000400 	.word	0x48000400
 8001330:	200000f8 	.word	0x200000f8
 8001334:	40020008 	.word	0x40020008

08001338 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001338:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <MX_DMA_Init+0x40>)
{
 800133a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800133c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800133e:	f042 0204 	orr.w	r2, r2, #4
 8001342:	649a      	str	r2, [r3, #72]	; 0x48
 8001344:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001346:	f002 0204 	and.w	r2, r2, #4
 800134a:	9200      	str	r2, [sp, #0]
 800134c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800134e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001350:	f042 0201 	orr.w	r2, r2, #1
 8001354:	649a      	str	r2, [r3, #72]	; 0x48
 8001356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 800135e:	2200      	movs	r2, #0
 8001360:	2101      	movs	r1, #1
 8001362:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001364:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8001366:	f001 fa4f 	bl	8002808 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800136a:	200b      	movs	r0, #11

}
 800136c:	b003      	add	sp, #12
 800136e:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001372:	f001 ba7b 	b.w	800286c <HAL_NVIC_EnableIRQ>
 8001376:	bf00      	nop
 8001378:	40021000 	.word	0x40021000

0800137c <array_reverse>:
void array_reverse(float array[])
{
	uint16_t i, j;
	float temp;

	for (i = 0; i < FFT_LENGTH; i++) {
 800137c:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <array_reverse+0x58>)
 800137e:	f8b3 c000 	ldrh.w	ip, [r3]
	uint16_t mask = FFT_LENGTH_BIT - 1;
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <array_reverse+0x5c>)
 8001384:	881a      	ldrh	r2, [r3, #0]
 8001386:	3a01      	subs	r2, #1
{
 8001388:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t mask = FFT_LENGTH_BIT - 1;
 800138a:	b292      	uxth	r2, r2
 800138c:	4686      	mov	lr, r0
	for (i = 0; i < FFT_LENGTH; i++) {
 800138e:	2600      	movs	r6, #0
 8001390:	b2b5      	uxth	r5, r6
 8001392:	45ac      	cmp	ip, r5
 8001394:	d819      	bhi.n	80013ca <array_reverse+0x4e>
			temp = array[i];
			array[i] = array[j];
			array[j] = temp;
		}
	}
}
 8001396:	bdf0      	pop	{r4, r5, r6, r7, pc}
		num |= ((x % 2) << mask);
 8001398:	f004 0701 	and.w	r7, r4, #1
 800139c:	408f      	lsls	r7, r1
 800139e:	433b      	orrs	r3, r7
		mask--;
 80013a0:	3901      	subs	r1, #1
		num |= ((x % 2) << mask);
 80013a2:	b29b      	uxth	r3, r3
		mask--;
 80013a4:	b289      	uxth	r1, r1
		x /= 2;
 80013a6:	f3c4 044f 	ubfx	r4, r4, #1, #16
	while (x) {
 80013aa:	2c00      	cmp	r4, #0
 80013ac:	d1f4      	bne.n	8001398 <array_reverse+0x1c>
		if (i < j) {
 80013ae:	42ab      	cmp	r3, r5
 80013b0:	d907      	bls.n	80013c2 <array_reverse+0x46>
			array[i] = array[j];
 80013b2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
			temp = array[i];
 80013b6:	f8de 1000 	ldr.w	r1, [lr]
			array[i] = array[j];
 80013ba:	681c      	ldr	r4, [r3, #0]
 80013bc:	f8ce 4000 	str.w	r4, [lr]
			array[j] = temp;
 80013c0:	6019      	str	r1, [r3, #0]
	for (i = 0; i < FFT_LENGTH; i++) {
 80013c2:	3601      	adds	r6, #1
 80013c4:	f10e 0e04 	add.w	lr, lr, #4
 80013c8:	e7e2      	b.n	8001390 <array_reverse+0x14>
	uint16_t mask = FFT_LENGTH_BIT - 1;
 80013ca:	4611      	mov	r1, r2
 80013cc:	462c      	mov	r4, r5
	uint16_t num = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	e7eb      	b.n	80013aa <array_reverse+0x2e>
 80013d2:	bf00      	nop
 80013d4:	20000158 	.word	0x20000158
 80013d8:	2000015a 	.word	0x2000015a
 80013dc:	00000000 	.word	0x00000000

080013e0 <FFT_Compute>:

void FFT_Compute(float data_in[], float data_out[], uint16_t N)
{
 80013e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013e4:	ed2d 8b02 	vpush	{d8}
	FFT_LENGTH = N;
 80013e8:	4bc1      	ldr	r3, [pc, #772]	; (80016f0 <FFT_Compute+0x310>)
{
 80013ea:	b08f      	sub	sp, #60	; 0x3c
 80013ec:	af00      	add	r7, sp, #0
	FFT_LENGTH = N;
 80013ee:	801a      	strh	r2, [r3, #0]
{
 80013f0:	4604      	mov	r4, r0
	FFT_LENGTH_BIT = log2(FFT_LENGTH);
 80013f2:	4610      	mov	r0, r2
{
 80013f4:	4692      	mov	sl, r2
 80013f6:	61b9      	str	r1, [r7, #24]
	FFT_LENGTH_BIT = log2(FFT_LENGTH);
 80013f8:	f7ff f850 	bl	800049c <__aeabi_ui2d>
 80013fc:	ec41 0b10 	vmov	d0, r0, r1
 8001400:	f003 f84e 	bl	80044a0 <log>
 8001404:	a3b6      	add	r3, pc, #728	; (adr r3, 80016e0 <FFT_Compute+0x300>)
 8001406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140a:	ec51 0b10 	vmov	r0, r1, d0
 800140e:	f7ff f9e9 	bl	80007e4 <__aeabi_ddiv>
 8001412:	f7ff fb95 	bl	8000b40 <__aeabi_d2uiz>
 8001416:	b283      	uxth	r3, r0
 8001418:	62bb      	str	r3, [r7, #40]	; 0x28
 800141a:	4bb6      	ldr	r3, [pc, #728]	; (80016f4 <FFT_Compute+0x314>)
 800141c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800141e:	801a      	strh	r2, [r3, #0]

	complex float out_fft[FFT_LENGTH];
 8001420:	466b      	mov	r3, sp
 8001422:	eba3 03ca 	sub.w	r3, r3, sl, lsl #3
 8001426:	469d      	mov	sp, r3
	complex float last_fft[FFT_LENGTH];
 8001428:	eba3 03ca 	sub.w	r3, r3, sl, lsl #3
	complex float out_fft[FFT_LENGTH];
 800142c:	f8c7 d024 	str.w	sp, [r7, #36]	; 0x24
	complex float last_fft[FFT_LENGTH];
 8001430:	469d      	mov	sp, r3
	complex float W[FFT_LENGTH];
 8001432:	eba3 03ca 	sub.w	r3, r3, sl, lsl #3

	array_reverse(data_in);
 8001436:	4620      	mov	r0, r4
	complex float last_fft[FFT_LENGTH];
 8001438:	46eb      	mov	fp, sp
	complex float W[FFT_LENGTH];
 800143a:	469d      	mov	sp, r3
 800143c:	f8c7 d02c 	str.w	sp, [r7, #44]	; 0x2c
	array_reverse(data_in);
 8001440:	f7ff ff9c 	bl	800137c <array_reverse>

	for (uint16_t i = 0; i < FFT_LENGTH; i += 2)
 8001444:	2300      	movs	r3, #0
		last_fft[i] = data_in[i] + data_in[i+1];
 8001446:	2000      	movs	r0, #0
	for (uint16_t i = 0; i < FFT_LENGTH; i += 2)
 8001448:	4553      	cmp	r3, sl
 800144a:	d32b      	bcc.n	80014a4 <FFT_Compute+0xc4>
 800144c:	4620      	mov	r0, r4
 800144e:	f10b 0208 	add.w	r2, fp, #8
	for (uint16_t i = 1; i < FFT_LENGTH; i += 2)
 8001452:	2301      	movs	r3, #1
		last_fft[i] = data_in[i-1] - data_in[i];
 8001454:	2100      	movs	r1, #0
	for (uint16_t i = 1; i < FFT_LENGTH; i += 2)
 8001456:	4553      	cmp	r3, sl
 8001458:	f100 0008 	add.w	r0, r0, #8
 800145c:	f102 0210 	add.w	r2, r2, #16
 8001460:	d330      	bcc.n	80014c4 <FFT_Compute+0xe4>

	uint16_t fft_half = FFT_LENGTH/2;
 8001462:	ea4f 035a 	mov.w	r3, sl, lsr #1
 8001466:	6afc      	ldr	r4, [r7, #44]	; 0x2c

	for (uint16_t i = 0; i < FFT_LENGTH; i++) {
		if (i == 0)
			W[i] = 1;
		else if (i == fft_half)
			W[i] = -1;
 8001468:	4ea3      	ldr	r6, [pc, #652]	; (80016f8 <FFT_Compute+0x318>)
	uint16_t fft_half = FFT_LENGTH/2;
 800146a:	61fb      	str	r3, [r7, #28]
	for (uint16_t i = 0; i < FFT_LENGTH; i++) {
 800146c:	2500      	movs	r5, #0
 800146e:	45aa      	cmp	sl, r5
 8001470:	d135      	bne.n	80014de <FFT_Compute+0xfe>
 8001472:	2301      	movs	r3, #1
 8001474:	633b      	str	r3, [r7, #48]	; 0x30
	uint16_t mask = FFT_LENGTH_BIT - 1;
 8001476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001478:	3b01      	subs	r3, #1
 800147a:	b29b      	uxth	r3, r3
 800147c:	613b      	str	r3, [r7, #16]
		else
			W[i] = cos((2 * M_PI * i) / FFT_LENGTH) - I*sin((2 * M_PI * i) / FFT_LENGTH);
	}

	for (uint16_t i = 1; i < FFT_LENGTH_BIT; i++) {
 800147e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001480:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001482:	429a      	cmp	r2, r3
 8001484:	d87a      	bhi.n	800157c <FFT_Compute+0x19c>
 8001486:	69bc      	ldr	r4, [r7, #24]
 8001488:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800148a:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
		}
		for (uint16_t j = 0; j < FFT_LENGTH; j++)
			last_fft[j] = out_fft[j];
	}

	for (uint16_t i = 0; i < FFT_LENGTH; i++)
 800148e:	45a2      	cmp	sl, r4
 8001490:	f105 0508 	add.w	r5, r5, #8
 8001494:	f040 8108 	bne.w	80016a8 <FFT_Compute+0x2c8>
		data_out[i] = cabs(out_fft[i]);
}
 8001498:	373c      	adds	r7, #60	; 0x3c
 800149a:	46bd      	mov	sp, r7
 800149c:	ecbd 8b02 	vpop	{d8}
 80014a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		last_fft[i] = data_in[i] + data_in[i+1];
 80014a4:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 80014a8:	edd1 7a01 	vldr	s15, [r1, #4]
 80014ac:	ed91 7a00 	vldr	s14, [r1]
 80014b0:	eb0b 02c3 	add.w	r2, fp, r3, lsl #3
 80014b4:	ee77 7a87 	vadd.f32	s15, s15, s14
	for (uint16_t i = 0; i < FFT_LENGTH; i += 2)
 80014b8:	3302      	adds	r3, #2
		last_fft[i] = data_in[i] + data_in[i+1];
 80014ba:	edc2 7a00 	vstr	s15, [r2]
 80014be:	6050      	str	r0, [r2, #4]
	for (uint16_t i = 0; i < FFT_LENGTH; i += 2)
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	e7c1      	b.n	8001448 <FFT_Compute+0x68>
		last_fft[i] = data_in[i-1] - data_in[i];
 80014c4:	ed50 7a02 	vldr	s15, [r0, #-8]
 80014c8:	ed10 7a01 	vldr	s14, [r0, #-4]
 80014cc:	f842 1c0c 	str.w	r1, [r2, #-12]
 80014d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
	for (uint16_t i = 1; i < FFT_LENGTH; i += 2)
 80014d4:	3302      	adds	r3, #2
		last_fft[i] = data_in[i-1] - data_in[i];
 80014d6:	ed42 7a04 	vstr	s15, [r2, #-16]
	for (uint16_t i = 1; i < FFT_LENGTH; i += 2)
 80014da:	b29b      	uxth	r3, r3
 80014dc:	e7bb      	b.n	8001456 <FFT_Compute+0x76>
		if (i == 0)
 80014de:	b2ab      	uxth	r3, r5
 80014e0:	b93b      	cbnz	r3, 80014f2 <FFT_Compute+0x112>
			W[i] = 1;
 80014e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014e4:	6833      	ldr	r3, [r6, #0]
 80014e6:	6013      	str	r3, [r2, #0]
 80014e8:	6873      	ldr	r3, [r6, #4]
 80014ea:	6053      	str	r3, [r2, #4]
	for (uint16_t i = 0; i < FFT_LENGTH; i++) {
 80014ec:	3501      	adds	r5, #1
 80014ee:	3408      	adds	r4, #8
 80014f0:	e7bd      	b.n	800146e <FFT_Compute+0x8e>
		else if (i == fft_half)
 80014f2:	69fa      	ldr	r2, [r7, #28]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d104      	bne.n	8001502 <FFT_Compute+0x122>
			W[i] = -1;
 80014f8:	68b3      	ldr	r3, [r6, #8]
 80014fa:	6023      	str	r3, [r4, #0]
 80014fc:	68f3      	ldr	r3, [r6, #12]
 80014fe:	6063      	str	r3, [r4, #4]
 8001500:	e7f4      	b.n	80014ec <FFT_Compute+0x10c>
			W[i] = cos((2 * M_PI * i) / FFT_LENGTH) - I*sin((2 * M_PI * i) / FFT_LENGTH);
 8001502:	4628      	mov	r0, r5
 8001504:	f7fe ffda 	bl	80004bc <__aeabi_i2d>
 8001508:	a377      	add	r3, pc, #476	; (adr r3, 80016e8 <FFT_Compute+0x308>)
 800150a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150e:	f7ff f83f 	bl	8000590 <__aeabi_dmul>
 8001512:	4680      	mov	r8, r0
 8001514:	4650      	mov	r0, sl
 8001516:	4689      	mov	r9, r1
 8001518:	f7fe ffd0 	bl	80004bc <__aeabi_i2d>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4640      	mov	r0, r8
 8001522:	4649      	mov	r1, r9
 8001524:	f7ff f95e 	bl	80007e4 <__aeabi_ddiv>
 8001528:	ec41 0b10 	vmov	d0, r0, r1
 800152c:	ec41 0b18 	vmov	d8, r0, r1
 8001530:	f003 f84a 	bl	80045c8 <sin>
 8001534:	ec59 8b10 	vmov	r8, r9, d0
 8001538:	eeb0 0a48 	vmov.f32	s0, s16
 800153c:	eef0 0a68 	vmov.f32	s1, s17
 8001540:	f002 ffee 	bl	8004520 <cos>
 8001544:	2200      	movs	r2, #0
 8001546:	2300      	movs	r3, #0
 8001548:	4640      	mov	r0, r8
 800154a:	4649      	mov	r1, r9
 800154c:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
 8001550:	f7ff f81e 	bl	8000590 <__aeabi_dmul>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800155c:	f7fe fe60 	bl	8000220 <__aeabi_dsub>
 8001560:	f7ff fb0e 	bl	8000b80 <__aeabi_d2f>
 8001564:	4649      	mov	r1, r9
 8001566:	6020      	str	r0, [r4, #0]
 8001568:	4640      	mov	r0, r8
 800156a:	f7ff fb09 	bl	8000b80 <__aeabi_d2f>
 800156e:	ee07 0a90 	vmov	s15, r0
 8001572:	eef1 7a67 	vneg.f32	s15, s15
 8001576:	edc4 7a01 	vstr	s15, [r4, #4]
 800157a:	e7b7      	b.n	80014ec <FFT_Compute+0x10c>
		index_offset_b = fft_stage_value = (1 << i);
 800157c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800157e:	2301      	movs	r3, #1
 8001580:	fa03 fc02 	lsl.w	ip, r3, r2
 8001584:	fa0f f28c 	sxth.w	r2, ip
	uint16_t num = 0;
 8001588:	2100      	movs	r1, #0
		W_offset = bit_reverse(fft_stage_value);
 800158a:	fa1f fc8c 	uxth.w	ip, ip
	uint16_t mask = FFT_LENGTH_BIT - 1;
 800158e:	693b      	ldr	r3, [r7, #16]
	uint16_t num = 0;
 8001590:	6239      	str	r1, [r7, #32]
	while (x) {
 8001592:	4664      	mov	r4, ip
 8001594:	b9cc      	cbnz	r4, 80015ca <FFT_Compute+0x1ea>
 8001596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				index_offset_a = (index_offset_a == 0 ? -fft_stage_value : 0);
 8001598:	f1cc 0c00 	rsb	ip, ip, #0
 800159c:	fa0f f68c 	sxth.w	r6, ip
	while (x) {
 80015a0:	4619      	mov	r1, r3
		index_offset_b = fft_stage_value = (1 << i);
 80015a2:	4691      	mov	r9, r2
		W_index = 0;
 80015a4:	4625      	mov	r5, r4
	while (x) {
 80015a6:	46a0      	mov	r8, r4
		index_offset_a = 0;
 80015a8:	4620      	mov	r0, r4
				index_offset_a = (index_offset_a == 0 ? -fft_stage_value : 0);
 80015aa:	617e      	str	r6, [r7, #20]
		for (uint16_t j = 0; j < FFT_LENGTH; j++) {
 80015ac:	45c2      	cmp	sl, r8
 80015ae:	d117      	bne.n	80015e0 <FFT_Compute+0x200>
 80015b0:	465a      	mov	r2, fp
 80015b2:	2100      	movs	r1, #0
		for (uint16_t j = 0; j < FFT_LENGTH; j++)
 80015b4:	b288      	uxth	r0, r1
 80015b6:	4550      	cmp	r0, sl
 80015b8:	f103 0308 	add.w	r3, r3, #8
 80015bc:	f102 0208 	add.w	r2, r2, #8
 80015c0:	d368      	bcc.n	8001694 <FFT_Compute+0x2b4>
	for (uint16_t i = 1; i < FFT_LENGTH_BIT; i++) {
 80015c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015c4:	3301      	adds	r3, #1
 80015c6:	633b      	str	r3, [r7, #48]	; 0x30
 80015c8:	e759      	b.n	800147e <FFT_Compute+0x9e>
		num |= ((x % 2) << mask);
 80015ca:	6a38      	ldr	r0, [r7, #32]
 80015cc:	f004 0101 	and.w	r1, r4, #1
 80015d0:	4099      	lsls	r1, r3
 80015d2:	4308      	orrs	r0, r1
 80015d4:	b281      	uxth	r1, r0
		mask--;
 80015d6:	3b01      	subs	r3, #1
		num |= ((x % 2) << mask);
 80015d8:	6239      	str	r1, [r7, #32]
		mask--;
 80015da:	b29b      	uxth	r3, r3
		x /= 2;
 80015dc:	0864      	lsrs	r4, r4, #1
 80015de:	e7d9      	b.n	8001594 <FFT_Compute+0x1b4>
				out_fft[j] = last_fft[j + index_offset_a] + last_fft[j + index_offset_b];
 80015e0:	eb00 0e08 	add.w	lr, r0, r8
 80015e4:	eb09 0c08 	add.w	ip, r9, r8
 80015e8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80015ec:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80015f0:	44de      	add	lr, fp
			if (W_index == 0)
 80015f2:	bb45      	cbnz	r5, 8001646 <FFT_Compute+0x266>
				out_fft[j] = last_fft[j + index_offset_a] + last_fft[j + index_offset_b];
 80015f4:	44dc      	add	ip, fp
 80015f6:	edde 7a00 	vldr	s15, [lr]
 80015fa:	ed9c 0a00 	vldr	s0, [ip]
 80015fe:	edde 0a01 	vldr	s1, [lr, #4]
 8001602:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001606:	eddc 7a01 	vldr	s15, [ip, #4]
 800160a:	ee70 0aa7 	vadd.f32	s1, s1, s15
			counter++;
 800160e:	3401      	adds	r4, #1
 8001610:	b2a4      	uxth	r4, r4
			if (counter == fft_stage_value) {
 8001612:	4294      	cmp	r4, r2
				out_fft[j] = last_fft[j + index_offset_a] + last_fft[j + index_offset_b];
 8001614:	ed81 0a00 	vstr	s0, [r1]
 8001618:	edc1 0a01 	vstr	s1, [r1, #4]
			if (counter == fft_stage_value) {
 800161c:	d109      	bne.n	8001632 <FFT_Compute+0x252>
				index_offset_a = (index_offset_a == 0 ? -fft_stage_value : 0);
 800161e:	2800      	cmp	r0, #0
 8001620:	6978      	ldr	r0, [r7, #20]
 8001622:	bf18      	it	ne
 8001624:	2000      	movne	r0, #0
				index_offset_b = (index_offset_b == fft_stage_value ? 0 : fft_stage_value);
 8001626:	4591      	cmp	r9, r2
				counter = 0;
 8001628:	bf0c      	ite	eq
 800162a:	f04f 0900 	moveq.w	r9, #0
 800162e:	4691      	movne	r9, r2
 8001630:	2400      	movs	r4, #0
			W_index += W_offset;
 8001632:	6a3e      	ldr	r6, [r7, #32]
 8001634:	4435      	add	r5, r6
 8001636:	b2ad      	uxth	r5, r5
				W_index = 0;
 8001638:	45aa      	cmp	sl, r5
 800163a:	bf08      	it	eq
 800163c:	2500      	moveq	r5, #0
		for (uint16_t j = 0; j < FFT_LENGTH; j++) {
 800163e:	f108 0801 	add.w	r8, r8, #1
 8001642:	3108      	adds	r1, #8
 8001644:	e7b2      	b.n	80015ac <FFT_Compute+0x1cc>
			else if (W_index == fft_half)
 8001646:	69fe      	ldr	r6, [r7, #28]
 8001648:	ed9e 8a01 	vldr	s16, [lr, #4]
 800164c:	edde 8a00 	vldr	s17, [lr]
 8001650:	44dc      	add	ip, fp
 8001652:	42b5      	cmp	r5, r6
 8001654:	ed9c 0a00 	vldr	s0, [ip]
 8001658:	eddc 0a01 	vldr	s1, [ip, #4]
 800165c:	d104      	bne.n	8001668 <FFT_Compute+0x288>
				out_fft[j] = last_fft[j + index_offset_a] - last_fft[j + index_offset_b];
 800165e:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8001662:	ee78 0a60 	vsub.f32	s1, s16, s1
 8001666:	e7d2      	b.n	800160e <FFT_Compute+0x22e>
 8001668:	e9c7 0302 	strd	r0, r3, [r7, #8]
				out_fft[j] = last_fft[j + index_offset_a] + (last_fft[j + index_offset_b] * W[W_index]);
 800166c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800166e:	eb03 0cc5 	add.w	ip, r3, r5, lsl #3
 8001672:	eddc 1a01 	vldr	s3, [ip, #4]
 8001676:	ed9c 1a00 	vldr	s2, [ip]
 800167a:	e9c7 1200 	strd	r1, r2, [r7]
 800167e:	f7ff fae7 	bl	8000c50 <__mulsc3>
 8001682:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001686:	e9d7 0302 	ldrd	r0, r3, [r7, #8]
 800168a:	ee30 0a28 	vadd.f32	s0, s0, s17
 800168e:	ee70 0a88 	vadd.f32	s1, s1, s16
 8001692:	e7bc      	b.n	800160e <FFT_Compute+0x22e>
			last_fft[j] = out_fft[j];
 8001694:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8001698:	f853 4c08 	ldr.w	r4, [r3, #-8]
 800169c:	f842 4c08 	str.w	r4, [r2, #-8]
 80016a0:	f842 0c04 	str.w	r0, [r2, #-4]
		for (uint16_t j = 0; j < FFT_LENGTH; j++)
 80016a4:	3101      	adds	r1, #1
 80016a6:	e785      	b.n	80015b4 <FFT_Compute+0x1d4>
		data_out[i] = cabs(out_fft[i]);
 80016a8:	f855 0c08 	ldr.w	r0, [r5, #-8]
 80016ac:	f7fe ff18 	bl	80004e0 <__aeabi_f2d>
 80016b0:	ec41 0b18 	vmov	d8, r0, r1
 80016b4:	f855 0c04 	ldr.w	r0, [r5, #-4]
 80016b8:	f7fe ff12 	bl	80004e0 <__aeabi_f2d>
 80016bc:	eeb0 0a48 	vmov.f32	s0, s16
 80016c0:	eef0 0a68 	vmov.f32	s1, s17
 80016c4:	ec41 0b11 	vmov	d1, r0, r1
 80016c8:	f002 ffde 	bl	8004688 <cabs>
 80016cc:	ec51 0b10 	vmov	r0, r1, d0
 80016d0:	f7ff fa56 	bl	8000b80 <__aeabi_d2f>
 80016d4:	f844 0b04 	str.w	r0, [r4], #4
	for (uint16_t i = 0; i < FFT_LENGTH; i++)
 80016d8:	e6d9      	b.n	800148e <FFT_Compute+0xae>
 80016da:	bf00      	nop
 80016dc:	f3af 8000 	nop.w
 80016e0:	fefa39ef 	.word	0xfefa39ef
 80016e4:	3fe62e42 	.word	0x3fe62e42
 80016e8:	54442d18 	.word	0x54442d18
 80016ec:	401921fb 	.word	0x401921fb
 80016f0:	20000158 	.word	0x20000158
 80016f4:	2000015a 	.word	0x2000015a
 80016f8:	08005ea8 	.word	0x08005ea8

080016fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016fc:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fe:	2214      	movs	r2, #20
{
 8001700:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001702:	eb0d 0002 	add.w	r0, sp, r2
 8001706:	2100      	movs	r1, #0
 8001708:	f002 fe97 	bl	800443a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800170c:	4b21      	ldr	r3, [pc, #132]	; (8001794 <MX_GPIO_Init+0x98>)
 800170e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001710:	f042 0204 	orr.w	r2, r2, #4
 8001714:	64da      	str	r2, [r3, #76]	; 0x4c
 8001716:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001718:	f002 0204 	and.w	r2, r2, #4
 800171c:	9201      	str	r2, [sp, #4]
 800171e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001720:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001722:	f042 0220 	orr.w	r2, r2, #32
 8001726:	64da      	str	r2, [r3, #76]	; 0x4c
 8001728:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800172a:	f002 0220 	and.w	r2, r2, #32
 800172e:	9202      	str	r2, [sp, #8]
 8001730:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001732:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001734:	f042 0201 	orr.w	r2, r2, #1
 8001738:	64da      	str	r2, [r3, #76]	; 0x4c
 800173a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800173c:	f002 0201 	and.w	r2, r2, #1
 8001740:	9203      	str	r2, [sp, #12]
 8001742:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001744:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001746:	f042 0202 	orr.w	r2, r2, #2
 800174a:	64da      	str	r2, [r3, #76]	; 0x4c
 800174c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	9304      	str	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8001754:	2200      	movs	r2, #0
 8001756:	2133      	movs	r1, #51	; 0x33
 8001758:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800175c:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8001760:	f001 faae 	bl	8002cc0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001764:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001768:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800176c:	a905      	add	r1, sp, #20
 800176e:	480a      	ldr	r0, [pc, #40]	; (8001798 <MX_GPIO_Init+0x9c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001772:	e9cd 2305 	strd	r2, r3, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001776:	f001 f9d7 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177a:	2301      	movs	r3, #1
 800177c:	2133      	movs	r1, #51	; 0x33
 800177e:	e9cd 1305 	strd	r1, r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001782:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001786:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001788:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178c:	f001 f9cc 	bl	8002b28 <HAL_GPIO_Init>

}
 8001790:	b00a      	add	sp, #40	; 0x28
 8001792:	bd10      	pop	{r4, pc}
 8001794:	40021000 	.word	0x40021000
 8001798:	48000800 	.word	0x48000800

0800179c <HAL_ADC_ConvHalfCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvHalfCpltCallback (ADC_HandleTypeDef * hadc)
{
	if (hadc == &hadc1)
 800179c:	4b03      	ldr	r3, [pc, #12]	; (80017ac <HAL_ADC_ConvHalfCpltCallback+0x10>)
 800179e:	4283      	cmp	r3, r0
		adc_conversion = CONVERSION_HALF;
 80017a0:	bf02      	ittt	eq
 80017a2:	4b03      	ldreq	r3, [pc, #12]	; (80017b0 <HAL_ADC_ConvHalfCpltCallback+0x14>)
 80017a4:	2201      	moveq	r2, #1
 80017a6:	701a      	strbeq	r2, [r3, #0]
}
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	2000008c 	.word	0x2000008c
 80017b0:	2000015c 	.word	0x2000015c

080017b4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef * hadc)
{
	if (hadc == &hadc1)
 80017b4:	4b03      	ldr	r3, [pc, #12]	; (80017c4 <HAL_ADC_ConvCpltCallback+0x10>)
 80017b6:	4283      	cmp	r3, r0
		adc_conversion = CONVERSION_FIN;
 80017b8:	bf02      	ittt	eq
 80017ba:	4b03      	ldreq	r3, [pc, #12]	; (80017c8 <HAL_ADC_ConvCpltCallback+0x14>)
 80017bc:	2202      	moveq	r2, #2
 80017be:	701a      	strbeq	r2, [r3, #0]
}
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	2000008c 	.word	0x2000008c
 80017c8:	2000015c 	.word	0x2000015c

080017cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017cc:	b500      	push	{lr}
 80017ce:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017d0:	2238      	movs	r2, #56	; 0x38
 80017d2:	2100      	movs	r1, #0
 80017d4:	a806      	add	r0, sp, #24
 80017d6:	f002 fe30 	bl	800443a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017da:	2214      	movs	r2, #20
 80017dc:	2100      	movs	r1, #0
 80017de:	a801      	add	r0, sp, #4
 80017e0:	f002 fe2b 	bl	800443a <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80017e4:	2000      	movs	r0, #0
 80017e6:	f001 fa71 	bl	8002ccc <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017ea:	2240      	movs	r2, #64	; 0x40
 80017ec:	f44f 7180 	mov.w	r1, #256	; 0x100
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
  RCC_OscInitStruct.PLL.PLLN = 21;
 80017f0:	2001      	movs	r0, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017f2:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 21;
 80017f6:	2215      	movs	r2, #21
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017f8:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 21;
 80017fa:	e9cd 020f 	strd	r0, r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017fe:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001800:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001804:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001808:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800180a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800180c:	f001 fac0 	bl	8002d90 <HAL_RCC_OscConfig>
 8001810:	b108      	cbz	r0, 8001816 <SystemClock_Config+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001812:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001814:	e7fe      	b.n	8001814 <SystemClock_Config+0x48>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001816:	2303      	movs	r3, #3
 8001818:	220f      	movs	r2, #15
 800181a:	e9cd 2301 	strd	r2, r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800181e:	2104      	movs	r1, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001820:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001824:	e9cd 3004 	strd	r3, r0, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001828:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800182a:	eb0d 0001 	add.w	r0, sp, r1
 800182e:	f001 fcf5 	bl	800321c <HAL_RCC_ClockConfig>
 8001832:	b108      	cbz	r0, 8001838 <SystemClock_Config+0x6c>
 8001834:	b672      	cpsid	i
  while (1)
 8001836:	e7fe      	b.n	8001836 <SystemClock_Config+0x6a>
}
 8001838:	b015      	add	sp, #84	; 0x54
 800183a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001840 <main>:
{
 8001840:	b530      	push	{r4, r5, lr}
 8001842:	f2ad 4d84 	subw	sp, sp, #1156	; 0x484
  HAL_Init();
 8001846:	f000 fb5d 	bl	8001f04 <HAL_Init>
  SystemClock_Config();
 800184a:	f7ff ffbf 	bl	80017cc <SystemClock_Config>
  MX_GPIO_Init();
 800184e:	f7ff ff55 	bl	80016fc <MX_GPIO_Init>
  MX_DMA_Init();
 8001852:	f7ff fd71 	bl	8001338 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8001856:	f000 fa93 	bl	8001d80 <MX_LPUART1_UART_Init>
  MX_SPI2_Init();
 800185a:	f000 f86d 	bl	8001938 <MX_SPI2_Init>
  MX_TIM2_Init();
 800185e:	f000 fa47 	bl	8001cf0 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001862:	f7ff fcbb 	bl	80011dc <MX_ADC1_Init>
  HAL_TIM_Base_Start(&htim2);
 8001866:	482d      	ldr	r0, [pc, #180]	; (800191c <main+0xdc>)
	  if (adc_conversion == CONVERSION_HALF) {
 8001868:	4c2d      	ldr	r4, [pc, #180]	; (8001920 <main+0xe0>)
			  voltage[i] = (3.3f * adc_values[i]) / 4096.0f;
 800186a:	4d2e      	ldr	r5, [pc, #184]	; (8001924 <main+0xe4>)
  HAL_TIM_Base_Start(&htim2);
 800186c:	f002 f938 	bl	8003ae0 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_values, VOLTAGE_SAMPLES);
 8001870:	492c      	ldr	r1, [pc, #176]	; (8001924 <main+0xe4>)
 8001872:	482d      	ldr	r0, [pc, #180]	; (8001928 <main+0xe8>)
 8001874:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001878:	f000 fed2 	bl	8002620 <HAL_ADC_Start_DMA>
  ST7735_Init();
 800187c:	f000 f95c 	bl	8001b38 <ST7735_Init>
	  if (adc_conversion == CONVERSION_HALF) {
 8001880:	7823      	ldrb	r3, [r4, #0]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d122      	bne.n	80018cc <main+0x8c>
 8001886:	a980      	add	r1, sp, #512	; 0x200
			  voltage[i] = (3.3f * adc_values[i]) / 4096.0f;
 8001888:	eddf 6a28 	vldr	s13, [pc, #160]	; 800192c <main+0xec>
 800188c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001930 <main+0xf0>
		  for (int i = 0; i < ST7735_WIDTH; i++)
 8001890:	2200      	movs	r2, #0
 8001892:	4608      	mov	r0, r1
			  voltage[i] = (3.3f * adc_values[i]) / 4096.0f;
 8001894:	f835 3012 	ldrh.w	r3, [r5, r2, lsl #1]
 8001898:	b29b      	uxth	r3, r3
 800189a:	ee07 3a90 	vmov	s15, r3
 800189e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		  for (int i = 0; i < ST7735_WIDTH; i++)
 80018a2:	3201      	adds	r2, #1
			  voltage[i] = (3.3f * adc_values[i]) / 4096.0f;
 80018a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
		  for (int i = 0; i < ST7735_WIDTH; i++)
 80018a8:	2aa0      	cmp	r2, #160	; 0xa0
			  voltage[i] = (3.3f * adc_values[i]) / 4096.0f;
 80018aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018ae:	ece1 7a01 	vstmia	r1!, {s15}
		  for (int i = 0; i < ST7735_WIDTH; i++)
 80018b2:	d1ef      	bne.n	8001894 <main+0x54>
		  FFT_Compute(voltage, fft_data, FFT_LENGTH);
 80018b4:	2280      	movs	r2, #128	; 0x80
 80018b6:	4669      	mov	r1, sp
 80018b8:	f7ff fd92 	bl	80013e0 <FFT_Compute>
		  ST7735_Draw_FFT(fft_data, FFT_LENGTH, ST7735_YELLOW);
 80018bc:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80018c0:	2180      	movs	r1, #128	; 0x80
 80018c2:	4668      	mov	r0, sp
 80018c4:	f000 f998 	bl	8001bf8 <ST7735_Draw_FFT>
		  adc_conversion = CONVERSION_OFF;
 80018c8:	2300      	movs	r3, #0
 80018ca:	7023      	strb	r3, [r4, #0]
	  if (adc_conversion == CONVERSION_FIN) {
 80018cc:	7823      	ldrb	r3, [r4, #0]
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d1d6      	bne.n	8001880 <main+0x40>
 80018d2:	a980      	add	r1, sp, #512	; 0x200
			  voltage[i] = (3.3f * adc_values[i + ST7735_WIDTH]) / 4096.0f;
 80018d4:	eddf 6a15 	vldr	s13, [pc, #84]	; 800192c <main+0xec>
 80018d8:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001930 <main+0xf0>
	  if (adc_conversion == CONVERSION_FIN) {
 80018dc:	22a0      	movs	r2, #160	; 0xa0
 80018de:	4608      	mov	r0, r1
			  voltage[i] = (3.3f * adc_values[i + ST7735_WIDTH]) / 4096.0f;
 80018e0:	f835 3012 	ldrh.w	r3, [r5, r2, lsl #1]
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	ee07 3a90 	vmov	s15, r3
 80018ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		  for (uint16_t i = 0; i < ST7735_WIDTH; i++)
 80018ee:	3201      	adds	r2, #1
			  voltage[i] = (3.3f * adc_values[i + ST7735_WIDTH]) / 4096.0f;
 80018f0:	ee67 7aa6 	vmul.f32	s15, s15, s13
		  for (uint16_t i = 0; i < ST7735_WIDTH; i++)
 80018f4:	f5b2 7fa0 	cmp.w	r2, #320	; 0x140
			  voltage[i] = (3.3f * adc_values[i + ST7735_WIDTH]) / 4096.0f;
 80018f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018fc:	ece1 7a01 	vstmia	r1!, {s15}
		  for (uint16_t i = 0; i < ST7735_WIDTH; i++)
 8001900:	d1ee      	bne.n	80018e0 <main+0xa0>
		  FFT_Compute(voltage, fft_data, FFT_LENGTH);
 8001902:	2280      	movs	r2, #128	; 0x80
 8001904:	4669      	mov	r1, sp
 8001906:	f7ff fd6b 	bl	80013e0 <FFT_Compute>
		  ST7735_Draw_FFT(fft_data, FFT_LENGTH, ST7735_YELLOW);
 800190a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800190e:	2180      	movs	r1, #128	; 0x80
 8001910:	4668      	mov	r0, sp
 8001912:	f000 f971 	bl	8001bf8 <ST7735_Draw_FFT>
		  adc_conversion = CONVERSION_OFF;
 8001916:	2300      	movs	r3, #0
 8001918:	7023      	strb	r3, [r4, #0]
 800191a:	e7b1      	b.n	8001880 <main+0x40>
 800191c:	20000584 	.word	0x20000584
 8001920:	2000015c 	.word	0x2000015c
 8001924:	2000015e 	.word	0x2000015e
 8001928:	2000008c 	.word	0x2000008c
 800192c:	40533333 	.word	0x40533333
 8001930:	39800000 	.word	0x39800000

08001934 <Error_Handler>:
 8001934:	b672      	cpsid	i
  while (1)
 8001936:	e7fe      	b.n	8001936 <Error_Handler+0x2>

08001938 <MX_SPI2_Init>:
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001938:	4811      	ldr	r0, [pc, #68]	; (8001980 <MX_SPI2_Init+0x48>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800193a:	4a12      	ldr	r2, [pc, #72]	; (8001984 <MX_SPI2_Init+0x4c>)
{
 800193c:	b508      	push	{r3, lr}
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800193e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001942:	e9c0 2300 	strd	r2, r3, [r0]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001946:	2300      	movs	r3, #0
 8001948:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800194c:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001950:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001954:	2218      	movs	r2, #24
 8001956:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 7;
 800195a:	2207      	movs	r2, #7
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800195c:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001960:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001964:	e9c0 230b 	strd	r2, r3, [r0, #44]	; 0x2c
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001968:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800196a:	2308      	movs	r3, #8
 800196c:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800196e:	f001 ff86 	bl	800387e <HAL_SPI_Init>
 8001972:	b118      	cbz	r0, 800197c <MX_SPI2_Init+0x44>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001974:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001978:	f7ff bfdc 	b.w	8001934 <Error_Handler>
}
 800197c:	bd08      	pop	{r3, pc}
 800197e:	bf00      	nop
 8001980:	200003e0 	.word	0x200003e0
 8001984:	40003800 	.word	0x40003800

08001988 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001988:	b510      	push	{r4, lr}
 800198a:	4604      	mov	r4, r0
 800198c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198e:	2214      	movs	r2, #20
 8001990:	2100      	movs	r1, #0
 8001992:	a803      	add	r0, sp, #12
 8001994:	f002 fd51 	bl	800443a <memset>
  if(spiHandle->Instance==SPI2)
 8001998:	6822      	ldr	r2, [r4, #0]
 800199a:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <HAL_SPI_MspInit+0x5c>)
 800199c:	429a      	cmp	r2, r3
 800199e:	d11e      	bne.n	80019de <HAL_SPI_MspInit+0x56>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019a0:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a4:	4810      	ldr	r0, [pc, #64]	; (80019e8 <HAL_SPI_MspInit+0x60>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019a6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019ac:	659a      	str	r2, [r3, #88]	; 0x58
 80019ae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019b0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80019b4:	9201      	str	r2, [sp, #4]
 80019b6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019ba:	f042 0202 	orr.w	r2, r2, #2
 80019be:	64da      	str	r2, [r3, #76]	; 0x4c
 80019c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	9302      	str	r3, [sp, #8]
 80019c8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ca:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 80019ce:	2302      	movs	r3, #2
 80019d0:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019d6:	2305      	movs	r3, #5
 80019d8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019da:	f001 f8a5 	bl	8002b28 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80019de:	b008      	add	sp, #32
 80019e0:	bd10      	pop	{r4, pc}
 80019e2:	bf00      	nop
 80019e4:	40003800 	.word	0x40003800
 80019e8:	48000400 	.word	0x48000400

080019ec <st7735_data8>:
	HAL_SPI_Transmit(&st7735_spi, &cmd, 1, HAL_MAX_DELAY);
	SPI_STOP;
}

static void st7735_data8(uint8_t data)
{
 80019ec:	b507      	push	{r0, r1, r2, lr}
	ST7735_DATA_TYPE;
 80019ee:	2201      	movs	r2, #1
{
 80019f0:	f88d 0007 	strb.w	r0, [sp, #7]
	ST7735_DATA_TYPE;
 80019f4:	4611      	mov	r1, r2
 80019f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019fa:	f001 f961 	bl	8002cc0 <HAL_GPIO_WritePin>
	SPI_START;
 80019fe:	2200      	movs	r2, #0
 8001a00:	2102      	movs	r1, #2
 8001a02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a06:	f001 f95b 	bl	8002cc0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&st7735_spi, &data, 1, HAL_MAX_DELAY);
 8001a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0e:	f10d 0107 	add.w	r1, sp, #7
 8001a12:	2201      	movs	r2, #1
 8001a14:	4805      	ldr	r0, [pc, #20]	; (8001a2c <st7735_data8+0x40>)
 8001a16:	f001 ffa0 	bl	800395a <HAL_SPI_Transmit>
	SPI_STOP;
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	2102      	movs	r1, #2
 8001a1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a22:	f001 f94d 	bl	8002cc0 <HAL_GPIO_WritePin>
}
 8001a26:	b003      	add	sp, #12
 8001a28:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a2c:	200003e0 	.word	0x200003e0

08001a30 <st7735_data16>:

static void st7735_data16(uint16_t data)
{
 8001a30:	b510      	push	{r4, lr}
 8001a32:	4604      	mov	r4, r0
	st7735_data8(data >> 8);
 8001a34:	0a00      	lsrs	r0, r0, #8
 8001a36:	f7ff ffd9 	bl	80019ec <st7735_data8>
	st7735_data8(data);
 8001a3a:	b2e0      	uxtb	r0, r4
}
 8001a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	st7735_data8(data);
 8001a40:	f7ff bfd4 	b.w	80019ec <st7735_data8>

08001a44 <st7735_cmd>:
{
 8001a44:	b507      	push	{r0, r1, r2, lr}
	ST7735_COMMAND_TYPE;
 8001a46:	2200      	movs	r2, #0
{
 8001a48:	f88d 0007 	strb.w	r0, [sp, #7]
	ST7735_COMMAND_TYPE;
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a52:	f001 f935 	bl	8002cc0 <HAL_GPIO_WritePin>
	SPI_START;
 8001a56:	2200      	movs	r2, #0
 8001a58:	2102      	movs	r1, #2
 8001a5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a5e:	f001 f92f 	bl	8002cc0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&st7735_spi, &cmd, 1, HAL_MAX_DELAY);
 8001a62:	f04f 33ff 	mov.w	r3, #4294967295
 8001a66:	f10d 0107 	add.w	r1, sp, #7
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	4805      	ldr	r0, [pc, #20]	; (8001a84 <st7735_cmd+0x40>)
 8001a6e:	f001 ff74 	bl	800395a <HAL_SPI_Transmit>
	SPI_STOP;
 8001a72:	2201      	movs	r2, #1
 8001a74:	2102      	movs	r1, #2
 8001a76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a7a:	f001 f921 	bl	8002cc0 <HAL_GPIO_WritePin>
}
 8001a7e:	b003      	add	sp, #12
 8001a80:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a84:	200003e0 	.word	0x200003e0

08001a88 <ST7735_Draw_Rectangle>:

	st7735_background_frame();
}

void ST7735_Draw_Rectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8001a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a8c:	4606      	mov	r6, r0
	st7735_cmd(ST7735_CASET);
 8001a8e:	202a      	movs	r0, #42	; 0x2a
{
 8001a90:	460d      	mov	r5, r1
 8001a92:	4614      	mov	r4, r2
 8001a94:	461f      	mov	r7, r3
 8001a96:	f8bd 8018 	ldrh.w	r8, [sp, #24]
	st7735_cmd(ST7735_CASET);
 8001a9a:	f7ff ffd3 	bl	8001a44 <st7735_cmd>
	st7735_data16(ST7735_OFFSET_X + x);
 8001a9e:	1c70      	adds	r0, r6, #1
 8001aa0:	b280      	uxth	r0, r0
 8001aa2:	f7ff ffc5 	bl	8001a30 <st7735_data16>
	st7735_data16(ST7735_OFFSET_X + x + width - 1);
 8001aa6:	1930      	adds	r0, r6, r4
 8001aa8:	b280      	uxth	r0, r0
 8001aaa:	f7ff ffc1 	bl	8001a30 <st7735_data16>
	st7735_cmd(ST7735_RASET);
 8001aae:	202b      	movs	r0, #43	; 0x2b
 8001ab0:	f7ff ffc8 	bl	8001a44 <st7735_cmd>
	st7735_data16(ST7735_OFFSET_Y + y);
 8001ab4:	1ca8      	adds	r0, r5, #2
 8001ab6:	b280      	uxth	r0, r0
 8001ab8:	f7ff ffba 	bl	8001a30 <st7735_data16>
	st7735_data16(ST7735_OFFSET_Y + y + height - 1);
 8001abc:	1c7b      	adds	r3, r7, #1
 8001abe:	18e8      	adds	r0, r5, r3
 8001ac0:	b280      	uxth	r0, r0
 8001ac2:	f7ff ffb5 	bl	8001a30 <st7735_data16>
	st7735_set_window(x, y, width, height);

	st7735_cmd(ST7735_RAMWR);
 8001ac6:	202c      	movs	r0, #44	; 0x2c
 8001ac8:	f7ff ffbc 	bl	8001a44 <st7735_cmd>
	for (uint16_t i = 0; i < width*height; i++)
 8001acc:	437c      	muls	r4, r7
 8001ace:	2500      	movs	r5, #0
 8001ad0:	b2ab      	uxth	r3, r5
 8001ad2:	42a3      	cmp	r3, r4
 8001ad4:	f105 0501 	add.w	r5, r5, #1
 8001ad8:	db01      	blt.n	8001ade <ST7735_Draw_Rectangle+0x56>
		st7735_data16(color);
}
 8001ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		st7735_data16(color);
 8001ade:	4640      	mov	r0, r8
 8001ae0:	f7ff ffa6 	bl	8001a30 <st7735_data16>
	for (uint16_t i = 0; i < width*height; i++)
 8001ae4:	e7f4      	b.n	8001ad0 <ST7735_Draw_Rectangle+0x48>

08001ae6 <ST7735_Draw_Pixel>:

void ST7735_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001ae6:	b507      	push	{r0, r1, r2, lr}
	ST7735_Draw_Rectangle(x, y, 1, 1, color);
 8001ae8:	2301      	movs	r3, #1
 8001aea:	9200      	str	r2, [sp, #0]
 8001aec:	461a      	mov	r2, r3
 8001aee:	f7ff ffcb 	bl	8001a88 <ST7735_Draw_Rectangle>
}
 8001af2:	b003      	add	sp, #12
 8001af4:	f85d fb04 	ldr.w	pc, [sp], #4

08001af8 <ST7735_Draw_VerticalLine>:

void ST7735_Draw_VerticalLine(uint16_t x, uint16_t yo, uint16_t height, uint16_t color)
{
 8001af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001afa:	4607      	mov	r7, r0
 8001afc:	460c      	mov	r4, r1
 8001afe:	4615      	mov	r5, r2
 8001b00:	461e      	mov	r6, r3
	for (uint16_t y = yo; y < height; y++)
 8001b02:	42ac      	cmp	r4, r5
 8001b04:	d300      	bcc.n	8001b08 <ST7735_Draw_VerticalLine+0x10>
		ST7735_Draw_Pixel(x, y, color);
}
 8001b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ST7735_Draw_Pixel(x, y, color);
 8001b08:	4621      	mov	r1, r4
 8001b0a:	4632      	mov	r2, r6
 8001b0c:	4638      	mov	r0, r7
	for (uint16_t y = yo; y < height; y++)
 8001b0e:	3401      	adds	r4, #1
		ST7735_Draw_Pixel(x, y, color);
 8001b10:	f7ff ffe9 	bl	8001ae6 <ST7735_Draw_Pixel>
	for (uint16_t y = yo; y < height; y++)
 8001b14:	b2a4      	uxth	r4, r4
 8001b16:	e7f4      	b.n	8001b02 <ST7735_Draw_VerticalLine+0xa>

08001b18 <ST7735_Draw_HorizontalLine>:

void ST7735_Draw_HorizontalLine(uint16_t xo, uint16_t y, uint16_t width, uint16_t color)
{
 8001b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b1a:	4604      	mov	r4, r0
 8001b1c:	460f      	mov	r7, r1
 8001b1e:	4615      	mov	r5, r2
 8001b20:	461e      	mov	r6, r3
	for (uint16_t x = xo; x < width; x++)
 8001b22:	42ac      	cmp	r4, r5
 8001b24:	d300      	bcc.n	8001b28 <ST7735_Draw_HorizontalLine+0x10>
		ST7735_Draw_Pixel(x, y, color);
}
 8001b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ST7735_Draw_Pixel(x, y, color);
 8001b28:	4620      	mov	r0, r4
 8001b2a:	4632      	mov	r2, r6
 8001b2c:	4639      	mov	r1, r7
	for (uint16_t x = xo; x < width; x++)
 8001b2e:	3401      	adds	r4, #1
		ST7735_Draw_Pixel(x, y, color);
 8001b30:	f7ff ffd9 	bl	8001ae6 <ST7735_Draw_Pixel>
	for (uint16_t x = xo; x < width; x++)
 8001b34:	b2a4      	uxth	r4, r4
 8001b36:	e7f4      	b.n	8001b22 <ST7735_Draw_HorizontalLine+0xa>

08001b38 <ST7735_Init>:
{
 8001b38:	b537      	push	{r0, r1, r2, r4, r5, lr}
	HAL_GPIO_WritePin(ST7735_RST_PORT, ST7735_RST_PIN, GPIO_PIN_RESET);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2110      	movs	r1, #16
 8001b3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b42:	f001 f8bd 	bl	8002cc0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001b46:	2064      	movs	r0, #100	; 0x64
 8001b48:	f000 f9fe 	bl	8001f48 <HAL_Delay>
	HAL_GPIO_WritePin(ST7735_RST_PORT, ST7735_RST_PIN, GPIO_PIN_SET);
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	2110      	movs	r1, #16
 8001b50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b54:	f001 f8b4 	bl	8002cc0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001b58:	2064      	movs	r0, #100	; 0x64
 8001b5a:	f000 f9f5 	bl	8001f48 <HAL_Delay>
	for (uint16_t i = 0; i < sizeof(init_table)/sizeof(init_table[0]); i++)
 8001b5e:	4d25      	ldr	r5, [pc, #148]	; (8001bf4 <ST7735_Init+0xbc>)
	HAL_Delay(100);
 8001b60:	244c      	movs	r4, #76	; 0x4c
		st7735_send(init_table[i]);
 8001b62:	f835 3b02 	ldrh.w	r3, [r5], #2
		st7735_cmd(value);
 8001b66:	b2d8      	uxtb	r0, r3
	if (value & 0x100)
 8001b68:	05db      	lsls	r3, r3, #23
 8001b6a:	d540      	bpl.n	8001bee <ST7735_Init+0xb6>
		st7735_cmd(value);
 8001b6c:	f7ff ff6a 	bl	8001a44 <st7735_cmd>
	for (uint16_t i = 0; i < sizeof(init_table)/sizeof(init_table[0]); i++)
 8001b70:	3c01      	subs	r4, #1
 8001b72:	b2a4      	uxth	r4, r4
 8001b74:	2c00      	cmp	r4, #0
 8001b76:	d1f4      	bne.n	8001b62 <ST7735_Init+0x2a>
	HAL_Delay(200);
 8001b78:	20c8      	movs	r0, #200	; 0xc8
 8001b7a:	f000 f9e5 	bl	8001f48 <HAL_Delay>
	st7735_cmd(ST7735_SLPOUT);
 8001b7e:	2011      	movs	r0, #17
 8001b80:	f7ff ff60 	bl	8001a44 <st7735_cmd>
	HAL_Delay(120);
 8001b84:	2078      	movs	r0, #120	; 0x78
 8001b86:	f000 f9df 	bl	8001f48 <HAL_Delay>
	st7735_cmd(ST7735_DISPON);
 8001b8a:	2029      	movs	r0, #41	; 0x29
 8001b8c:	f7ff ff5a 	bl	8001a44 <st7735_cmd>
	ST7735_Draw_Rectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, ST7735_BLACK);
 8001b90:	9400      	str	r4, [sp, #0]
 8001b92:	2380      	movs	r3, #128	; 0x80
 8001b94:	22a0      	movs	r2, #160	; 0xa0
 8001b96:	4621      	mov	r1, r4
 8001b98:	4620      	mov	r0, r4
 8001b9a:	f7ff ff75 	bl	8001a88 <ST7735_Draw_Rectangle>
	for (uint16_t x = 0; x < ST7735_WIDTH; x += VOLTAGE_EDGE_DISTANCE)
 8001b9e:	4625      	mov	r5, r4
		ST7735_Draw_VerticalLine(x, 0, ST7735_HEIGHT, ST7735_GRAY);
 8001ba0:	4628      	mov	r0, r5
	for (uint16_t x = 0; x < ST7735_WIDTH; x += VOLTAGE_EDGE_DISTANCE)
 8001ba2:	3510      	adds	r5, #16
		ST7735_Draw_VerticalLine(x, 0, ST7735_HEIGHT, ST7735_GRAY);
 8001ba4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8001ba8:	2280      	movs	r2, #128	; 0x80
 8001baa:	2100      	movs	r1, #0
	for (uint16_t x = 0; x < ST7735_WIDTH; x += VOLTAGE_EDGE_DISTANCE)
 8001bac:	b2ad      	uxth	r5, r5
		ST7735_Draw_VerticalLine(x, 0, ST7735_HEIGHT, ST7735_GRAY);
 8001bae:	f7ff ffa3 	bl	8001af8 <ST7735_Draw_VerticalLine>
	for (uint16_t x = 0; x < ST7735_WIDTH; x += VOLTAGE_EDGE_DISTANCE)
 8001bb2:	2da0      	cmp	r5, #160	; 0xa0
 8001bb4:	d1f4      	bne.n	8001ba0 <ST7735_Init+0x68>
	ST7735_Draw_VerticalLine(ST7735_WIDTH-1, 0, ST7735_HEIGHT, ST7735_GRAY);
 8001bb6:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8001bba:	2280      	movs	r2, #128	; 0x80
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	209f      	movs	r0, #159	; 0x9f
 8001bc0:	f7ff ff9a 	bl	8001af8 <ST7735_Draw_VerticalLine>
		ST7735_Draw_HorizontalLine(0, y, ST7735_WIDTH, ST7735_GRAY);
 8001bc4:	4621      	mov	r1, r4
	for (uint16_t y = 0; y < ST7735_HEIGHT; y += VOLTAGE_EDGE_DISTANCE)
 8001bc6:	3410      	adds	r4, #16
		ST7735_Draw_HorizontalLine(0, y, ST7735_WIDTH, ST7735_GRAY);
 8001bc8:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8001bcc:	22a0      	movs	r2, #160	; 0xa0
 8001bce:	2000      	movs	r0, #0
	for (uint16_t y = 0; y < ST7735_HEIGHT; y += VOLTAGE_EDGE_DISTANCE)
 8001bd0:	b2a4      	uxth	r4, r4
		ST7735_Draw_HorizontalLine(0, y, ST7735_WIDTH, ST7735_GRAY);
 8001bd2:	f7ff ffa1 	bl	8001b18 <ST7735_Draw_HorizontalLine>
	for (uint16_t y = 0; y < ST7735_HEIGHT; y += VOLTAGE_EDGE_DISTANCE)
 8001bd6:	2c80      	cmp	r4, #128	; 0x80
 8001bd8:	d1f4      	bne.n	8001bc4 <ST7735_Init+0x8c>
	ST7735_Draw_HorizontalLine(0, ST7735_HEIGHT-1, ST7735_WIDTH, ST7735_GRAY);
 8001bda:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8001bde:	22a0      	movs	r2, #160	; 0xa0
 8001be0:	217f      	movs	r1, #127	; 0x7f
 8001be2:	2000      	movs	r0, #0
}
 8001be4:	b003      	add	sp, #12
 8001be6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	ST7735_Draw_HorizontalLine(0, ST7735_HEIGHT-1, ST7735_WIDTH, ST7735_GRAY);
 8001bea:	f7ff bf95 	b.w	8001b18 <ST7735_Draw_HorizontalLine>
		st7735_data8(value);
 8001bee:	f7ff fefd 	bl	80019ec <st7735_data8>
 8001bf2:	e7bd      	b.n	8001b70 <ST7735_Init+0x38>
 8001bf4:	08005eb8 	.word	0x08005eb8

08001bf8 <ST7735_Draw_FFT>:

void ST7735_Draw_FFT(float *fft_values, size_t fft_buffer_size, uint16_t color)
{
 8001bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001bfc:	29a0      	cmp	r1, #160	; 0xa0
 8001bfe:	4d1e      	ldr	r5, [pc, #120]	; (8001c78 <ST7735_Draw_FFT+0x80>)
 8001c00:	ed2d 8b02 	vpush	{d8}
 8001c04:	bf28      	it	cs
 8001c06:	21a0      	movcs	r1, #160	; 0xa0
 8001c08:	4607      	mov	r7, r0
 8001c0a:	4690      	mov	r8, r2
 8001c0c:	460e      	mov	r6, r1
 8001c0e:	2405      	movs	r4, #5
 8001c10:	46a9      	mov	r9, r5
	float resolution_y = 5.0f;

	uint16_t y;

	for (uint16_t x = 5; x < ST7735_WIDTH; x++) {
		if (((x % VOLTAGE_EDGE_DISTANCE) == 0) || ((last_y[x-5] % VOLTAGE_EDGE_DISTANCE) == 0))
 8001c12:	0722      	lsls	r2, r4, #28
 8001c14:	f835 1b02 	ldrh.w	r1, [r5], #2
 8001c18:	b2a0      	uxth	r0, r4
 8001c1a:	d001      	beq.n	8001c20 <ST7735_Draw_FFT+0x28>
 8001c1c:	070b      	lsls	r3, r1, #28
 8001c1e:	d111      	bne.n	8001c44 <ST7735_Draw_FFT+0x4c>
			ST7735_Draw_Pixel(x, last_y[x-5], ST7735_GRAY);
 8001c20:	f647 32ef 	movw	r2, #31727	; 0x7bef
	for (uint16_t x = 5; x < ST7735_WIDTH; x++) {
 8001c24:	3401      	adds	r4, #1
		else
			ST7735_Draw_Pixel(x, last_y[x-5], ST7735_BLACK);
 8001c26:	f7ff ff5e 	bl	8001ae6 <ST7735_Draw_Pixel>
	for (uint16_t x = 5; x < ST7735_WIDTH; x++) {
 8001c2a:	2ca0      	cmp	r4, #160	; 0xa0
 8001c2c:	d1f1      	bne.n	8001c12 <ST7735_Draw_FFT+0x1a>
	}

	for (uint16_t x = 5; x < fft_buffer_size; x++) {
		y = 112 - (fft_values[x-5] * resolution_y);
 8001c2e:	eddf 8a13 	vldr	s17, [pc, #76]	; 8001c7c <ST7735_Draw_FFT+0x84>
	for (uint16_t x = 5; x < fft_buffer_size; x++) {
 8001c32:	2405      	movs	r4, #5
		y = 112 - (fft_values[x-5] * resolution_y);
 8001c34:	eeb1 8a04 	vmov.f32	s16, #20	; 0x40a00000  5.0
	for (uint16_t x = 5; x < fft_buffer_size; x++) {
 8001c38:	42a6      	cmp	r6, r4
 8001c3a:	d805      	bhi.n	8001c48 <ST7735_Draw_FFT+0x50>
		for (y = 0; y < height; y++)
			ST7735_Draw_Pixel(x+5, 112-y, color);
		last_height[x] = height;
		*/
	}
}
 8001c3c:	ecbd 8b02 	vpop	{d8}
 8001c40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ST7735_Draw_Pixel(x, last_y[x-5], ST7735_BLACK);
 8001c44:	2200      	movs	r2, #0
 8001c46:	e7ed      	b.n	8001c24 <ST7735_Draw_FFT+0x2c>
		y = 112 - (fft_values[x-5] * resolution_y);
 8001c48:	eb07 0384 	add.w	r3, r7, r4, lsl #2
 8001c4c:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 8001c50:	eef0 7a68 	vmov.f32	s15, s17
 8001c54:	eee7 7a48 	vfms.f32	s15, s14, s16
		ST7735_Draw_Pixel(x, y, color);
 8001c58:	4620      	mov	r0, r4
 8001c5a:	4642      	mov	r2, r8
		y = 112 - (fft_values[x-5] * resolution_y);
 8001c5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c60:	ee17 3a90 	vmov	r3, s15
 8001c64:	b29d      	uxth	r5, r3
		ST7735_Draw_Pixel(x, y, color);
 8001c66:	4629      	mov	r1, r5
 8001c68:	f7ff ff3d 	bl	8001ae6 <ST7735_Draw_Pixel>
		last_y[x-5] = y;
 8001c6c:	1f63      	subs	r3, r4, #5
	for (uint16_t x = 5; x < fft_buffer_size; x++) {
 8001c6e:	3401      	adds	r4, #1
		last_y[x-5] = y;
 8001c70:	f829 5013 	strh.w	r5, [r9, r3, lsl #1]
	for (uint16_t x = 5; x < fft_buffer_size; x++) {
 8001c74:	b2a4      	uxth	r4, r4
 8001c76:	e7df      	b.n	8001c38 <ST7735_Draw_FFT+0x40>
 8001c78:	20000444 	.word	0x20000444
 8001c7c:	42e00000 	.word	0x42e00000

08001c80 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c80:	4b0d      	ldr	r3, [pc, #52]	; (8001cb8 <HAL_MspInit+0x38>)
{
 8001c82:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c84:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c86:	f042 0201 	orr.w	r2, r2, #1
 8001c8a:	661a      	str	r2, [r3, #96]	; 0x60
 8001c8c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c8e:	f002 0201 	and.w	r2, r2, #1
 8001c92:	9200      	str	r2, [sp, #0]
 8001c94:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c96:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c98:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c9c:	659a      	str	r2, [r3, #88]	; 0x58
 8001c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca4:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8001ca6:	2006      	movs	r0, #6
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ca8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8001caa:	f000 fd9b 	bl	80027e4 <HAL_NVIC_SetPriorityGrouping>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cae:	b003      	add	sp, #12
 8001cb0:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_PWREx_DisableUCPDDeadBattery();
 8001cb4:	f001 b864 	b.w	8002d80 <HAL_PWREx_DisableUCPDDeadBattery>
 8001cb8:	40021000 	.word	0x40021000

08001cbc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cbc:	e7fe      	b.n	8001cbc <NMI_Handler>

08001cbe <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cbe:	e7fe      	b.n	8001cbe <HardFault_Handler>

08001cc0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc0:	e7fe      	b.n	8001cc0 <MemManage_Handler>

08001cc2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cc2:	e7fe      	b.n	8001cc2 <BusFault_Handler>

08001cc4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cc4:	e7fe      	b.n	8001cc4 <UsageFault_Handler>

08001cc6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cc6:	4770      	bx	lr

08001cc8 <DebugMon_Handler>:
 8001cc8:	4770      	bx	lr

08001cca <PendSV_Handler>:
 8001cca:	4770      	bx	lr

08001ccc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ccc:	f000 b92a 	b.w	8001f24 <HAL_IncTick>

08001cd0 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001cd0:	4801      	ldr	r0, [pc, #4]	; (8001cd8 <DMA1_Channel1_IRQHandler+0x8>)
 8001cd2:	f000 bede 	b.w	8002a92 <HAL_DMA_IRQHandler>
 8001cd6:	bf00      	nop
 8001cd8:	200000f8 	.word	0x200000f8

08001cdc <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001cdc:	4a03      	ldr	r2, [pc, #12]	; (8001cec <SystemInit+0x10>)
 8001cde:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001ce2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ce6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cea:	4770      	bx	lr
 8001cec:	e000ed00 	.word	0xe000ed00

08001cf0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001cf0:	b500      	push	{lr}

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cf2:	2210      	movs	r2, #16
{
 8001cf4:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	eb0d 0002 	add.w	r0, sp, r2
 8001cfc:	f002 fb9d 	bl	800443a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d00:	4815      	ldr	r0, [pc, #84]	; (8001d58 <MX_TIM2_Init+0x68>)
  htim2.Init.Prescaler = 84-1;
 8001d02:	2253      	movs	r2, #83	; 0x53
 8001d04:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d08:	2300      	movs	r3, #0
  htim2.Init.Prescaler = 84-1;
 8001d0a:	e9c0 1200 	strd	r1, r2, [r0]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 9;
 8001d0e:	2209      	movs	r2, #9
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d10:	e9cd 3301 	strd	r3, r3, [sp, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d14:	e9c0 2303 	strd	r2, r3, [r0, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d18:	9303      	str	r3, [sp, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d1a:	6083      	str	r3, [r0, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d1c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d1e:	f001 ff6f 	bl	8003c00 <HAL_TIM_Base_Init>
 8001d22:	b108      	cbz	r0, 8001d28 <MX_TIM2_Init+0x38>
  {
    Error_Handler();
 8001d24:	f7ff fe06 	bl	8001934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d2c:	480a      	ldr	r0, [pc, #40]	; (8001d58 <MX_TIM2_Init+0x68>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d2e:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d30:	a904      	add	r1, sp, #16
 8001d32:	f001 ff9f 	bl	8003c74 <HAL_TIM_ConfigClockSource>
 8001d36:	b108      	cbz	r0, 8001d3c <MX_TIM2_Init+0x4c>
  {
    Error_Handler();
 8001d38:	f7ff fdfc 	bl	8001934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001d3c:	2320      	movs	r3, #32
 8001d3e:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d40:	4805      	ldr	r0, [pc, #20]	; (8001d58 <MX_TIM2_Init+0x68>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d42:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d44:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d46:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d48:	f002 f850 	bl	8003dec <HAL_TIMEx_MasterConfigSynchronization>
 8001d4c:	b108      	cbz	r0, 8001d52 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001d4e:	f7ff fdf1 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d52:	b009      	add	sp, #36	; 0x24
 8001d54:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d58:	20000584 	.word	0x20000584

08001d5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 8001d5c:	6803      	ldr	r3, [r0, #0]
 8001d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8001d62:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM2)
 8001d64:	d10a      	bne.n	8001d7c <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d66:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001d6a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d6c:	f042 0201 	orr.w	r2, r2, #1
 8001d70:	659a      	str	r2, [r3, #88]	; 0x58
 8001d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	9301      	str	r3, [sp, #4]
 8001d7a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001d7c:	b002      	add	sp, #8
 8001d7e:	4770      	bx	lr

08001d80 <MX_LPUART1_UART_Init>:
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001d80:	4816      	ldr	r0, [pc, #88]	; (8001ddc <MX_LPUART1_UART_Init+0x5c>)
  hlpuart1.Init.BaudRate = 115200;
 8001d82:	4a17      	ldr	r2, [pc, #92]	; (8001de0 <MX_LPUART1_UART_Init+0x60>)
{
 8001d84:	b508      	push	{r3, lr}
  hlpuart1.Init.BaudRate = 115200;
 8001d86:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001d8a:	e9c0 2300 	strd	r2, r3, [r0]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d8e:	2300      	movs	r3, #0
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
  hlpuart1.Init.Parity = UART_PARITY_NONE;
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001d90:	220c      	movs	r2, #12
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001d92:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d96:	e9c0 2305 	strd	r2, r3, [r0, #20]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d9a:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001d9e:	6103      	str	r3, [r0, #16]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001da0:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001da2:	f002 fa9c 	bl	80042de <HAL_UART_Init>
 8001da6:	b108      	cbz	r0, 8001dac <MX_LPUART1_UART_Init+0x2c>
  {
    Error_Handler();
 8001da8:	f7ff fdc4 	bl	8001934 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dac:	480b      	ldr	r0, [pc, #44]	; (8001ddc <MX_LPUART1_UART_Init+0x5c>)
 8001dae:	2100      	movs	r1, #0
 8001db0:	f002 fb03 	bl	80043ba <HAL_UARTEx_SetTxFifoThreshold>
 8001db4:	b108      	cbz	r0, 8001dba <MX_LPUART1_UART_Init+0x3a>
  {
    Error_Handler();
 8001db6:	f7ff fdbd 	bl	8001934 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dba:	4808      	ldr	r0, [pc, #32]	; (8001ddc <MX_LPUART1_UART_Init+0x5c>)
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	f002 fb1c 	bl	80043fa <HAL_UARTEx_SetRxFifoThreshold>
 8001dc2:	b108      	cbz	r0, 8001dc8 <MX_LPUART1_UART_Init+0x48>
  {
    Error_Handler();
 8001dc4:	f7ff fdb6 	bl	8001934 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001dc8:	4804      	ldr	r0, [pc, #16]	; (8001ddc <MX_LPUART1_UART_Init+0x5c>)
 8001dca:	f002 fadb 	bl	8004384 <HAL_UARTEx_DisableFifoMode>
 8001dce:	b118      	cbz	r0, 8001dd8 <MX_LPUART1_UART_Init+0x58>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001dd0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001dd4:	f7ff bdae 	b.w	8001934 <Error_Handler>
}
 8001dd8:	bd08      	pop	{r3, pc}
 8001dda:	bf00      	nop
 8001ddc:	200005d0 	.word	0x200005d0
 8001de0:	40008000 	.word	0x40008000

08001de4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001de4:	b510      	push	{r4, lr}
 8001de6:	b098      	sub	sp, #96	; 0x60
 8001de8:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dea:	2214      	movs	r2, #20
 8001dec:	2100      	movs	r1, #0
 8001dee:	a802      	add	r0, sp, #8
 8001df0:	f002 fb23 	bl	800443a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001df4:	2244      	movs	r2, #68	; 0x44
 8001df6:	2100      	movs	r1, #0
 8001df8:	a807      	add	r0, sp, #28
 8001dfa:	f002 fb1e 	bl	800443a <memset>
  if(uartHandle->Instance==LPUART1)
 8001dfe:	6822      	ldr	r2, [r4, #0]
 8001e00:	4b16      	ldr	r3, [pc, #88]	; (8001e5c <HAL_UART_MspInit+0x78>)
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d127      	bne.n	8001e56 <HAL_UART_MspInit+0x72>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001e06:	2320      	movs	r3, #32
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e08:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001e0a:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e0c:	f001 fb1e 	bl	800344c <HAL_RCCEx_PeriphCLKConfig>
 8001e10:	b108      	cbz	r0, 8001e16 <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 8001e12:	f7ff fd8f 	bl	8001934 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001e16:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <HAL_UART_MspInit+0x7c>)
 8001e18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e1a:	f042 0201 	orr.w	r2, r2, #1
 8001e1e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e20:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e22:	f002 0201 	and.w	r2, r2, #1
 8001e26:	9200      	str	r2, [sp, #0]
 8001e28:	9a00      	ldr	r2, [sp, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e2c:	f042 0201 	orr.w	r2, r2, #1
 8001e30:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	9301      	str	r3, [sp, #4]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3a:	2202      	movs	r2, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3e:	230c      	movs	r3, #12
 8001e40:	e9cd 3202 	strd	r3, r2, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e44:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	2200      	movs	r2, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4c:	e9cd 2204 	strd	r2, r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001e50:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e52:	f000 fe69 	bl	8002b28 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001e56:	b018      	add	sp, #96	; 0x60
 8001e58:	bd10      	pop	{r4, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40008000 	.word	0x40008000
 8001e60:	40021000 	.word	0x40021000

08001e64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e64:	480d      	ldr	r0, [pc, #52]	; (8001e9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e66:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e68:	480d      	ldr	r0, [pc, #52]	; (8001ea0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e6a:	490e      	ldr	r1, [pc, #56]	; (8001ea4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e6c:	4a0e      	ldr	r2, [pc, #56]	; (8001ea8 <LoopForever+0xe>)
  movs r3, #0
 8001e6e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001e70:	e002      	b.n	8001e78 <LoopCopyDataInit>

08001e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e76:	3304      	adds	r3, #4

08001e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e7c:	d3f9      	bcc.n	8001e72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e7e:	4a0b      	ldr	r2, [pc, #44]	; (8001eac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e80:	4c0b      	ldr	r4, [pc, #44]	; (8001eb0 <LoopForever+0x16>)
  movs r3, #0
 8001e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e84:	e001      	b.n	8001e8a <LoopFillZerobss>

08001e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e88:	3204      	adds	r2, #4

08001e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e8c:	d3fb      	bcc.n	8001e86 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e8e:	f7ff ff25 	bl	8001cdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e92:	f002 fae1 	bl	8004458 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e96:	f7ff fcd3 	bl	8001840 <main>

08001e9a <LoopForever>:

LoopForever:
    b LoopForever
 8001e9a:	e7fe      	b.n	8001e9a <LoopForever>
  ldr   r0, =_estack
 8001e9c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ea4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001ea8:	08006190 	.word	0x08006190
  ldr r2, =_sbss
 8001eac:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001eb0:	2000079c 	.word	0x2000079c

08001eb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001eb4:	e7fe      	b.n	8001eb4 <ADC1_2_IRQHandler>
	...

08001eb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eb8:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8001eba:	4b0f      	ldr	r3, [pc, #60]	; (8001ef8 <HAL_InitTick+0x40>)
 8001ebc:	681a      	ldr	r2, [r3, #0]
{
 8001ebe:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 8001ec0:	b90a      	cbnz	r2, 8001ec6 <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ec2:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001ec4:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eca:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ece:	4a0b      	ldr	r2, [pc, #44]	; (8001efc <HAL_InitTick+0x44>)
 8001ed0:	6810      	ldr	r0, [r2, #0]
 8001ed2:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ed6:	f000 fcd7 	bl	8002888 <HAL_SYSTICK_Config>
 8001eda:	4604      	mov	r4, r0
 8001edc:	2800      	cmp	r0, #0
 8001ede:	d1f0      	bne.n	8001ec2 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ee0:	2d0f      	cmp	r5, #15
 8001ee2:	d8ee      	bhi.n	8001ec2 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	4629      	mov	r1, r5
 8001ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8001eec:	f000 fc8c 	bl	8002808 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ef0:	4b03      	ldr	r3, [pc, #12]	; (8001f00 <HAL_InitTick+0x48>)
 8001ef2:	4620      	mov	r0, r4
 8001ef4:	601d      	str	r5, [r3, #0]
  return status;
 8001ef6:	e7e5      	b.n	8001ec4 <HAL_InitTick+0xc>
 8001ef8:	20000004 	.word	0x20000004
 8001efc:	20000000 	.word	0x20000000
 8001f00:	20000008 	.word	0x20000008

08001f04 <HAL_Init>:
{
 8001f04:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f06:	2003      	movs	r0, #3
 8001f08:	f000 fc6c 	bl	80027e4 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	f7ff ffd3 	bl	8001eb8 <HAL_InitTick>
 8001f12:	4604      	mov	r4, r0
 8001f14:	b918      	cbnz	r0, 8001f1e <HAL_Init+0x1a>
    HAL_MspInit();
 8001f16:	f7ff feb3 	bl	8001c80 <HAL_MspInit>
}
 8001f1a:	4620      	mov	r0, r4
 8001f1c:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001f1e:	2401      	movs	r4, #1
 8001f20:	e7fb      	b.n	8001f1a <HAL_Init+0x16>
	...

08001f24 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001f24:	4a03      	ldr	r2, [pc, #12]	; (8001f34 <HAL_IncTick+0x10>)
 8001f26:	4904      	ldr	r1, [pc, #16]	; (8001f38 <HAL_IncTick+0x14>)
 8001f28:	6813      	ldr	r3, [r2, #0]
 8001f2a:	6809      	ldr	r1, [r1, #0]
 8001f2c:	440b      	add	r3, r1
 8001f2e:	6013      	str	r3, [r2, #0]
}
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	20000660 	.word	0x20000660
 8001f38:	20000004 	.word	0x20000004

08001f3c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001f3c:	4b01      	ldr	r3, [pc, #4]	; (8001f44 <HAL_GetTick+0x8>)
 8001f3e:	6818      	ldr	r0, [r3, #0]
}
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	20000660 	.word	0x20000660

08001f48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f48:	b538      	push	{r3, r4, r5, lr}
 8001f4a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001f4c:	f7ff fff6 	bl	8001f3c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f50:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001f52:	bf1c      	itt	ne
 8001f54:	4b05      	ldrne	r3, [pc, #20]	; (8001f6c <HAL_Delay+0x24>)
 8001f56:	681b      	ldrne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001f58:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8001f5a:	bf18      	it	ne
 8001f5c:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f5e:	f7ff ffed 	bl	8001f3c <HAL_GetTick>
 8001f62:	1b43      	subs	r3, r0, r5
 8001f64:	42a3      	cmp	r3, r4
 8001f66:	d3fa      	bcc.n	8001f5e <HAL_Delay+0x16>
  {
  }
}
 8001f68:	bd38      	pop	{r3, r4, r5, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20000004 	.word	0x20000004

08001f70 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f70:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f72:	0dcc      	lsrs	r4, r1, #23
 8001f74:	f004 0404 	and.w	r4, r4, #4
 8001f78:	3014      	adds	r0, #20

  MODIFY_REG(*preg,
 8001f7a:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8001f7e:	5903      	ldr	r3, [r0, r4]
 8001f80:	2507      	movs	r5, #7
 8001f82:	408d      	lsls	r5, r1
 8001f84:	ea23 0305 	bic.w	r3, r3, r5
 8001f88:	408a      	lsls	r2, r1
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	5103      	str	r3, [r0, r4]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f8e:	bd30      	pop	{r4, r5, pc}

08001f90 <LL_ADC_IsEnabled>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f90:	6880      	ldr	r0, [r0, #8]
}
 8001f92:	f000 0001 	and.w	r0, r0, #1
 8001f96:	4770      	bx	lr

08001f98 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f98:	6880      	ldr	r0, [r0, #8]
}
 8001f9a:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001fa6:	4604      	mov	r4, r0
 8001fa8:	2800      	cmp	r0, #0
 8001faa:	f000 80e2 	beq.w	8002172 <HAL_ADC_Init+0x1d2>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fae:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8001fb0:	b925      	cbnz	r5, 8001fbc <HAL_ADC_Init+0x1c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fb2:	f7ff f961 	bl	8001278 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fb6:	6625      	str	r5, [r4, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001fb8:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001fbc:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	0090      	lsls	r0, r2, #2
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001fc2:	bf41      	itttt	mi
 8001fc4:	689a      	ldrmi	r2, [r3, #8]
 8001fc6:	f022 4220 	bicmi.w	r2, r2, #2684354560	; 0xa0000000
 8001fca:	f022 023f 	bicmi.w	r2, r2, #63	; 0x3f
 8001fce:	609a      	strmi	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	00d1      	lsls	r1, r2, #3
 8001fd4:	f140 80a5 	bpl.w	8002122 <HAL_ADC_Init+0x182>
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	00d2      	lsls	r2, r2, #3
 8001fdc:	f100 80b8 	bmi.w	8002150 <HAL_ADC_Init+0x1b0>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fe0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001fe2:	f042 0210 	orr.w	r2, r2, #16
 8001fe6:	65e2      	str	r2, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fe8:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001fea:	f042 0201 	orr.w	r2, r2, #1
 8001fee:	6622      	str	r2, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001ff0:	2101      	movs	r1, #1

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff ffd0 	bl	8001f98 <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ff8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001ffa:	f002 0210 	and.w	r2, r2, #16
 8001ffe:	4310      	orrs	r0, r2
 8002000:	f040 80b3 	bne.w	800216a <HAL_ADC_Init+0x1ca>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002004:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002006:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 800200a:	f042 0202 	orr.w	r2, r2, #2
 800200e:	65e2      	str	r2, [r4, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff ffbd 	bl	8001f90 <LL_ADC_IsEnabled>
 8002016:	b980      	cbnz	r0, 800203a <HAL_ADC_Init+0x9a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002018:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800201c:	f7ff ffb8 	bl	8001f90 <LL_ADC_IsEnabled>
 8002020:	4602      	mov	r2, r0
 8002022:	4855      	ldr	r0, [pc, #340]	; (8002178 <HAL_ADC_Init+0x1d8>)
 8002024:	f7ff ffb4 	bl	8001f90 <LL_ADC_IsEnabled>
 8002028:	4310      	orrs	r0, r2
 800202a:	d106      	bne.n	800203a <HAL_ADC_Init+0x9a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800202c:	4853      	ldr	r0, [pc, #332]	; (800217c <HAL_ADC_Init+0x1dc>)
 800202e:	6865      	ldr	r5, [r4, #4]
 8002030:	6882      	ldr	r2, [r0, #8]
 8002032:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8002036:	432a      	orrs	r2, r5
 8002038:	6082      	str	r2, [r0, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 800203a:	68e5      	ldr	r5, [r4, #12]
 800203c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800203e:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 8002042:	432a      	orrs	r2, r5
 8002044:	68a5      	ldr	r5, [r4, #8]
 8002046:	432a      	orrs	r2, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002048:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800204a:	2801      	cmp	r0, #1
                hadc->Init.DataAlign                                                   |
 800204c:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002050:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002054:	bf02      	ittt	eq
 8002056:	6aa0      	ldreq	r0, [r4, #40]	; 0x28
 8002058:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800205c:	ea42 4240 	orreq.w	r2, r2, r0, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002060:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002062:	b120      	cbz	r0, 800206e <HAL_ADC_Init+0xce>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8002064:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002066:	f400 7078 	and.w	r0, r0, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800206a:	4328      	orrs	r0, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800206c:	4302      	orrs	r2, r0
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800206e:	68dd      	ldr	r5, [r3, #12]
 8002070:	4843      	ldr	r0, [pc, #268]	; (8002180 <HAL_ADC_Init+0x1e0>)
 8002072:	4028      	ands	r0, r5
 8002074:	4310      	orrs	r0, r2
 8002076:	60d8      	str	r0, [r3, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002078:	691a      	ldr	r2, [r3, #16]
 800207a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800207c:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8002080:	4302      	orrs	r2, r0
 8002082:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff ff87 	bl	8001f98 <LL_ADC_REG_IsConversionOngoing>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	f002 0208 	and.w	r2, r2, #8
 8002090:	4310      	orrs	r0, r2
 8002092:	d12e      	bne.n	80020f2 <HAL_ADC_Init+0x152>
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002094:	68d8      	ldr	r0, [r3, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002096:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800209a:	7f25      	ldrb	r5, [r4, #28]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800209c:	0052      	lsls	r2, r2, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800209e:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80020a2:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80020a6:	f020 0002 	bic.w	r0, r0, #2
 80020aa:	4302      	orrs	r2, r0

      if (hadc->Init.GainCompensation != 0UL)
 80020ac:	6925      	ldr	r5, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80020ae:	60da      	str	r2, [r3, #12]
      if (hadc->Init.GainCompensation != 0UL)
 80020b0:	4834      	ldr	r0, [pc, #208]	; (8002184 <HAL_ADC_Init+0x1e4>)
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80020b2:	691a      	ldr	r2, [r3, #16]
      if (hadc->Init.GainCompensation != 0UL)
 80020b4:	2d00      	cmp	r5, #0
 80020b6:	d04d      	beq.n	8002154 <HAL_ADC_Init+0x1b4>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80020b8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80020bc:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80020be:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80020c2:	4002      	ands	r2, r0
 80020c4:	432a      	orrs	r2, r5
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80020c6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80020ca:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 80020ce:	2a01      	cmp	r2, #1
 80020d0:	d147      	bne.n	8002162 <HAL_ADC_Init+0x1c2>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80020d2:	e9d4 2511 	ldrd	r2, r5, [r4, #68]	; 0x44
 80020d6:	6918      	ldr	r0, [r3, #16]
 80020d8:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 80020dc:	f020 0004 	bic.w	r0, r0, #4
 80020e0:	432a      	orrs	r2, r5
 80020e2:	4302      	orrs	r2, r0
 80020e4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80020e6:	4302      	orrs	r2, r0
 80020e8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80020ea:	4302      	orrs	r2, r0
 80020ec:	f042 0201 	orr.w	r2, r2, #1
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80020f0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80020f2:	6962      	ldr	r2, [r4, #20]
 80020f4:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80020f6:	bf05      	ittet	eq
 80020f8:	6b18      	ldreq	r0, [r3, #48]	; 0x30
 80020fa:	6a22      	ldreq	r2, [r4, #32]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80020fc:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80020fe:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8002102:	bf06      	itte	eq
 8002104:	f020 000f 	biceq.w	r0, r0, #15
 8002108:	4302      	orreq	r2, r0
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800210a:	f022 020f 	bicne.w	r2, r2, #15
 800210e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002110:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002112:	f023 0303 	bic.w	r3, r3, #3
 8002116:	f043 0301 	orr.w	r3, r3, #1
 800211a:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 800211c:	4608      	mov	r0, r1
 800211e:	b003      	add	sp, #12
 8002120:	bd30      	pop	{r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8002122:	689a      	ldr	r2, [r3, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002124:	4918      	ldr	r1, [pc, #96]	; (8002188 <HAL_ADC_Init+0x1e8>)
 8002126:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 800212a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800212e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	4a15      	ldr	r2, [pc, #84]	; (800218c <HAL_ADC_Init+0x1ec>)
 8002136:	6812      	ldr	r2, [r2, #0]
 8002138:	fbb2 f2f1 	udiv	r2, r2, r1
 800213c:	3201      	adds	r2, #1
 800213e:	0052      	lsls	r2, r2, #1
      wait_loop_index--;
 8002140:	9201      	str	r2, [sp, #4]
    while (wait_loop_index != 0UL)
 8002142:	9a01      	ldr	r2, [sp, #4]
 8002144:	2a00      	cmp	r2, #0
 8002146:	f43f af47 	beq.w	8001fd8 <HAL_ADC_Init+0x38>
      wait_loop_index--;
 800214a:	9a01      	ldr	r2, [sp, #4]
 800214c:	3a01      	subs	r2, #1
 800214e:	e7f7      	b.n	8002140 <HAL_ADC_Init+0x1a0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002150:	2100      	movs	r1, #0
 8002152:	e74e      	b.n	8001ff2 <HAL_ADC_Init+0x52>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002154:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002158:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800215a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800215e:	4002      	ands	r2, r0
 8002160:	e7b1      	b.n	80020c6 <HAL_ADC_Init+0x126>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002162:	691a      	ldr	r2, [r3, #16]
 8002164:	f022 0201 	bic.w	r2, r2, #1
 8002168:	e7c2      	b.n	80020f0 <HAL_ADC_Init+0x150>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800216a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800216c:	f043 0310 	orr.w	r3, r3, #16
 8002170:	65e3      	str	r3, [r4, #92]	; 0x5c
    return HAL_ERROR;
 8002172:	2101      	movs	r1, #1
 8002174:	e7d2      	b.n	800211c <HAL_ADC_Init+0x17c>
 8002176:	bf00      	nop
 8002178:	50000100 	.word	0x50000100
 800217c:	50000300 	.word	0x50000300
 8002180:	fff04007 	.word	0xfff04007
 8002184:	ffffc000 	.word	0xffffc000
 8002188:	00030d40 	.word	0x00030d40
 800218c:	20000000 	.word	0x20000000

08002190 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002190:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002192:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002194:	f7ff fb02 	bl	800179c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002198:	bd08      	pop	{r3, pc}

0800219a <HAL_ADC_ErrorCallback>:
 800219a:	4770      	bx	lr

0800219c <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800219c:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800219e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021a0:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 80021a4:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80021a8:	d121      	bne.n	80021ee <ADC_DMAConvCplt+0x52>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ae:	65da      	str	r2, [r3, #92]	; 0x5c
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	6811      	ldr	r1, [r2, #0]
 80021b4:	0708      	lsls	r0, r1, #28
 80021b6:	d516      	bpl.n	80021e6 <ADC_DMAConvCplt+0x4a>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80021b8:	68d1      	ldr	r1, [r2, #12]
 80021ba:	f411 6f40 	tst.w	r1, #3072	; 0xc00
 80021be:	d10e      	bne.n	80021de <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80021c0:	68d2      	ldr	r2, [r2, #12]
 80021c2:	f412 5f00 	tst.w	r2, #8192	; 0x2000
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80021c6:	d10a      	bne.n	80021de <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021ce:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80021d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021d2:	04d1      	lsls	r1, r2, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021d4:	bf5e      	ittt	pl
 80021d6:	6dda      	ldrpl	r2, [r3, #92]	; 0x5c
 80021d8:	f042 0201 	orrpl.w	r2, r2, #1
 80021dc:	65da      	strpl	r2, [r3, #92]	; 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff fae8 	bl	80017b4 <HAL_ADC_ConvCpltCallback>
}
 80021e4:	bd10      	pop	{r4, pc}
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80021e6:	68d2      	ldr	r2, [r2, #12]
 80021e8:	f012 0f02 	tst.w	r2, #2
 80021ec:	e7eb      	b.n	80021c6 <ADC_DMAConvCplt+0x2a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80021ee:	06d2      	lsls	r2, r2, #27
 80021f0:	d503      	bpl.n	80021fa <ADC_DMAConvCplt+0x5e>
      HAL_ADC_ErrorCallback(hadc);
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff ffd1 	bl	800219a <HAL_ADC_ErrorCallback>
 80021f8:	e7f4      	b.n	80021e4 <ADC_DMAConvCplt+0x48>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80021fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80021fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002202:	4718      	bx	r3

08002204 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002204:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8002206:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002208:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800220a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800220e:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002210:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002212:	f043 0304 	orr.w	r3, r3, #4
 8002216:	6603      	str	r3, [r0, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002218:	f7ff ffbf 	bl	800219a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800221c:	bd08      	pop	{r3, pc}
	...

08002220 <HAL_ADC_ConfigChannel>:
{
 8002220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8002222:	2300      	movs	r3, #0
 8002224:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002226:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 800222a:	2b01      	cmp	r3, #1
{
 800222c:	4605      	mov	r5, r0
 800222e:	460e      	mov	r6, r1
  __HAL_LOCK(hadc);
 8002230:	f000 81a2 	beq.w	8002578 <HAL_ADC_ConfigChannel+0x358>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002234:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(hadc);
 8002236:	2301      	movs	r3, #1
 8002238:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800223c:	4620      	mov	r0, r4
 800223e:	f7ff feab 	bl	8001f98 <LL_ADC_REG_IsConversionOngoing>
 8002242:	2800      	cmp	r0, #0
 8002244:	f040 8192 	bne.w	800256c <HAL_ADC_ConfigChannel+0x34c>
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002248:	684a      	ldr	r2, [r1, #4]
  MODIFY_REG(*preg,
 800224a:	6833      	ldr	r3, [r6, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800224c:	0991      	lsrs	r1, r2, #6
 800224e:	f001 010c 	and.w	r1, r1, #12
 8002252:	f104 0730 	add.w	r7, r4, #48	; 0x30
  MODIFY_REG(*preg,
 8002256:	f002 021f 	and.w	r2, r2, #31
 800225a:	5878      	ldr	r0, [r7, r1]
 800225c:	f04f 0c1f 	mov.w	ip, #31
 8002260:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8002264:	4093      	lsls	r3, r2
 8002266:	fa0c f202 	lsl.w	r2, ip, r2
 800226a:	ea20 0202 	bic.w	r2, r0, r2
 800226e:	4313      	orrs	r3, r2
 8002270:	507b      	str	r3, [r7, r1]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002272:	4620      	mov	r0, r4
 8002274:	f7ff fe90 	bl	8001f98 <LL_ADC_REG_IsConversionOngoing>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002278:	68a2      	ldr	r2, [r4, #8]
 800227a:	f002 0208 	and.w	r2, r2, #8
 800227e:	4302      	orrs	r2, r0
 8002280:	d13b      	bne.n	80022fa <HAL_ADC_ConfigChannel+0xda>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002282:	68b3      	ldr	r3, [r6, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002284:	6831      	ldr	r1, [r6, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002286:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800228a:	d179      	bne.n	8002380 <HAL_ADC_ConfigChannel+0x160>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800228c:	4620      	mov	r0, r4
 800228e:	f7ff fe6f 	bl	8001f70 <LL_ADC_SetChannelSamplingTime>
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002292:	6963      	ldr	r3, [r4, #20]
 8002294:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002298:	6163      	str	r3, [r4, #20]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800229a:	6937      	ldr	r7, [r6, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800229c:	6971      	ldr	r1, [r6, #20]
 800229e:	68e0      	ldr	r0, [r4, #12]
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80022a0:	6832      	ldr	r2, [r6, #0]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80022a2:	2f04      	cmp	r7, #4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022a4:	f104 0360 	add.w	r3, r4, #96	; 0x60
 80022a8:	d072      	beq.n	8002390 <HAL_ADC_ConfigChannel+0x170>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80022aa:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 80022ae:	0040      	lsls	r0, r0, #1
  MODIFY_REG(*preg,
 80022b0:	f853 c027 	ldr.w	ip, [r3, r7, lsl #2]
 80022b4:	4081      	lsls	r1, r0
 80022b6:	48b1      	ldr	r0, [pc, #708]	; (800257c <HAL_ADC_ConfigChannel+0x35c>)
 80022b8:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80022bc:	ea0c 0000 	and.w	r0, ip, r0
 80022c0:	4310      	orrs	r0, r2
 80022c2:	ea41 0200 	orr.w	r2, r1, r0
 80022c6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80022ca:	f843 2027 	str.w	r2, [r3, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022ce:	6931      	ldr	r1, [r6, #16]
  MODIFY_REG(*preg,
 80022d0:	69b0      	ldr	r0, [r6, #24]
 80022d2:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 80022d6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80022da:	4302      	orrs	r2, r0
 80022dc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80022e0:	7f31      	ldrb	r1, [r6, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022e2:	6930      	ldr	r0, [r6, #16]
 80022e4:	1e4f      	subs	r7, r1, #1
  MODIFY_REG(*preg,
 80022e6:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80022ea:	4279      	negs	r1, r7
 80022ec:	4179      	adcs	r1, r7
 80022ee:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80022f2:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 80022f6:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022fa:	4620      	mov	r0, r4
 80022fc:	f7ff fe48 	bl	8001f90 <LL_ADC_IsEnabled>
 8002300:	2800      	cmp	r0, #0
 8002302:	f040 80a0 	bne.w	8002446 <HAL_ADC_ConfigChannel+0x226>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002306:	68f1      	ldr	r1, [r6, #12]
 8002308:	4a9d      	ldr	r2, [pc, #628]	; (8002580 <HAL_ADC_ConfigChannel+0x360>)
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800230a:	6833      	ldr	r3, [r6, #0]
 800230c:	4291      	cmp	r1, r2
    SET_BIT(ADCx->DIFSEL,
 800230e:	f3c3 0012 	ubfx	r0, r3, #0, #19
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002312:	f040 8092 	bne.w	800243a <HAL_ADC_ConfigChannel+0x21a>
    SET_BIT(ADCx->DIFSEL,
 8002316:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 800231a:	4302      	orrs	r2, r0
 800231c:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002320:	2800      	cmp	r0, #0
 8002322:	f000 809a 	beq.w	800245a <HAL_ADC_ConfigChannel+0x23a>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002326:	fa93 f2a3 	rbit	r2, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800232a:	b13a      	cbz	r2, 800233c <HAL_ADC_ConfigChannel+0x11c>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800232c:	fab2 f282 	clz	r2, r2
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002330:	3201      	adds	r2, #1
 8002332:	f002 021f 	and.w	r2, r2, #31
 8002336:	2a09      	cmp	r2, #9
 8002338:	f200 80ae 	bhi.w	8002498 <HAL_ADC_ConfigChannel+0x278>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233c:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 8002340:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002344:	3201      	adds	r2, #1
 8002346:	0692      	lsls	r2, r2, #26
 8002348:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234c:	fa93 f7a3 	rbit	r7, r3
  return __builtin_clz(value);
 8002350:	fab7 f787 	clz	r7, r7
 8002354:	3701      	adds	r7, #1
 8002356:	f007 071f 	and.w	r7, r7, #31
 800235a:	2101      	movs	r1, #1
 800235c:	40b9      	lsls	r1, r7
 800235e:	4311      	orrs	r1, r2
 8002360:	2800      	cmp	r0, #0
 8002362:	f040 8094 	bne.w	800248e <HAL_ADC_ConfigChannel+0x26e>
 8002366:	0e9b      	lsrs	r3, r3, #26
 8002368:	3301      	adds	r3, #1
 800236a:	f003 031f 	and.w	r3, r3, #31
 800236e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002372:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002374:	68b2      	ldr	r2, [r6, #8]
 8002376:	4319      	orrs	r1, r3
 8002378:	4620      	mov	r0, r4
 800237a:	f7ff fdf9 	bl	8001f70 <LL_ADC_SetChannelSamplingTime>
 800237e:	e062      	b.n	8002446 <HAL_ADC_ConfigChannel+0x226>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002380:	461a      	mov	r2, r3
 8002382:	4620      	mov	r0, r4
 8002384:	f7ff fdf4 	bl	8001f70 <LL_ADC_SetChannelSamplingTime>
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002388:	6963      	ldr	r3, [r4, #20]
 800238a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800238e:	e783      	b.n	8002298 <HAL_ADC_ConfigChannel+0x78>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002390:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8002392:	6e21      	ldr	r1, [r4, #96]	; 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002394:	f3c2 0012 	ubfx	r0, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002398:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800239c:	2800      	cmp	r0, #0
 800239e:	d138      	bne.n	8002412 <HAL_ADC_ConfigChannel+0x1f2>
 80023a0:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023a4:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 80023a6:	bf02      	ittt	eq
 80023a8:	6e22      	ldreq	r2, [r4, #96]	; 0x60
 80023aa:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 80023ae:	6622      	streq	r2, [r4, #96]	; 0x60
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80023b0:	685a      	ldr	r2, [r3, #4]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023b2:	6832      	ldr	r2, [r6, #0]
 80023b4:	6859      	ldr	r1, [r3, #4]
 80023b6:	f3c2 0012 	ubfx	r0, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023ba:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023be:	bb68      	cbnz	r0, 800241c <HAL_ADC_ConfigChannel+0x1fc>
 80023c0:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023c4:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 80023c6:	bf02      	ittt	eq
 80023c8:	685a      	ldreq	r2, [r3, #4]
 80023ca:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 80023ce:	605a      	streq	r2, [r3, #4]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80023d0:	689a      	ldr	r2, [r3, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023d2:	6832      	ldr	r2, [r6, #0]
 80023d4:	6899      	ldr	r1, [r3, #8]
 80023d6:	f3c2 0012 	ubfx	r0, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023da:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023de:	bb10      	cbnz	r0, 8002426 <HAL_ADC_ConfigChannel+0x206>
 80023e0:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023e4:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 80023e6:	bf02      	ittt	eq
 80023e8:	689a      	ldreq	r2, [r3, #8]
 80023ea:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 80023ee:	609a      	streq	r2, [r3, #8]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80023f0:	68da      	ldr	r2, [r3, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023f2:	6832      	ldr	r2, [r6, #0]
 80023f4:	68d9      	ldr	r1, [r3, #12]
 80023f6:	f3c2 0012 	ubfx	r0, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023fa:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023fe:	b9b8      	cbnz	r0, 8002430 <HAL_ADC_ConfigChannel+0x210>
 8002400:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002404:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 8002406:	bf02      	ittt	eq
 8002408:	68da      	ldreq	r2, [r3, #12]
 800240a:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 800240e:	60da      	streq	r2, [r3, #12]
}
 8002410:	e773      	b.n	80022fa <HAL_ADC_ConfigChannel+0xda>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002412:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8002416:	fab2 f282 	clz	r2, r2
 800241a:	e7c3      	b.n	80023a4 <HAL_ADC_ConfigChannel+0x184>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241c:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8002420:	fab2 f282 	clz	r2, r2
 8002424:	e7ce      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x1a4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002426:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 800242a:	fab2 f282 	clz	r2, r2
 800242e:	e7d9      	b.n	80023e4 <HAL_ADC_ConfigChannel+0x1c4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002430:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8002434:	fab2 f282 	clz	r2, r2
 8002438:	e7e4      	b.n	8002404 <HAL_ADC_ConfigChannel+0x1e4>
    CLEAR_BIT(ADCx->DIFSEL,
 800243a:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800243e:	ea23 0300 	bic.w	r3, r3, r0
 8002442:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002446:	6833      	ldr	r3, [r6, #0]
 8002448:	4a4e      	ldr	r2, [pc, #312]	; (8002584 <HAL_ADC_ConfigChannel+0x364>)
 800244a:	4213      	tst	r3, r2
 800244c:	d143      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x2b6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800244e:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8002450:	2300      	movs	r3, #0
 8002452:	f885 3058 	strb.w	r3, [r5, #88]	; 0x58
}
 8002456:	b003      	add	sp, #12
 8002458:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800245a:	0e9a      	lsrs	r2, r3, #26
 800245c:	3201      	adds	r2, #1
 800245e:	f002 071f 	and.w	r7, r2, #31
 8002462:	2101      	movs	r1, #1
 8002464:	0692      	lsls	r2, r2, #26
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002466:	2f09      	cmp	r7, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002468:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800246c:	fa01 f107 	lsl.w	r1, r1, r7
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002470:	f67f af75 	bls.w	800235e <HAL_ADC_ConfigChannel+0x13e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002474:	4311      	orrs	r1, r2
 8002476:	bb08      	cbnz	r0, 80024bc <HAL_ADC_ConfigChannel+0x29c>
 8002478:	0e9b      	lsrs	r3, r3, #26
 800247a:	3301      	adds	r3, #1
 800247c:	f003 031f 	and.w	r3, r3, #31
 8002480:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002484:	3b1e      	subs	r3, #30
 8002486:	051b      	lsls	r3, r3, #20
 8002488:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800248c:	e772      	b.n	8002374 <HAL_ADC_ConfigChannel+0x154>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248e:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002492:	fab3 f383 	clz	r3, r3
 8002496:	e767      	b.n	8002368 <HAL_ADC_ConfigChannel+0x148>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002498:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 800249c:	fab2 f282 	clz	r2, r2
 80024a0:	3201      	adds	r2, #1
 80024a2:	0692      	lsls	r2, r2, #26
 80024a4:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a8:	fa93 f7a3 	rbit	r7, r3
  return __builtin_clz(value);
 80024ac:	fab7 f787 	clz	r7, r7
 80024b0:	3701      	adds	r7, #1
 80024b2:	f007 071f 	and.w	r7, r7, #31
 80024b6:	2101      	movs	r1, #1
 80024b8:	40b9      	lsls	r1, r7
 80024ba:	e7db      	b.n	8002474 <HAL_ADC_ConfigChannel+0x254>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024bc:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 80024c0:	fab2 f282 	clz	r2, r2
 80024c4:	3201      	adds	r2, #1
 80024c6:	f002 021f 	and.w	r2, r2, #31
 80024ca:	2303      	movs	r3, #3
 80024cc:	f06f 001d 	mvn.w	r0, #29
 80024d0:	fb13 0302 	smlabb	r3, r3, r2, r0
 80024d4:	e7d7      	b.n	8002486 <HAL_ADC_ConfigChannel+0x266>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80024d6:	4a2c      	ldr	r2, [pc, #176]	; (8002588 <HAL_ADC_ConfigChannel+0x368>)
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80024d8:	492c      	ldr	r1, [pc, #176]	; (800258c <HAL_ADC_ConfigChannel+0x36c>)
 80024da:	6890      	ldr	r0, [r2, #8]
 80024dc:	428b      	cmp	r3, r1
 80024de:	f000 72e0 	and.w	r2, r0, #29360128	; 0x1c00000
 80024e2:	d002      	beq.n	80024ea <HAL_ADC_ConfigChannel+0x2ca>
 80024e4:	492a      	ldr	r1, [pc, #168]	; (8002590 <HAL_ADC_ConfigChannel+0x370>)
 80024e6:	428b      	cmp	r3, r1
 80024e8:	d11b      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x302>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80024ea:	0201      	lsls	r1, r0, #8
 80024ec:	d419      	bmi.n	8002522 <HAL_ADC_ConfigChannel+0x302>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024ee:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 80024f2:	d1ac      	bne.n	800244e <HAL_ADC_ConfigChannel+0x22e>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80024f4:	4924      	ldr	r1, [pc, #144]	; (8002588 <HAL_ADC_ConfigChannel+0x368>)
 80024f6:	688b      	ldr	r3, [r1, #8]
 80024f8:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80024fc:	4313      	orrs	r3, r2
 80024fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002502:	608b      	str	r3, [r1, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002504:	4b23      	ldr	r3, [pc, #140]	; (8002594 <HAL_ADC_ConfigChannel+0x374>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4b23      	ldr	r3, [pc, #140]	; (8002598 <HAL_ADC_ConfigChannel+0x378>)
 800250a:	fbb2 f2f3 	udiv	r2, r2, r3
 800250e:	230c      	movs	r3, #12
 8002510:	fb02 3303 	mla	r3, r2, r3, r3
            wait_loop_index--;
 8002514:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8002516:	9b01      	ldr	r3, [sp, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d098      	beq.n	800244e <HAL_ADC_ConfigChannel+0x22e>
            wait_loop_index--;
 800251c:	9b01      	ldr	r3, [sp, #4]
 800251e:	3b01      	subs	r3, #1
 8002520:	e7f8      	b.n	8002514 <HAL_ADC_ConfigChannel+0x2f4>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002522:	491e      	ldr	r1, [pc, #120]	; (800259c <HAL_ADC_ConfigChannel+0x37c>)
 8002524:	428b      	cmp	r3, r1
 8002526:	d10e      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x326>
 8002528:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 800252c:	d18f      	bne.n	800244e <HAL_ADC_ConfigChannel+0x22e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800252e:	4b1c      	ldr	r3, [pc, #112]	; (80025a0 <HAL_ADC_ConfigChannel+0x380>)
 8002530:	429c      	cmp	r4, r3
 8002532:	d08c      	beq.n	800244e <HAL_ADC_ConfigChannel+0x22e>
 8002534:	4914      	ldr	r1, [pc, #80]	; (8002588 <HAL_ADC_ConfigChannel+0x368>)
 8002536:	688b      	ldr	r3, [r1, #8]
 8002538:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 800253c:	4313      	orrs	r3, r2
 800253e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002542:	608b      	str	r3, [r1, #8]
}
 8002544:	e784      	b.n	8002450 <HAL_ADC_ConfigChannel+0x230>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002546:	4917      	ldr	r1, [pc, #92]	; (80025a4 <HAL_ADC_ConfigChannel+0x384>)
 8002548:	428b      	cmp	r3, r1
 800254a:	d180      	bne.n	800244e <HAL_ADC_ConfigChannel+0x22e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800254c:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8002550:	f47f af7d 	bne.w	800244e <HAL_ADC_ConfigChannel+0x22e>
        if (ADC_VREFINT_INSTANCE(hadc))
 8002554:	4b12      	ldr	r3, [pc, #72]	; (80025a0 <HAL_ADC_ConfigChannel+0x380>)
 8002556:	429c      	cmp	r4, r3
 8002558:	f43f af79 	beq.w	800244e <HAL_ADC_ConfigChannel+0x22e>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800255c:	490a      	ldr	r1, [pc, #40]	; (8002588 <HAL_ADC_ConfigChannel+0x368>)
 800255e:	688b      	ldr	r3, [r1, #8]
 8002560:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8002564:	4313      	orrs	r3, r2
 8002566:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800256a:	e7ea      	b.n	8002542 <HAL_ADC_ConfigChannel+0x322>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800256c:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800256e:	f042 0220 	orr.w	r2, r2, #32
 8002572:	65ea      	str	r2, [r5, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8002574:	4618      	mov	r0, r3
 8002576:	e76b      	b.n	8002450 <HAL_ADC_ConfigChannel+0x230>
  __HAL_LOCK(hadc);
 8002578:	2002      	movs	r0, #2
 800257a:	e76c      	b.n	8002456 <HAL_ADC_ConfigChannel+0x236>
 800257c:	03fff000 	.word	0x03fff000
 8002580:	407f0000 	.word	0x407f0000
 8002584:	80080000 	.word	0x80080000
 8002588:	50000300 	.word	0x50000300
 800258c:	c3210000 	.word	0xc3210000
 8002590:	90c00010 	.word	0x90c00010
 8002594:	20000000 	.word	0x20000000
 8002598:	00030d40 	.word	0x00030d40
 800259c:	c7520000 	.word	0xc7520000
 80025a0:	50000100 	.word	0x50000100
 80025a4:	cb840000 	.word	0xcb840000

080025a8 <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025a8:	6802      	ldr	r2, [r0, #0]
{
 80025aa:	b570      	push	{r4, r5, r6, lr}
 80025ac:	4604      	mov	r4, r0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025ae:	4610      	mov	r0, r2
 80025b0:	f7ff fcee 	bl	8001f90 <LL_ADC_IsEnabled>
 80025b4:	b108      	cbz	r0, 80025ba <ADC_Enable+0x12>
  return HAL_OK;
 80025b6:	2000      	movs	r0, #0
}
 80025b8:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80025ba:	6891      	ldr	r1, [r2, #8]
 80025bc:	4b16      	ldr	r3, [pc, #88]	; (8002618 <ADC_Enable+0x70>)
 80025be:	4219      	tst	r1, r3
 80025c0:	d009      	beq.n	80025d6 <ADC_Enable+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025c2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80025c4:	f043 0310 	orr.w	r3, r3, #16
 80025c8:	65e3      	str	r3, [r4, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ca:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	6623      	str	r3, [r4, #96]	; 0x60
          return HAL_ERROR;
 80025d2:	2001      	movs	r0, #1
 80025d4:	e7f0      	b.n	80025b8 <ADC_Enable+0x10>
  MODIFY_REG(ADCx->CR,
 80025d6:	6893      	ldr	r3, [r2, #8]
 80025d8:	4d10      	ldr	r5, [pc, #64]	; (800261c <ADC_Enable+0x74>)
 80025da:	402b      	ands	r3, r5
 80025dc:	f043 0301 	orr.w	r3, r3, #1
 80025e0:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80025e2:	f7ff fcab 	bl	8001f3c <HAL_GetTick>
 80025e6:	4606      	mov	r6, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025e8:	6822      	ldr	r2, [r4, #0]
 80025ea:	6813      	ldr	r3, [r2, #0]
 80025ec:	07db      	lsls	r3, r3, #31
 80025ee:	d4e2      	bmi.n	80025b6 <ADC_Enable+0xe>
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025f0:	4610      	mov	r0, r2
 80025f2:	f7ff fccd 	bl	8001f90 <LL_ADC_IsEnabled>
 80025f6:	b920      	cbnz	r0, 8002602 <ADC_Enable+0x5a>
 80025f8:	6893      	ldr	r3, [r2, #8]
 80025fa:	402b      	ands	r3, r5
 80025fc:	f043 0301 	orr.w	r3, r3, #1
 8002600:	6093      	str	r3, [r2, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002602:	f7ff fc9b 	bl	8001f3c <HAL_GetTick>
 8002606:	1b80      	subs	r0, r0, r6
 8002608:	2802      	cmp	r0, #2
 800260a:	d9ed      	bls.n	80025e8 <ADC_Enable+0x40>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800260c:	6823      	ldr	r3, [r4, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	07da      	lsls	r2, r3, #31
 8002612:	d4e9      	bmi.n	80025e8 <ADC_Enable+0x40>
 8002614:	e7d5      	b.n	80025c2 <ADC_Enable+0x1a>
 8002616:	bf00      	nop
 8002618:	8000003f 	.word	0x8000003f
 800261c:	7fffffc0 	.word	0x7fffffc0

08002620 <HAL_ADC_Start_DMA>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002620:	4b34      	ldr	r3, [pc, #208]	; (80026f4 <HAL_ADC_Start_DMA+0xd4>)
{
 8002622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002626:	4604      	mov	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002628:	6800      	ldr	r0, [r0, #0]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f7ff fcb4 	bl	8001f98 <LL_ADC_REG_IsConversionOngoing>
{
 8002630:	460e      	mov	r6, r1
 8002632:	4617      	mov	r7, r2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002634:	4605      	mov	r5, r0
 8002636:	2800      	cmp	r0, #0
 8002638:	d155      	bne.n	80026e6 <HAL_ADC_Start_DMA+0xc6>
    __HAL_LOCK(hadc);
 800263a:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 800263e:	2a01      	cmp	r2, #1
 8002640:	d051      	beq.n	80026e6 <HAL_ADC_Start_DMA+0xc6>
 8002642:	f003 081f 	and.w	r8, r3, #31
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002646:	f240 2321 	movw	r3, #545	; 0x221
    __HAL_LOCK(hadc);
 800264a:	2001      	movs	r0, #1
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800264c:	fa23 f308 	lsr.w	r3, r3, r8
 8002650:	4003      	ands	r3, r0
    __HAL_LOCK(hadc);
 8002652:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002656:	d043      	beq.n	80026e0 <HAL_ADC_Start_DMA+0xc0>
      tmp_hal_status = ADC_Enable(hadc);
 8002658:	4620      	mov	r0, r4
 800265a:	f7ff ffa5 	bl	80025a8 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 800265e:	2800      	cmp	r0, #0
 8002660:	d13b      	bne.n	80026da <HAL_ADC_Start_DMA+0xba>
        ADC_STATE_CLR_SET(hadc->State,
 8002662:	6de0      	ldr	r0, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002664:	6821      	ldr	r1, [r4, #0]
 8002666:	4b24      	ldr	r3, [pc, #144]	; (80026f8 <HAL_ADC_Start_DMA+0xd8>)
        ADC_STATE_CLR_SET(hadc->State,
 8002668:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
 800266c:	f020 0001 	bic.w	r0, r0, #1
 8002670:	f440 7080 	orr.w	r0, r0, #256	; 0x100
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002674:	4299      	cmp	r1, r3
        ADC_STATE_CLR_SET(hadc->State,
 8002676:	65e0      	str	r0, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002678:	d037      	beq.n	80026ea <HAL_ADC_Start_DMA+0xca>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800267a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800267c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002680:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002682:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002684:	6d60      	ldr	r0, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002686:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800268a:	bf1c      	itt	ne
 800268c:	6e23      	ldrne	r3, [r4, #96]	; 0x60
 800268e:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 8002692:	6623      	str	r3, [r4, #96]	; 0x60
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002694:	4b19      	ldr	r3, [pc, #100]	; (80026fc <HAL_ADC_Start_DMA+0xdc>)
 8002696:	62c3      	str	r3, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002698:	4b19      	ldr	r3, [pc, #100]	; (8002700 <HAL_ADC_Start_DMA+0xe0>)
 800269a:	6303      	str	r3, [r0, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800269c:	4b19      	ldr	r3, [pc, #100]	; (8002704 <HAL_ADC_Start_DMA+0xe4>)
 800269e:	6343      	str	r3, [r0, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80026a0:	231c      	movs	r3, #28
 80026a2:	600b      	str	r3, [r1, #0]
        __HAL_UNLOCK(hadc);
 80026a4:	2300      	movs	r3, #0
 80026a6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80026aa:	684b      	ldr	r3, [r1, #4]
 80026ac:	f043 0310 	orr.w	r3, r3, #16
 80026b0:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80026b2:	68cb      	ldr	r3, [r1, #12]
 80026b4:	f043 0301 	orr.w	r3, r3, #1
 80026b8:	60cb      	str	r3, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80026ba:	4632      	mov	r2, r6
 80026bc:	463b      	mov	r3, r7
 80026be:	3140      	adds	r1, #64	; 0x40
 80026c0:	f000 f9a6 	bl	8002a10 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 80026c4:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80026c6:	6893      	ldr	r3, [r2, #8]
 80026c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026d0:	f043 0304 	orr.w	r3, r3, #4
 80026d4:	6093      	str	r3, [r2, #8]
}
 80026d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 80026da:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 80026de:	e7fa      	b.n	80026d6 <HAL_ADC_Start_DMA+0xb6>
      __HAL_UNLOCK(hadc);
 80026e0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80026e4:	e7f7      	b.n	80026d6 <HAL_ADC_Start_DMA+0xb6>
    tmp_hal_status = HAL_BUSY;
 80026e6:	2002      	movs	r0, #2
 80026e8:	e7f5      	b.n	80026d6 <HAL_ADC_Start_DMA+0xb6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026ea:	f1b8 0f00 	cmp.w	r8, #0
 80026ee:	d0c4      	beq.n	800267a <HAL_ADC_Start_DMA+0x5a>
 80026f0:	e7c7      	b.n	8002682 <HAL_ADC_Start_DMA+0x62>
 80026f2:	bf00      	nop
 80026f4:	50000300 	.word	0x50000300
 80026f8:	50000100 	.word	0x50000100
 80026fc:	0800219d 	.word	0x0800219d
 8002700:	08002191 	.word	0x08002191
 8002704:	08002205 	.word	0x08002205

08002708 <LL_ADC_IsEnabled>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002708:	6880      	ldr	r0, [r0, #8]
}
 800270a:	f000 0001 	and.w	r0, r0, #1
 800270e:	4770      	bx	lr

08002710 <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002710:	6880      	ldr	r0, [r0, #8]
}
 8002712:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8002716:	4770      	bx	lr

08002718 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002718:	b570      	push	{r4, r5, r6, lr}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800271a:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800271e:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 8002720:	2b01      	cmp	r3, #1
{
 8002722:	b09c      	sub	sp, #112	; 0x70
 8002724:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 8002726:	d056      	beq.n	80027d6 <HAL_ADCEx_MultiModeConfigChannel+0xbe>
 8002728:	2301      	movs	r3, #1
 800272a:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800272e:	6816      	ldr	r6, [r2, #0]
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002730:	2000      	movs	r0, #0
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002732:	f1b6 4fa0 	cmp.w	r6, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002736:	9018      	str	r0, [sp, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002738:	9019      	str	r0, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800273a:	d10d      	bne.n	8002758 <HAL_ADCEx_MultiModeConfigChannel+0x40>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800273c:	4827      	ldr	r0, [pc, #156]	; (80027dc <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 800273e:	f7ff ffe7 	bl	8002710 <LL_ADC_REG_IsConversionOngoing>
 8002742:	4604      	mov	r4, r0
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002744:	4630      	mov	r0, r6
 8002746:	f7ff ffe3 	bl	8002710 <LL_ADC_REG_IsConversionOngoing>
 800274a:	4320      	orrs	r0, r4
 800274c:	d00d      	beq.n	800276a <HAL_ADCEx_MultiModeConfigChannel+0x52>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800274e:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8002750:	f041 0120 	orr.w	r1, r1, #32
 8002754:	65d1      	str	r1, [r2, #92]	; 0x5c
 8002756:	e02b      	b.n	80027b0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002758:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
    __HAL_UNLOCK(hadc);
 800275a:	f882 0058 	strb.w	r0, [r2, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800275e:	f041 0120 	orr.w	r1, r1, #32
 8002762:	65d1      	str	r1, [r2, #92]	; 0x5c
    return HAL_ERROR;
 8002764:	4618      	mov	r0, r3
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8002766:	b01c      	add	sp, #112	; 0x70
 8002768:	bd70      	pop	{r4, r5, r6, pc}
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800276a:	4c1d      	ldr	r4, [pc, #116]	; (80027e0 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800276c:	68a3      	ldr	r3, [r4, #8]
 800276e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002772:	b1fd      	cbz	r5, 80027b4 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002774:	6848      	ldr	r0, [r1, #4]
 8002776:	4303      	orrs	r3, r0
 8002778:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
 800277c:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
 8002780:	60a3      	str	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002782:	4630      	mov	r0, r6
 8002784:	f7ff ffc0 	bl	8002708 <LL_ADC_IsEnabled>
 8002788:	4603      	mov	r3, r0
 800278a:	4814      	ldr	r0, [pc, #80]	; (80027dc <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 800278c:	f7ff ffbc 	bl	8002708 <LL_ADC_IsEnabled>
 8002790:	4303      	orrs	r3, r0
 8002792:	d004      	beq.n	800279e <HAL_ADCEx_MultiModeConfigChannel+0x86>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002794:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8002796:	2300      	movs	r3, #0
 8002798:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
  return tmp_hal_status;
 800279c:	e7e3      	b.n	8002766 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
        MODIFY_REG(tmpADC_Common->CCR,
 800279e:	6889      	ldr	r1, [r1, #8]
 80027a0:	68a0      	ldr	r0, [r4, #8]
 80027a2:	430d      	orrs	r5, r1
 80027a4:	f420 6171 	bic.w	r1, r0, #3856	; 0xf10
 80027a8:	f021 010f 	bic.w	r1, r1, #15
 80027ac:	430d      	orrs	r5, r1
 80027ae:	60a5      	str	r5, [r4, #8]
    tmp_hal_status = HAL_ERROR;
 80027b0:	4618      	mov	r0, r3
 80027b2:	e7f0      	b.n	8002796 <HAL_ADCEx_MultiModeConfigChannel+0x7e>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80027b4:	60a3      	str	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027b6:	4630      	mov	r0, r6
 80027b8:	f7ff ffa6 	bl	8002708 <LL_ADC_IsEnabled>
 80027bc:	4603      	mov	r3, r0
 80027be:	4807      	ldr	r0, [pc, #28]	; (80027dc <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 80027c0:	f7ff ffa2 	bl	8002708 <LL_ADC_IsEnabled>
 80027c4:	4303      	orrs	r3, r0
 80027c6:	d1e5      	bne.n	8002794 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80027c8:	68a1      	ldr	r1, [r4, #8]
 80027ca:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 80027ce:	f021 010f 	bic.w	r1, r1, #15
 80027d2:	60a1      	str	r1, [r4, #8]
 80027d4:	e7ec      	b.n	80027b0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
  __HAL_LOCK(hadc);
 80027d6:	2002      	movs	r0, #2
 80027d8:	e7c5      	b.n	8002766 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80027da:	bf00      	nop
 80027dc:	50000100 	.word	0x50000100
 80027e0:	50000300 	.word	0x50000300

080027e4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027e4:	4907      	ldr	r1, [pc, #28]	; (8002804 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80027e6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027ec:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ee:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027f4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002800:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002802:	4770      	bx	lr
 8002804:	e000ed00 	.word	0xe000ed00

08002808 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002808:	4b16      	ldr	r3, [pc, #88]	; (8002864 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800280a:	b530      	push	{r4, r5, lr}
 800280c:	68dc      	ldr	r4, [r3, #12]
 800280e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002812:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002816:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002818:	2b04      	cmp	r3, #4
 800281a:	bf28      	it	cs
 800281c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800281e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002820:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002824:	bf8c      	ite	hi
 8002826:	3c03      	subhi	r4, #3
 8002828:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800282a:	fa05 f303 	lsl.w	r3, r5, r3
 800282e:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002832:	40a5      	lsls	r5, r4
 8002834:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002838:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 800283a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800283c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002840:	bfac      	ite	ge
 8002842:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002846:	4a08      	ldrlt	r2, [pc, #32]	; (8002868 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002848:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800284c:	bfb8      	it	lt
 800284e:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002852:	b2db      	uxtb	r3, r3
 8002854:	bfaa      	itet	ge
 8002856:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800285a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800285c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002860:	bd30      	pop	{r4, r5, pc}
 8002862:	bf00      	nop
 8002864:	e000ed00 	.word	0xe000ed00
 8002868:	e000ed14 	.word	0xe000ed14

0800286c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800286c:	2800      	cmp	r0, #0
 800286e:	db07      	blt.n	8002880 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002870:	4a04      	ldr	r2, [pc, #16]	; (8002884 <HAL_NVIC_EnableIRQ+0x18>)
 8002872:	0941      	lsrs	r1, r0, #5
 8002874:	2301      	movs	r3, #1
 8002876:	f000 001f 	and.w	r0, r0, #31
 800287a:	4083      	lsls	r3, r0
 800287c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	e000e100 	.word	0xe000e100

08002888 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002888:	3801      	subs	r0, #1
 800288a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800288e:	d20b      	bcs.n	80028a8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002890:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002894:	4a05      	ldr	r2, [pc, #20]	; (80028ac <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002896:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002898:	21f0      	movs	r1, #240	; 0xf0
 800289a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800289e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028a0:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028a2:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028a4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028a6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80028a8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80028aa:	4770      	bx	lr
 80028ac:	e000ed00 	.word	0xe000ed00

080028b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028b0:	b570      	push	{r4, r5, r6, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028b2:	e9d0 4513 	ldrd	r4, r5, [r0, #76]	; 0x4c
 80028b6:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80028b8:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80028ba:	b114      	cbz	r4, 80028c2 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028bc:	e9d0 4516 	ldrd	r4, r5, [r0, #88]	; 0x58
 80028c0:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80028c2:	e9d0 5410 	ldrd	r5, r4, [r0, #64]	; 0x40
 80028c6:	f004 061f 	and.w	r6, r4, #31
 80028ca:	2401      	movs	r4, #1
 80028cc:	40b4      	lsls	r4, r6
 80028ce:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80028d0:	6804      	ldr	r4, [r0, #0]
 80028d2:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028d4:	6883      	ldr	r3, [r0, #8]
 80028d6:	2b10      	cmp	r3, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80028d8:	bf0b      	itete	eq
 80028da:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80028dc:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80028de:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80028e0:	60e2      	strne	r2, [r4, #12]
  }
}
 80028e2:	bd70      	pop	{r4, r5, r6, pc}

080028e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80028e4:	6803      	ldr	r3, [r0, #0]
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80028e6:	490d      	ldr	r1, [pc, #52]	; (800291c <DMA_CalcDMAMUXChannelBaseAndMask+0x38>)
 80028e8:	4a0d      	ldr	r2, [pc, #52]	; (8002920 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
{
 80028ea:	b510      	push	{r4, lr}
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80028ec:	4c0d      	ldr	r4, [pc, #52]	; (8002924 <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
 80028ee:	42a3      	cmp	r3, r4
 80028f0:	bf88      	it	hi
 80028f2:	460a      	movhi	r2, r1
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80028f4:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80028f6:	f021 0103 	bic.w	r1, r1, #3
 80028fa:	440a      	add	r2, r1
 80028fc:	6482      	str	r2, [r0, #72]	; 0x48
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80028fe:	b2db      	uxtb	r3, r3
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002900:	4a09      	ldr	r2, [pc, #36]	; (8002928 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 8002902:	64c2      	str	r2, [r0, #76]	; 0x4c
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002904:	3b08      	subs	r3, #8
 8002906:	2214      	movs	r2, #20
 8002908:	fbb3 f3f2 	udiv	r3, r3, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800290c:	2201      	movs	r2, #1
 800290e:	f003 031f 	and.w	r3, r3, #31
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	6503      	str	r3, [r0, #80]	; 0x50
}
 8002918:	bd10      	pop	{r4, pc}
 800291a:	bf00      	nop
 800291c:	40020820 	.word	0x40020820
 8002920:	40020800 	.word	0x40020800
 8002924:	40020407 	.word	0x40020407
 8002928:	40020880 	.word	0x40020880

0800292c <HAL_DMA_Init>:
{
 800292c:	b538      	push	{r3, r4, r5, lr}
  if (hdma == NULL)
 800292e:	2800      	cmp	r0, #0
 8002930:	d05b      	beq.n	80029ea <HAL_DMA_Init+0xbe>
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002932:	6802      	ldr	r2, [r0, #0]
 8002934:	4b2e      	ldr	r3, [pc, #184]	; (80029f0 <HAL_DMA_Init+0xc4>)
 8002936:	429a      	cmp	r2, r3
 8002938:	f04f 0114 	mov.w	r1, #20
 800293c:	d849      	bhi.n	80029d2 <HAL_DMA_Init+0xa6>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800293e:	4b2d      	ldr	r3, [pc, #180]	; (80029f4 <HAL_DMA_Init+0xc8>)
 8002940:	4413      	add	r3, r2
 8002942:	fbb3 f3f1 	udiv	r3, r3, r1
 8002946:	492c      	ldr	r1, [pc, #176]	; (80029f8 <HAL_DMA_Init+0xcc>)
 8002948:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 800294a:	e9c0 1310 	strd	r1, r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 800294e:	2302      	movs	r3, #2
 8002950:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 8002954:	e9d0 4302 	ldrd	r4, r3, [r0, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002958:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 800295a:	6811      	ldr	r1, [r2, #0]
  tmp |=  hdma->Init.Direction        |
 800295c:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800295e:	432b      	orrs	r3, r5
 8002960:	6945      	ldr	r5, [r0, #20]
 8002962:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002964:	6985      	ldr	r5, [r0, #24]
 8002966:	432b      	orrs	r3, r5
 8002968:	69c5      	ldr	r5, [r0, #28]
 800296a:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800296c:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800296e:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8002972:	f021 0170 	bic.w	r1, r1, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8002976:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8002978:	430b      	orrs	r3, r1
  hdma->Instance->CCR = tmp;
 800297a:	6013      	str	r3, [r2, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800297c:	f7ff ffb2 	bl	80028e4 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002980:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002984:	bf04      	itt	eq
 8002986:	2300      	moveq	r3, #0
 8002988:	6043      	streq	r3, [r0, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800298a:	6842      	ldr	r2, [r0, #4]
 800298c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800298e:	b2d3      	uxtb	r3, r2
 8002990:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002992:	e9d0 1413 	ldrd	r1, r4, [r0, #76]	; 0x4c
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002996:	3a01      	subs	r2, #1
 8002998:	2a03      	cmp	r2, #3
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800299a:	604c      	str	r4, [r1, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800299c:	d820      	bhi.n	80029e0 <HAL_DMA_Init+0xb4>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800299e:	4a17      	ldr	r2, [pc, #92]	; (80029fc <HAL_DMA_Init+0xd0>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80029a0:	4917      	ldr	r1, [pc, #92]	; (8002a00 <HAL_DMA_Init+0xd4>)
 80029a2:	6581      	str	r1, [r0, #88]	; 0x58
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80029a4:	441a      	add	r2, r3

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80029a6:	3b01      	subs	r3, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80029a8:	0092      	lsls	r2, r2, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80029aa:	2101      	movs	r1, #1
 80029ac:	f003 031f 	and.w	r3, r3, #31
 80029b0:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80029b4:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80029b6:	6542      	str	r2, [r0, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80029b8:	65c3      	str	r3, [r0, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80029ba:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029bc:	4a11      	ldr	r2, [pc, #68]	; (8002a04 <HAL_DMA_Init+0xd8>)
 80029be:	6453      	str	r3, [r2, #68]	; 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029c0:	2300      	movs	r3, #0
  hdma->State  = HAL_DMA_STATE_READY;
 80029c2:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029c4:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 80029c6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 80029ca:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
  return HAL_OK;
 80029ce:	4618      	mov	r0, r3
}
 80029d0:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80029d2:	4b0d      	ldr	r3, [pc, #52]	; (8002a08 <HAL_DMA_Init+0xdc>)
 80029d4:	4413      	add	r3, r2
 80029d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80029da:	490c      	ldr	r1, [pc, #48]	; (8002a0c <HAL_DMA_Init+0xe0>)
 80029dc:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA2;
 80029de:	e7b4      	b.n	800294a <HAL_DMA_Init+0x1e>
    hdma->DMAmuxRequestGen = 0U;
 80029e0:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 80029e2:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80029e6:	65c3      	str	r3, [r0, #92]	; 0x5c
 80029e8:	e7ea      	b.n	80029c0 <HAL_DMA_Init+0x94>
    return HAL_ERROR;
 80029ea:	2001      	movs	r0, #1
 80029ec:	e7f0      	b.n	80029d0 <HAL_DMA_Init+0xa4>
 80029ee:	bf00      	nop
 80029f0:	40020407 	.word	0x40020407
 80029f4:	bffdfff8 	.word	0xbffdfff8
 80029f8:	40020000 	.word	0x40020000
 80029fc:	1000823f 	.word	0x1000823f
 8002a00:	40020940 	.word	0x40020940
 8002a04:	40020900 	.word	0x40020900
 8002a08:	bffdfbf8 	.word	0xbffdfbf8
 8002a0c:	40020400 	.word	0x40020400

08002a10 <HAL_DMA_Start_IT>:
{
 8002a10:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8002a12:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
 8002a16:	2d01      	cmp	r5, #1
{
 8002a18:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8002a1a:	d038      	beq.n	8002a8e <HAL_DMA_Start_IT+0x7e>
 8002a1c:	2501      	movs	r5, #1
 8002a1e:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8002a22:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
 8002a26:	2d01      	cmp	r5, #1
 8002a28:	f04f 0600 	mov.w	r6, #0
 8002a2c:	f04f 0502 	mov.w	r5, #2
 8002a30:	d12b      	bne.n	8002a8a <HAL_DMA_Start_IT+0x7a>
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a32:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
    __HAL_DMA_DISABLE(hdma);
 8002a36:	6805      	ldr	r5, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a38:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8002a3a:	682e      	ldr	r6, [r5, #0]
 8002a3c:	f026 0601 	bic.w	r6, r6, #1
 8002a40:	602e      	str	r6, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a42:	f7ff ff35 	bl	80028b0 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8002a46:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002a48:	b1bb      	cbz	r3, 8002a7a <HAL_DMA_Start_IT+0x6a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a4a:	682b      	ldr	r3, [r5, #0]
 8002a4c:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a50:	602b      	str	r3, [r5, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002a52:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	03d2      	lsls	r2, r2, #15
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002a58:	bf42      	ittt	mi
 8002a5a:	681a      	ldrmi	r2, [r3, #0]
 8002a5c:	f442 7280 	orrmi.w	r2, r2, #256	; 0x100
 8002a60:	601a      	strmi	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8002a62:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002a64:	b11b      	cbz	r3, 8002a6e <HAL_DMA_Start_IT+0x5e>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a6c:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8002a6e:	682b      	ldr	r3, [r5, #0]
 8002a70:	f043 0301 	orr.w	r3, r3, #1
 8002a74:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a76:	2000      	movs	r0, #0
}
 8002a78:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a7a:	682b      	ldr	r3, [r5, #0]
 8002a7c:	f023 0304 	bic.w	r3, r3, #4
 8002a80:	602b      	str	r3, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a82:	682b      	ldr	r3, [r5, #0]
 8002a84:	f043 030a 	orr.w	r3, r3, #10
 8002a88:	e7e2      	b.n	8002a50 <HAL_DMA_Start_IT+0x40>
    __HAL_UNLOCK(hdma);
 8002a8a:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 8002a8e:	2002      	movs	r0, #2
 8002a90:	e7f2      	b.n	8002a78 <HAL_DMA_Start_IT+0x68>

08002a92 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a92:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002a94:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8002a96:	6803      	ldr	r3, [r0, #0]
{
 8002a98:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002a9a:	f002 021f 	and.w	r2, r2, #31
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a9e:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002aa0:	681d      	ldr	r5, [r3, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002aa2:	2404      	movs	r4, #4
 8002aa4:	4094      	lsls	r4, r2
 8002aa6:	4234      	tst	r4, r6
 8002aa8:	d00e      	beq.n	8002ac8 <HAL_DMA_IRQHandler+0x36>
 8002aaa:	f015 0f04 	tst.w	r5, #4
 8002aae:	d00b      	beq.n	8002ac8 <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	0692      	lsls	r2, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ab4:	bf5e      	ittt	pl
 8002ab6:	681a      	ldrpl	r2, [r3, #0]
 8002ab8:	f022 0204 	bicpl.w	r2, r2, #4
 8002abc:	601a      	strpl	r2, [r3, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8002abe:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002ac0:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 8002ac2:	b373      	cbz	r3, 8002b22 <HAL_DMA_IRQHandler+0x90>
}
 8002ac4:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8002ac6:	4718      	bx	r3
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002ac8:	2402      	movs	r4, #2
 8002aca:	4094      	lsls	r4, r2
 8002acc:	4234      	tst	r4, r6
 8002ace:	d012      	beq.n	8002af6 <HAL_DMA_IRQHandler+0x64>
           && (0U != (source_it & DMA_IT_TC)))
 8002ad0:	f015 0f02 	tst.w	r5, #2
 8002ad4:	d00f      	beq.n	8002af6 <HAL_DMA_IRQHandler+0x64>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	0695      	lsls	r5, r2, #26
 8002ada:	d406      	bmi.n	8002aea <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	f022 020a 	bic.w	r2, r2, #10
 8002ae2:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8002aea:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002aec:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8002aee:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 8002af2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002af4:	e7e5      	b.n	8002ac2 <HAL_DMA_IRQHandler+0x30>
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002af6:	2408      	movs	r4, #8
 8002af8:	4094      	lsls	r4, r2
 8002afa:	4234      	tst	r4, r6
 8002afc:	d011      	beq.n	8002b22 <HAL_DMA_IRQHandler+0x90>
           && (0U != (source_it & DMA_IT_TE)))
 8002afe:	072c      	lsls	r4, r5, #28
 8002b00:	d50f      	bpl.n	8002b22 <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b02:	681c      	ldr	r4, [r3, #0]
 8002b04:	f024 040e 	bic.w	r4, r4, #14
 8002b08:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	fa03 f202 	lsl.w	r2, r3, r2
 8002b10:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b12:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8002b14:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8002b18:	2300      	movs	r3, #0
 8002b1a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8002b1e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002b20:	e7cf      	b.n	8002ac2 <HAL_DMA_IRQHandler+0x30>
}
 8002b22:	bc70      	pop	{r4, r5, r6}
 8002b24:	4770      	bx	lr
	...

08002b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b2c:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8002cbc <HAL_GPIO_Init+0x194>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b30:	4c60      	ldr	r4, [pc, #384]	; (8002cb4 <HAL_GPIO_Init+0x18c>)
  uint32_t position = 0x00U;
 8002b32:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002b34:	680a      	ldr	r2, [r1, #0]
 8002b36:	fa32 f503 	lsrs.w	r5, r2, r3
 8002b3a:	d102      	bne.n	8002b42 <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8002b3c:	b003      	add	sp, #12
 8002b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002b42:	2501      	movs	r5, #1
 8002b44:	fa05 fe03 	lsl.w	lr, r5, r3
    if (iocurrent != 0x00u)
 8002b48:	ea1e 0202 	ands.w	r2, lr, r2
 8002b4c:	f000 80a5 	beq.w	8002c9a <HAL_GPIO_Init+0x172>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b50:	684e      	ldr	r6, [r1, #4]
 8002b52:	f006 0503 	and.w	r5, r6, #3
 8002b56:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b5a:	f04f 0c03 	mov.w	ip, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b5e:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b60:	fa0c fc08 	lsl.w	ip, ip, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b64:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b66:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b6a:	d834      	bhi.n	8002bd6 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8002b6c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b6e:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b72:	68cf      	ldr	r7, [r1, #12]
 8002b74:	fa07 f708 	lsl.w	r7, r7, r8
 8002b78:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8002b7c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002b7e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b80:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b84:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8002b88:	409f      	lsls	r7, r3
 8002b8a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8002b8e:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8002b90:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b92:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b96:	688f      	ldr	r7, [r1, #8]
 8002b98:	fa07 f708 	lsl.w	r7, r7, r8
 8002b9c:	ea47 070e 	orr.w	r7, r7, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ba0:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 8002ba2:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ba4:	d119      	bne.n	8002bda <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 8002ba6:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8002baa:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002bae:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8002bb2:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002bb6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002bba:	f04f 0e0f 	mov.w	lr, #15
 8002bbe:	fa0e fe0b 	lsl.w	lr, lr, fp
 8002bc2:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002bc6:	690f      	ldr	r7, [r1, #16]
 8002bc8:	fa07 f70b 	lsl.w	r7, r7, fp
 8002bcc:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8002bd0:	f8ca 7020 	str.w	r7, [sl, #32]
 8002bd4:	e001      	b.n	8002bda <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bd6:	2d03      	cmp	r5, #3
 8002bd8:	d1da      	bne.n	8002b90 <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 8002bda:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bdc:	fa05 f508 	lsl.w	r5, r5, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002be0:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002be4:	433d      	orrs	r5, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002be6:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      GPIOx->MODER = temp;
 8002bea:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bec:	d055      	beq.n	8002c9a <HAL_GPIO_Init+0x172>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bee:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 8002bf2:	f045 0501 	orr.w	r5, r5, #1
 8002bf6:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
 8002bfa:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 8002bfe:	f023 0703 	bic.w	r7, r3, #3
 8002c02:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8002c06:	f005 0501 	and.w	r5, r5, #1
 8002c0a:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8002c0e:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c10:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c14:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002c16:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c18:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002c1c:	f04f 0c0f 	mov.w	ip, #15
 8002c20:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c24:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c28:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c2c:	d037      	beq.n	8002c9e <HAL_GPIO_Init+0x176>
 8002c2e:	4d22      	ldr	r5, [pc, #136]	; (8002cb8 <HAL_GPIO_Init+0x190>)
 8002c30:	42a8      	cmp	r0, r5
 8002c32:	d036      	beq.n	8002ca2 <HAL_GPIO_Init+0x17a>
 8002c34:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002c38:	42a8      	cmp	r0, r5
 8002c3a:	d034      	beq.n	8002ca6 <HAL_GPIO_Init+0x17e>
 8002c3c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002c40:	42a8      	cmp	r0, r5
 8002c42:	d032      	beq.n	8002caa <HAL_GPIO_Init+0x182>
 8002c44:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002c48:	42a8      	cmp	r0, r5
 8002c4a:	d030      	beq.n	8002cae <HAL_GPIO_Init+0x186>
 8002c4c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002c50:	42a8      	cmp	r0, r5
 8002c52:	bf0c      	ite	eq
 8002c54:	2505      	moveq	r5, #5
 8002c56:	2506      	movne	r5, #6
 8002c58:	fa05 f50e 	lsl.w	r5, r5, lr
 8002c5c:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c60:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR1;
 8002c62:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8002c64:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c66:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8002c6a:	bf0c      	ite	eq
 8002c6c:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8002c6e:	4315      	orrne	r5, r2
        EXTI->RTSR1 = temp;
 8002c70:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8002c72:	68e5      	ldr	r5, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c74:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8002c78:	bf0c      	ite	eq
 8002c7a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8002c7c:	4315      	orrne	r5, r2
        EXTI->FTSR1 = temp;
 8002c7e:	60e5      	str	r5, [r4, #12]
        temp = EXTI->EMR1;
 8002c80:	6865      	ldr	r5, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c82:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~(iocurrent);
 8002c86:	bf0c      	ite	eq
 8002c88:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8002c8a:	4315      	orrne	r5, r2
        EXTI->EMR1 = temp;
 8002c8c:	6065      	str	r5, [r4, #4]
        temp = EXTI->IMR1;
 8002c8e:	6825      	ldr	r5, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c90:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 8002c92:	bf54      	ite	pl
 8002c94:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8002c96:	4315      	orrmi	r5, r2
        EXTI->IMR1 = temp;
 8002c98:	6025      	str	r5, [r4, #0]
    position++;
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	e74a      	b.n	8002b34 <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c9e:	2500      	movs	r5, #0
 8002ca0:	e7da      	b.n	8002c58 <HAL_GPIO_Init+0x130>
 8002ca2:	2501      	movs	r5, #1
 8002ca4:	e7d8      	b.n	8002c58 <HAL_GPIO_Init+0x130>
 8002ca6:	2502      	movs	r5, #2
 8002ca8:	e7d6      	b.n	8002c58 <HAL_GPIO_Init+0x130>
 8002caa:	2503      	movs	r5, #3
 8002cac:	e7d4      	b.n	8002c58 <HAL_GPIO_Init+0x130>
 8002cae:	2504      	movs	r5, #4
 8002cb0:	e7d2      	b.n	8002c58 <HAL_GPIO_Init+0x130>
 8002cb2:	bf00      	nop
 8002cb4:	40010400 	.word	0x40010400
 8002cb8:	48000400 	.word	0x48000400
 8002cbc:	40021000 	.word	0x40021000

08002cc0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cc0:	b10a      	cbz	r2, 8002cc6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cc2:	6181      	str	r1, [r0, #24]
 8002cc4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002cc6:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002cc8:	4770      	bx	lr
	...

08002ccc <HAL_PWREx_ControlVoltageScaling>:
{
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002ccc:	4b29      	ldr	r3, [pc, #164]	; (8002d74 <HAL_PWREx_ControlVoltageScaling+0xa8>)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002cce:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002cd0:	bb30      	cbnz	r0, 8002d20 <HAL_PWREx_ControlVoltageScaling+0x54>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002cd2:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 8002cd6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cda:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002cde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ce2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ce6:	d11a      	bne.n	8002d1e <HAL_PWREx_ControlVoltageScaling+0x52>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8002cee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cf2:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cf4:	4a20      	ldr	r2, [pc, #128]	; (8002d78 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8002cf6:	6812      	ldr	r2, [r2, #0]
 8002cf8:	2132      	movs	r1, #50	; 0x32
 8002cfa:	434a      	muls	r2, r1
 8002cfc:	491f      	ldr	r1, [pc, #124]	; (8002d7c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002cfe:	fbb2 f2f1 	udiv	r2, r2, r1
 8002d02:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d04:	6959      	ldr	r1, [r3, #20]
 8002d06:	0549      	lsls	r1, r1, #21
 8002d08:	d500      	bpl.n	8002d0c <HAL_PWREx_ControlVoltageScaling+0x40>
 8002d0a:	b922      	cbnz	r2, 8002d16 <HAL_PWREx_ControlVoltageScaling+0x4a>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	0558      	lsls	r0, r3, #21
 8002d10:	d403      	bmi.n	8002d1a <HAL_PWREx_ControlVoltageScaling+0x4e>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002d12:	2000      	movs	r0, #0
}
 8002d14:	4770      	bx	lr
        wait_loop_index--;
 8002d16:	3a01      	subs	r2, #1
 8002d18:	e7f4      	b.n	8002d04 <HAL_PWREx_ControlVoltageScaling+0x38>
        return HAL_TIMEOUT;
 8002d1a:	2003      	movs	r0, #3
 8002d1c:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d1e:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d20:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002d24:	d11f      	bne.n	8002d66 <HAL_PWREx_ControlVoltageScaling+0x9a>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d26:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 8002d2a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d2e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002d32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d3a:	d1ea      	bne.n	8002d12 <HAL_PWREx_ControlVoltageScaling+0x46>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8002d42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d46:	601a      	str	r2, [r3, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d48:	4a0b      	ldr	r2, [pc, #44]	; (8002d78 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8002d4a:	6812      	ldr	r2, [r2, #0]
 8002d4c:	2132      	movs	r1, #50	; 0x32
 8002d4e:	434a      	muls	r2, r1
 8002d50:	490a      	ldr	r1, [pc, #40]	; (8002d7c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002d52:	fbb2 f2f1 	udiv	r2, r2, r1
 8002d56:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d58:	6959      	ldr	r1, [r3, #20]
 8002d5a:	0549      	lsls	r1, r1, #21
 8002d5c:	d5d6      	bpl.n	8002d0c <HAL_PWREx_ControlVoltageScaling+0x40>
 8002d5e:	2a00      	cmp	r2, #0
 8002d60:	d0d4      	beq.n	8002d0c <HAL_PWREx_ControlVoltageScaling+0x40>
        wait_loop_index--;
 8002d62:	3a01      	subs	r2, #1
 8002d64:	e7f8      	b.n	8002d58 <HAL_PWREx_ControlVoltageScaling+0x8c>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d66:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8002d6a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	e7cf      	b.n	8002d12 <HAL_PWREx_ControlVoltageScaling+0x46>
 8002d72:	bf00      	nop
 8002d74:	40007000 	.word	0x40007000
 8002d78:	20000000 	.word	0x20000000
 8002d7c:	000f4240 	.word	0x000f4240

08002d80 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002d80:	4a02      	ldr	r2, [pc, #8]	; (8002d8c <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8002d82:	6893      	ldr	r3, [r2, #8]
 8002d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d88:	6093      	str	r3, [r2, #8]
}
 8002d8a:	4770      	bx	lr
 8002d8c:	40007000 	.word	0x40007000

08002d90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d94:	4604      	mov	r4, r0
 8002d96:	b340      	cbz	r0, 8002dea <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d98:	6803      	ldr	r3, [r0, #0]
 8002d9a:	07df      	lsls	r7, r3, #31
 8002d9c:	d414      	bmi.n	8002dc8 <HAL_RCC_OscConfig+0x38>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d9e:	6823      	ldr	r3, [r4, #0]
 8002da0:	079e      	lsls	r6, r3, #30
 8002da2:	d45b      	bmi.n	8002e5c <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002da4:	6823      	ldr	r3, [r4, #0]
 8002da6:	071e      	lsls	r6, r3, #28
 8002da8:	f100 80a4 	bmi.w	8002ef4 <HAL_RCC_OscConfig+0x164>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dac:	6823      	ldr	r3, [r4, #0]
 8002dae:	075d      	lsls	r5, r3, #29
 8002db0:	f100 80cb 	bmi.w	8002f4a <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002db4:	6823      	ldr	r3, [r4, #0]
 8002db6:	069b      	lsls	r3, r3, #26
 8002db8:	f100 8132 	bmi.w	8003020 <HAL_RCC_OscConfig+0x290>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002dbc:	69e0      	ldr	r0, [r4, #28]
 8002dbe:	2800      	cmp	r0, #0
 8002dc0:	f040 8160 	bne.w	8003084 <HAL_RCC_OscConfig+0x2f4>
      }
    }
  }
  }

  return HAL_OK;
 8002dc4:	2000      	movs	r0, #0
 8002dc6:	e028      	b.n	8002e1a <HAL_RCC_OscConfig+0x8a>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dc8:	4da1      	ldr	r5, [pc, #644]	; (8003050 <HAL_RCC_OscConfig+0x2c0>)
 8002dca:	68ab      	ldr	r3, [r5, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dcc:	68ea      	ldr	r2, [r5, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dce:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002dd2:	2b0c      	cmp	r3, #12
 8002dd4:	d10b      	bne.n	8002dee <HAL_RCC_OscConfig+0x5e>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dd6:	f002 0303 	and.w	r3, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002dda:	2b03      	cmp	r3, #3
 8002ddc:	d109      	bne.n	8002df2 <HAL_RCC_OscConfig+0x62>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dde:	682b      	ldr	r3, [r5, #0]
 8002de0:	039d      	lsls	r5, r3, #14
 8002de2:	d5dc      	bpl.n	8002d9e <HAL_RCC_OscConfig+0xe>
 8002de4:	6863      	ldr	r3, [r4, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1d9      	bne.n	8002d9e <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 8002dea:	2001      	movs	r0, #1
 8002dec:	e015      	b.n	8002e1a <HAL_RCC_OscConfig+0x8a>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002dee:	2b08      	cmp	r3, #8
 8002df0:	e7f4      	b.n	8002ddc <HAL_RCC_OscConfig+0x4c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002df2:	6863      	ldr	r3, [r4, #4]
 8002df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002df8:	d112      	bne.n	8002e20 <HAL_RCC_OscConfig+0x90>
 8002dfa:	682b      	ldr	r3, [r5, #0]
 8002dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e00:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002e02:	f7ff f89b 	bl	8001f3c <HAL_GetTick>
 8002e06:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e08:	682b      	ldr	r3, [r5, #0]
 8002e0a:	0398      	lsls	r0, r3, #14
 8002e0c:	d4c7      	bmi.n	8002d9e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e0e:	f7ff f895 	bl	8001f3c <HAL_GetTick>
 8002e12:	1b80      	subs	r0, r0, r6
 8002e14:	2864      	cmp	r0, #100	; 0x64
 8002e16:	d9f7      	bls.n	8002e08 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8002e18:	2003      	movs	r0, #3
}
 8002e1a:	b002      	add	sp, #8
 8002e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e24:	d104      	bne.n	8002e30 <HAL_RCC_OscConfig+0xa0>
 8002e26:	682b      	ldr	r3, [r5, #0]
 8002e28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e2c:	602b      	str	r3, [r5, #0]
 8002e2e:	e7e4      	b.n	8002dfa <HAL_RCC_OscConfig+0x6a>
 8002e30:	682a      	ldr	r2, [r5, #0]
 8002e32:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002e36:	602a      	str	r2, [r5, #0]
 8002e38:	682a      	ldr	r2, [r5, #0]
 8002e3a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e3e:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1de      	bne.n	8002e02 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8002e44:	f7ff f87a 	bl	8001f3c <HAL_GetTick>
 8002e48:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e4a:	682b      	ldr	r3, [r5, #0]
 8002e4c:	0399      	lsls	r1, r3, #14
 8002e4e:	d5a6      	bpl.n	8002d9e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e50:	f7ff f874 	bl	8001f3c <HAL_GetTick>
 8002e54:	1b80      	subs	r0, r0, r6
 8002e56:	2864      	cmp	r0, #100	; 0x64
 8002e58:	d9f7      	bls.n	8002e4a <HAL_RCC_OscConfig+0xba>
 8002e5a:	e7dd      	b.n	8002e18 <HAL_RCC_OscConfig+0x88>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e5c:	4d7c      	ldr	r5, [pc, #496]	; (8003050 <HAL_RCC_OscConfig+0x2c0>)
 8002e5e:	68ab      	ldr	r3, [r5, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e60:	68ea      	ldr	r2, [r5, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e62:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002e66:	2b0c      	cmp	r3, #12
 8002e68:	d117      	bne.n	8002e9a <HAL_RCC_OscConfig+0x10a>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e6a:	f002 0303 	and.w	r3, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d115      	bne.n	8002e9e <HAL_RCC_OscConfig+0x10e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e72:	682b      	ldr	r3, [r5, #0]
 8002e74:	055a      	lsls	r2, r3, #21
 8002e76:	d502      	bpl.n	8002e7e <HAL_RCC_OscConfig+0xee>
 8002e78:	68e3      	ldr	r3, [r4, #12]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d0b5      	beq.n	8002dea <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e7e:	686b      	ldr	r3, [r5, #4]
 8002e80:	6922      	ldr	r2, [r4, #16]
 8002e82:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002e86:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002e8a:	606b      	str	r3, [r5, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002e8c:	4b71      	ldr	r3, [pc, #452]	; (8003054 <HAL_RCC_OscConfig+0x2c4>)
 8002e8e:	6818      	ldr	r0, [r3, #0]
 8002e90:	f7ff f812 	bl	8001eb8 <HAL_InitTick>
 8002e94:	2800      	cmp	r0, #0
 8002e96:	d085      	beq.n	8002da4 <HAL_RCC_OscConfig+0x14>
 8002e98:	e7a7      	b.n	8002dea <HAL_RCC_OscConfig+0x5a>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	e7e8      	b.n	8002e70 <HAL_RCC_OscConfig+0xe0>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e9e:	68e3      	ldr	r3, [r4, #12]
 8002ea0:	b1bb      	cbz	r3, 8002ed2 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI_ENABLE();
 8002ea2:	682b      	ldr	r3, [r5, #0]
 8002ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ea8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002eaa:	f7ff f847 	bl	8001f3c <HAL_GetTick>
 8002eae:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002eb0:	682b      	ldr	r3, [r5, #0]
 8002eb2:	055b      	lsls	r3, r3, #21
 8002eb4:	d507      	bpl.n	8002ec6 <HAL_RCC_OscConfig+0x136>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb6:	686b      	ldr	r3, [r5, #4]
 8002eb8:	6922      	ldr	r2, [r4, #16]
 8002eba:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002ebe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002ec2:	606b      	str	r3, [r5, #4]
 8002ec4:	e76e      	b.n	8002da4 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ec6:	f7ff f839 	bl	8001f3c <HAL_GetTick>
 8002eca:	1b80      	subs	r0, r0, r6
 8002ecc:	2802      	cmp	r0, #2
 8002ece:	d9ef      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x120>
 8002ed0:	e7a2      	b.n	8002e18 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8002ed2:	682b      	ldr	r3, [r5, #0]
 8002ed4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ed8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002eda:	f7ff f82f 	bl	8001f3c <HAL_GetTick>
 8002ede:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ee0:	682b      	ldr	r3, [r5, #0]
 8002ee2:	055f      	lsls	r7, r3, #21
 8002ee4:	f57f af5e 	bpl.w	8002da4 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ee8:	f7ff f828 	bl	8001f3c <HAL_GetTick>
 8002eec:	1b80      	subs	r0, r0, r6
 8002eee:	2802      	cmp	r0, #2
 8002ef0:	d9f6      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x150>
 8002ef2:	e791      	b.n	8002e18 <HAL_RCC_OscConfig+0x88>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ef4:	6963      	ldr	r3, [r4, #20]
 8002ef6:	4d56      	ldr	r5, [pc, #344]	; (8003050 <HAL_RCC_OscConfig+0x2c0>)
 8002ef8:	b19b      	cbz	r3, 8002f22 <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8002efa:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002efe:	f043 0301 	orr.w	r3, r3, #1
 8002f02:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002f06:	f7ff f819 	bl	8001f3c <HAL_GetTick>
 8002f0a:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f0c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002f10:	0798      	lsls	r0, r3, #30
 8002f12:	f53f af4b 	bmi.w	8002dac <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f16:	f7ff f811 	bl	8001f3c <HAL_GetTick>
 8002f1a:	1b80      	subs	r0, r0, r6
 8002f1c:	2802      	cmp	r0, #2
 8002f1e:	d9f5      	bls.n	8002f0c <HAL_RCC_OscConfig+0x17c>
 8002f20:	e77a      	b.n	8002e18 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 8002f22:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002f26:	f023 0301 	bic.w	r3, r3, #1
 8002f2a:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002f2e:	f7ff f805 	bl	8001f3c <HAL_GetTick>
 8002f32:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f34:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002f38:	0799      	lsls	r1, r3, #30
 8002f3a:	f57f af37 	bpl.w	8002dac <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f3e:	f7fe fffd 	bl	8001f3c <HAL_GetTick>
 8002f42:	1b80      	subs	r0, r0, r6
 8002f44:	2802      	cmp	r0, #2
 8002f46:	d9f5      	bls.n	8002f34 <HAL_RCC_OscConfig+0x1a4>
 8002f48:	e766      	b.n	8002e18 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f4a:	4d41      	ldr	r5, [pc, #260]	; (8003050 <HAL_RCC_OscConfig+0x2c0>)
 8002f4c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002f4e:	00da      	lsls	r2, r3, #3
 8002f50:	d427      	bmi.n	8002fa2 <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f52:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f58:	65ab      	str	r3, [r5, #88]	; 0x58
 8002f5a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f60:	9301      	str	r3, [sp, #4]
 8002f62:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002f64:	2701      	movs	r7, #1
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f66:	4e3c      	ldr	r6, [pc, #240]	; (8003058 <HAL_RCC_OscConfig+0x2c8>)
 8002f68:	6833      	ldr	r3, [r6, #0]
 8002f6a:	05db      	lsls	r3, r3, #23
 8002f6c:	d51b      	bpl.n	8002fa6 <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f6e:	68a3      	ldr	r3, [r4, #8]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d129      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x238>
 8002f74:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      tickstart = HAL_GetTick();
 8002f80:	f7fe ffdc 	bl	8001f3c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f84:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002f88:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f8a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8002f8e:	0799      	lsls	r1, r3, #30
 8002f90:	d540      	bpl.n	8003014 <HAL_RCC_OscConfig+0x284>
    if (pwrclkchanged == SET)
 8002f92:	2f00      	cmp	r7, #0
 8002f94:	f43f af0e 	beq.w	8002db4 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f98:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002f9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f9e:	65ab      	str	r3, [r5, #88]	; 0x58
 8002fa0:	e708      	b.n	8002db4 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8002fa2:	2700      	movs	r7, #0
 8002fa4:	e7df      	b.n	8002f66 <HAL_RCC_OscConfig+0x1d6>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fa6:	6833      	ldr	r3, [r6, #0]
 8002fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fac:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002fae:	f7fe ffc5 	bl	8001f3c <HAL_GetTick>
 8002fb2:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fb4:	6833      	ldr	r3, [r6, #0]
 8002fb6:	05d8      	lsls	r0, r3, #23
 8002fb8:	d4d9      	bmi.n	8002f6e <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fba:	f7fe ffbf 	bl	8001f3c <HAL_GetTick>
 8002fbe:	eba0 0008 	sub.w	r0, r0, r8
 8002fc2:	2802      	cmp	r0, #2
 8002fc4:	d9f6      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x224>
 8002fc6:	e727      	b.n	8002e18 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fc8:	2b05      	cmp	r3, #5
 8002fca:	d106      	bne.n	8002fda <HAL_RCC_OscConfig+0x24a>
 8002fcc:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8002fd0:	f043 0304 	orr.w	r3, r3, #4
 8002fd4:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 8002fd8:	e7cc      	b.n	8002f74 <HAL_RCC_OscConfig+0x1e4>
 8002fda:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8002fde:	f022 0201 	bic.w	r2, r2, #1
 8002fe2:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
 8002fe6:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8002fea:	f022 0204 	bic.w	r2, r2, #4
 8002fee:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1c4      	bne.n	8002f80 <HAL_RCC_OscConfig+0x1f0>
      tickstart = HAL_GetTick();
 8002ff6:	f7fe ffa1 	bl	8001f3c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ffa:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002ffe:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003000:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8003004:	079a      	lsls	r2, r3, #30
 8003006:	d5c4      	bpl.n	8002f92 <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003008:	f7fe ff98 	bl	8001f3c <HAL_GetTick>
 800300c:	1b80      	subs	r0, r0, r6
 800300e:	4540      	cmp	r0, r8
 8003010:	d9f6      	bls.n	8003000 <HAL_RCC_OscConfig+0x270>
 8003012:	e701      	b.n	8002e18 <HAL_RCC_OscConfig+0x88>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003014:	f7fe ff92 	bl	8001f3c <HAL_GetTick>
 8003018:	1b80      	subs	r0, r0, r6
 800301a:	4540      	cmp	r0, r8
 800301c:	d9b5      	bls.n	8002f8a <HAL_RCC_OscConfig+0x1fa>
 800301e:	e6fb      	b.n	8002e18 <HAL_RCC_OscConfig+0x88>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003020:	69a3      	ldr	r3, [r4, #24]
 8003022:	4d0b      	ldr	r5, [pc, #44]	; (8003050 <HAL_RCC_OscConfig+0x2c0>)
 8003024:	b1d3      	cbz	r3, 800305c <HAL_RCC_OscConfig+0x2cc>
      __HAL_RCC_HSI48_ENABLE();
 8003026:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800302a:	f043 0301 	orr.w	r3, r3, #1
 800302e:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8003032:	f7fe ff83 	bl	8001f3c <HAL_GetTick>
 8003036:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003038:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800303c:	079f      	lsls	r7, r3, #30
 800303e:	f53f aebd 	bmi.w	8002dbc <HAL_RCC_OscConfig+0x2c>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003042:	f7fe ff7b 	bl	8001f3c <HAL_GetTick>
 8003046:	1b80      	subs	r0, r0, r6
 8003048:	2802      	cmp	r0, #2
 800304a:	d9f5      	bls.n	8003038 <HAL_RCC_OscConfig+0x2a8>
 800304c:	e6e4      	b.n	8002e18 <HAL_RCC_OscConfig+0x88>
 800304e:	bf00      	nop
 8003050:	40021000 	.word	0x40021000
 8003054:	20000008 	.word	0x20000008
 8003058:	40007000 	.word	0x40007000
      __HAL_RCC_HSI48_DISABLE();
 800305c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8003060:	f023 0301 	bic.w	r3, r3, #1
 8003064:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8003068:	f7fe ff68 	bl	8001f3c <HAL_GetTick>
 800306c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800306e:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8003072:	0798      	lsls	r0, r3, #30
 8003074:	f57f aea2 	bpl.w	8002dbc <HAL_RCC_OscConfig+0x2c>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003078:	f7fe ff60 	bl	8001f3c <HAL_GetTick>
 800307c:	1b80      	subs	r0, r0, r6
 800307e:	2802      	cmp	r0, #2
 8003080:	d9f5      	bls.n	800306e <HAL_RCC_OscConfig+0x2de>
 8003082:	e6c9      	b.n	8002e18 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003084:	4d48      	ldr	r5, [pc, #288]	; (80031a8 <HAL_RCC_OscConfig+0x418>)
 8003086:	68ab      	ldr	r3, [r5, #8]
 8003088:	f003 030c 	and.w	r3, r3, #12
 800308c:	2b0c      	cmp	r3, #12
 800308e:	d057      	beq.n	8003140 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_DISABLE();
 8003090:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003092:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003094:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003098:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800309a:	d13a      	bne.n	8003112 <HAL_RCC_OscConfig+0x382>
        tickstart = HAL_GetTick();
 800309c:	f7fe ff4e 	bl	8001f3c <HAL_GetTick>
 80030a0:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030a2:	682b      	ldr	r3, [r5, #0]
 80030a4:	0199      	lsls	r1, r3, #6
 80030a6:	d42e      	bmi.n	8003106 <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030a8:	68ea      	ldr	r2, [r5, #12]
 80030aa:	4b40      	ldr	r3, [pc, #256]	; (80031ac <HAL_RCC_OscConfig+0x41c>)
 80030ac:	4013      	ands	r3, r2
 80030ae:	6a22      	ldr	r2, [r4, #32]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80030b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80030b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80030ba:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 80030be:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80030c0:	3a01      	subs	r2, #1
 80030c2:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80030c6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80030c8:	0852      	lsrs	r2, r2, #1
 80030ca:	3a01      	subs	r2, #1
 80030cc:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80030d0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80030d2:	0852      	lsrs	r2, r2, #1
 80030d4:	3a01      	subs	r2, #1
 80030d6:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80030da:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 80030dc:	682b      	ldr	r3, [r5, #0]
 80030de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030e2:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030e4:	68eb      	ldr	r3, [r5, #12]
 80030e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030ea:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 80030ec:	f7fe ff26 	bl	8001f3c <HAL_GetTick>
 80030f0:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030f2:	682b      	ldr	r3, [r5, #0]
 80030f4:	019a      	lsls	r2, r3, #6
 80030f6:	f53f ae65 	bmi.w	8002dc4 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030fa:	f7fe ff1f 	bl	8001f3c <HAL_GetTick>
 80030fe:	1b00      	subs	r0, r0, r4
 8003100:	2802      	cmp	r0, #2
 8003102:	d9f6      	bls.n	80030f2 <HAL_RCC_OscConfig+0x362>
 8003104:	e688      	b.n	8002e18 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003106:	f7fe ff19 	bl	8001f3c <HAL_GetTick>
 800310a:	1b80      	subs	r0, r0, r6
 800310c:	2802      	cmp	r0, #2
 800310e:	d9c8      	bls.n	80030a2 <HAL_RCC_OscConfig+0x312>
 8003110:	e682      	b.n	8002e18 <HAL_RCC_OscConfig+0x88>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003112:	68eb      	ldr	r3, [r5, #12]
 8003114:	f023 0303 	bic.w	r3, r3, #3
 8003118:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800311a:	68eb      	ldr	r3, [r5, #12]
 800311c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003120:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003124:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8003126:	f7fe ff09 	bl	8001f3c <HAL_GetTick>
 800312a:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800312c:	682b      	ldr	r3, [r5, #0]
 800312e:	019b      	lsls	r3, r3, #6
 8003130:	f57f ae48 	bpl.w	8002dc4 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003134:	f7fe ff02 	bl	8001f3c <HAL_GetTick>
 8003138:	1b00      	subs	r0, r0, r4
 800313a:	2802      	cmp	r0, #2
 800313c:	d9f6      	bls.n	800312c <HAL_RCC_OscConfig+0x39c>
 800313e:	e66b      	b.n	8002e18 <HAL_RCC_OscConfig+0x88>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003140:	2801      	cmp	r0, #1
 8003142:	f43f ae6a 	beq.w	8002e1a <HAL_RCC_OscConfig+0x8a>
      temp_pllckcfg = RCC->PLLCFGR;
 8003146:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003148:	6a22      	ldr	r2, [r4, #32]
 800314a:	f003 0103 	and.w	r1, r3, #3
 800314e:	4291      	cmp	r1, r2
 8003150:	f47f ae4b 	bne.w	8002dea <HAL_RCC_OscConfig+0x5a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003154:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003156:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800315a:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800315c:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8003160:	f47f ae43 	bne.w	8002dea <HAL_RCC_OscConfig+0x5a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003164:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003166:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800316a:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800316e:	f47f ae3c 	bne.w	8002dea <HAL_RCC_OscConfig+0x5a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003172:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003174:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003178:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 800317c:	f47f ae35 	bne.w	8002dea <HAL_RCC_OscConfig+0x5a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003180:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003182:	0852      	lsrs	r2, r2, #1
 8003184:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8003188:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800318a:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800318e:	f47f ae2c 	bne.w	8002dea <HAL_RCC_OscConfig+0x5a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003192:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003194:	0852      	lsrs	r2, r2, #1
 8003196:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800319a:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800319c:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 80031a0:	f43f ae10 	beq.w	8002dc4 <HAL_RCC_OscConfig+0x34>
 80031a4:	e621      	b.n	8002dea <HAL_RCC_OscConfig+0x5a>
 80031a6:	bf00      	nop
 80031a8:	40021000 	.word	0x40021000
 80031ac:	019f800c 	.word	0x019f800c

080031b0 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80031b0:	4b17      	ldr	r3, [pc, #92]	; (8003210 <HAL_RCC_GetSysClockFreq+0x60>)
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	f002 020c 	and.w	r2, r2, #12
 80031b8:	2a04      	cmp	r2, #4
 80031ba:	d023      	beq.n	8003204 <HAL_RCC_GetSysClockFreq+0x54>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80031bc:	689a      	ldr	r2, [r3, #8]
 80031be:	f002 020c 	and.w	r2, r2, #12
 80031c2:	2a08      	cmp	r2, #8
 80031c4:	d020      	beq.n	8003208 <HAL_RCC_GetSysClockFreq+0x58>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	f002 020c 	and.w	r2, r2, #12
 80031cc:	2a0c      	cmp	r2, #12
 80031ce:	d11d      	bne.n	800320c <HAL_RCC_GetSysClockFreq+0x5c>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031d0:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031d2:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
      break;

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031d4:	68d8      	ldr	r0, [r3, #12]
      break;
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031d6:	68db      	ldr	r3, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031d8:	f001 0103 	and.w	r1, r1, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031dc:	f3c3 6341 	ubfx	r3, r3, #25, #2
    switch (pllsource)
 80031e0:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031e2:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031e6:	f3c0 2006 	ubfx	r0, r0, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031ea:	f103 0301 	add.w	r3, r3, #1
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031ee:	bf0c      	ite	eq
 80031f0:	4908      	ldreq	r1, [pc, #32]	; (8003214 <HAL_RCC_GetSysClockFreq+0x64>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031f2:	4909      	ldrne	r1, [pc, #36]	; (8003218 <HAL_RCC_GetSysClockFreq+0x68>)
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031f4:	005b      	lsls	r3, r3, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031f6:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031f8:	fbb1 f2f2 	udiv	r2, r1, r2
 80031fc:	4350      	muls	r0, r2
    sysclockfreq = pllvco/pllr;
 80031fe:	fbb0 f0f3 	udiv	r0, r0, r3
  else
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
 8003202:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8003204:	4804      	ldr	r0, [pc, #16]	; (8003218 <HAL_RCC_GetSysClockFreq+0x68>)
 8003206:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8003208:	4802      	ldr	r0, [pc, #8]	; (8003214 <HAL_RCC_GetSysClockFreq+0x64>)
 800320a:	4770      	bx	lr
    sysclockfreq = 0U;
 800320c:	2000      	movs	r0, #0
}
 800320e:	4770      	bx	lr
 8003210:	40021000 	.word	0x40021000
 8003214:	016e3600 	.word	0x016e3600
 8003218:	00f42400 	.word	0x00f42400

0800321c <HAL_RCC_ClockConfig>:
{
 800321c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003220:	460e      	mov	r6, r1
  if (RCC_ClkInitStruct == NULL)
 8003222:	4605      	mov	r5, r0
 8003224:	b910      	cbnz	r0, 800322c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003226:	2001      	movs	r0, #1
}
 8003228:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800322c:	4a6d      	ldr	r2, [pc, #436]	; (80033e4 <HAL_RCC_ClockConfig+0x1c8>)
 800322e:	6813      	ldr	r3, [r2, #0]
 8003230:	f003 030f 	and.w	r3, r3, #15
 8003234:	428b      	cmp	r3, r1
 8003236:	d345      	bcc.n	80032c4 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003238:	6829      	ldr	r1, [r5, #0]
 800323a:	f011 0801 	ands.w	r8, r1, #1
 800323e:	d14c      	bne.n	80032da <HAL_RCC_ClockConfig+0xbe>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003240:	682a      	ldr	r2, [r5, #0]
 8003242:	0791      	lsls	r1, r2, #30
 8003244:	f140 80a7 	bpl.w	8003396 <HAL_RCC_ClockConfig+0x17a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003248:	4b67      	ldr	r3, [pc, #412]	; (80033e8 <HAL_RCC_ClockConfig+0x1cc>)
 800324a:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800324e:	bf1e      	ittt	ne
 8003250:	6899      	ldrne	r1, [r3, #8]
 8003252:	f441 61e0 	orrne.w	r1, r1, #1792	; 0x700
 8003256:	6099      	strne	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003258:	0712      	lsls	r2, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800325a:	bf41      	itttt	mi
 800325c:	689a      	ldrmi	r2, [r3, #8]
 800325e:	f422 527c 	bicmi.w	r2, r2, #16128	; 0x3f00
 8003262:	f442 62e0 	orrmi.w	r2, r2, #1792	; 0x700
 8003266:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003268:	689a      	ldr	r2, [r3, #8]
 800326a:	68a9      	ldr	r1, [r5, #8]
 800326c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003270:	430a      	orrs	r2, r1
 8003272:	609a      	str	r2, [r3, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003274:	4c5b      	ldr	r4, [pc, #364]	; (80033e4 <HAL_RCC_ClockConfig+0x1c8>)
 8003276:	6823      	ldr	r3, [r4, #0]
 8003278:	f003 030f 	and.w	r3, r3, #15
 800327c:	42b3      	cmp	r3, r6
 800327e:	f200 8093 	bhi.w	80033a8 <HAL_RCC_ClockConfig+0x18c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003282:	682a      	ldr	r2, [r5, #0]
 8003284:	4c58      	ldr	r4, [pc, #352]	; (80033e8 <HAL_RCC_ClockConfig+0x1cc>)
 8003286:	f012 0f04 	tst.w	r2, #4
 800328a:	f040 80a3 	bne.w	80033d4 <HAL_RCC_ClockConfig+0x1b8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800328e:	0713      	lsls	r3, r2, #28
 8003290:	d506      	bpl.n	80032a0 <HAL_RCC_ClockConfig+0x84>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003292:	68a3      	ldr	r3, [r4, #8]
 8003294:	692a      	ldr	r2, [r5, #16]
 8003296:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800329a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800329e:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032a0:	f7ff ff86 	bl	80031b0 <HAL_RCC_GetSysClockFreq>
 80032a4:	68a3      	ldr	r3, [r4, #8]
 80032a6:	4a51      	ldr	r2, [pc, #324]	; (80033ec <HAL_RCC_ClockConfig+0x1d0>)
 80032a8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80032ac:	5cd3      	ldrb	r3, [r2, r3]
 80032ae:	f003 031f 	and.w	r3, r3, #31
 80032b2:	40d8      	lsrs	r0, r3
 80032b4:	4b4e      	ldr	r3, [pc, #312]	; (80033f0 <HAL_RCC_ClockConfig+0x1d4>)
 80032b6:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 80032b8:	4b4e      	ldr	r3, [pc, #312]	; (80033f4 <HAL_RCC_ClockConfig+0x1d8>)
 80032ba:	6818      	ldr	r0, [r3, #0]
}
 80032bc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 80032c0:	f7fe bdfa 	b.w	8001eb8 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032c4:	6813      	ldr	r3, [r2, #0]
 80032c6:	f023 030f 	bic.w	r3, r3, #15
 80032ca:	430b      	orrs	r3, r1
 80032cc:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ce:	6813      	ldr	r3, [r2, #0]
 80032d0:	f003 030f 	and.w	r3, r3, #15
 80032d4:	428b      	cmp	r3, r1
 80032d6:	d1a6      	bne.n	8003226 <HAL_RCC_ClockConfig+0xa>
 80032d8:	e7ae      	b.n	8003238 <HAL_RCC_ClockConfig+0x1c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032da:	686f      	ldr	r7, [r5, #4]
 80032dc:	4c42      	ldr	r4, [pc, #264]	; (80033e8 <HAL_RCC_ClockConfig+0x1cc>)
 80032de:	2f03      	cmp	r7, #3
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032e0:	6823      	ldr	r3, [r4, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032e2:	d149      	bne.n	8003378 <HAL_RCC_ClockConfig+0x15c>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032e4:	019b      	lsls	r3, r3, #6
 80032e6:	d59e      	bpl.n	8003226 <HAL_RCC_ClockConfig+0xa>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032e8:	68e3      	ldr	r3, [r4, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032ea:	68e2      	ldr	r2, [r4, #12]
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032ec:	f003 0303 	and.w	r3, r3, #3

  switch (pllsource)
 80032f0:	2b03      	cmp	r3, #3
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032f2:	68e3      	ldr	r3, [r4, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032f4:	bf0c      	ite	eq
 80032f6:	4840      	ldreq	r0, [pc, #256]	; (80033f8 <HAL_RCC_ClockConfig+0x1dc>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032f8:	4840      	ldrne	r0, [pc, #256]	; (80033fc <HAL_RCC_ClockConfig+0x1e0>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032fa:	f3c2 1203 	ubfx	r2, r2, #4, #4
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032fe:	f3c3 2306 	ubfx	r3, r3, #8, #7
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003302:	3201      	adds	r2, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003304:	fbb0 f2f2 	udiv	r2, r0, r2
 8003308:	4353      	muls	r3, r2
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800330a:	68e2      	ldr	r2, [r4, #12]
 800330c:	f3c2 6241 	ubfx	r2, r2, #25, #2
 8003310:	3201      	adds	r2, #1
 8003312:	0052      	lsls	r2, r2, #1
  sysclockfreq = pllvco/pllr;
 8003314:	fbb3 f3f2 	udiv	r3, r3, r2
      if(pllfreq > 80000000U)
 8003318:	4a39      	ldr	r2, [pc, #228]	; (8003400 <HAL_RCC_ClockConfig+0x1e4>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d81a      	bhi.n	8003354 <HAL_RCC_ClockConfig+0x138>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800331e:	f04f 0800 	mov.w	r8, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003322:	68a3      	ldr	r3, [r4, #8]
 8003324:	f023 0303 	bic.w	r3, r3, #3
 8003328:	433b      	orrs	r3, r7
 800332a:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800332c:	f7fe fe06 	bl	8001f3c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003330:	f241 3988 	movw	r9, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003334:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003336:	68a3      	ldr	r3, [r4, #8]
 8003338:	686a      	ldr	r2, [r5, #4]
 800333a:	f003 030c 	and.w	r3, r3, #12
 800333e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003342:	f43f af7d 	beq.w	8003240 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003346:	f7fe fdf9 	bl	8001f3c <HAL_GetTick>
 800334a:	1bc0      	subs	r0, r0, r7
 800334c:	4548      	cmp	r0, r9
 800334e:	d9f2      	bls.n	8003336 <HAL_RCC_ClockConfig+0x11a>
        return HAL_TIMEOUT;
 8003350:	2003      	movs	r0, #3
 8003352:	e769      	b.n	8003228 <HAL_RCC_ClockConfig+0xc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003354:	68a3      	ldr	r3, [r4, #8]
 8003356:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800335a:	d004      	beq.n	8003366 <HAL_RCC_ClockConfig+0x14a>
 800335c:	0788      	lsls	r0, r1, #30
 800335e:	d5de      	bpl.n	800331e <HAL_RCC_ClockConfig+0x102>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003360:	68ab      	ldr	r3, [r5, #8]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1db      	bne.n	800331e <HAL_RCC_ClockConfig+0x102>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003366:	68a3      	ldr	r3, [r4, #8]
 8003368:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800336c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003370:	60a3      	str	r3, [r4, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003372:	f04f 0880 	mov.w	r8, #128	; 0x80
 8003376:	e7d4      	b.n	8003322 <HAL_RCC_ClockConfig+0x106>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003378:	2f02      	cmp	r7, #2
 800337a:	d109      	bne.n	8003390 <HAL_RCC_ClockConfig+0x174>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800337c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003380:	f43f af51 	beq.w	8003226 <HAL_RCC_ClockConfig+0xa>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003384:	f7ff ff14 	bl	80031b0 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8003388:	4b1d      	ldr	r3, [pc, #116]	; (8003400 <HAL_RCC_ClockConfig+0x1e4>)
 800338a:	4298      	cmp	r0, r3
 800338c:	d9c7      	bls.n	800331e <HAL_RCC_ClockConfig+0x102>
 800338e:	e7ea      	b.n	8003366 <HAL_RCC_ClockConfig+0x14a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003390:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003394:	e7f4      	b.n	8003380 <HAL_RCC_ClockConfig+0x164>
    if(hpre == RCC_SYSCLK_DIV2)
 8003396:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800339a:	bf01      	itttt	eq
 800339c:	4a12      	ldreq	r2, [pc, #72]	; (80033e8 <HAL_RCC_ClockConfig+0x1cc>)
 800339e:	6893      	ldreq	r3, [r2, #8]
 80033a0:	f023 03f0 	biceq.w	r3, r3, #240	; 0xf0
 80033a4:	6093      	streq	r3, [r2, #8]
 80033a6:	e765      	b.n	8003274 <HAL_RCC_ClockConfig+0x58>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a8:	6823      	ldr	r3, [r4, #0]
 80033aa:	f023 030f 	bic.w	r3, r3, #15
 80033ae:	4333      	orrs	r3, r6
 80033b0:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80033b2:	f7fe fdc3 	bl	8001f3c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033b6:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80033ba:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033bc:	6823      	ldr	r3, [r4, #0]
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	42b3      	cmp	r3, r6
 80033c4:	f43f af5d 	beq.w	8003282 <HAL_RCC_ClockConfig+0x66>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c8:	f7fe fdb8 	bl	8001f3c <HAL_GetTick>
 80033cc:	1bc0      	subs	r0, r0, r7
 80033ce:	4540      	cmp	r0, r8
 80033d0:	d9f4      	bls.n	80033bc <HAL_RCC_ClockConfig+0x1a0>
 80033d2:	e7bd      	b.n	8003350 <HAL_RCC_ClockConfig+0x134>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033d4:	68a3      	ldr	r3, [r4, #8]
 80033d6:	68e9      	ldr	r1, [r5, #12]
 80033d8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80033dc:	430b      	orrs	r3, r1
 80033de:	60a3      	str	r3, [r4, #8]
 80033e0:	e755      	b.n	800328e <HAL_RCC_ClockConfig+0x72>
 80033e2:	bf00      	nop
 80033e4:	40022000 	.word	0x40022000
 80033e8:	40021000 	.word	0x40021000
 80033ec:	08005f50 	.word	0x08005f50
 80033f0:	20000000 	.word	0x20000000
 80033f4:	20000008 	.word	0x20000008
 80033f8:	016e3600 	.word	0x016e3600
 80033fc:	00f42400 	.word	0x00f42400
 8003400:	04c4b400 	.word	0x04c4b400

08003404 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003404:	4b05      	ldr	r3, [pc, #20]	; (800341c <HAL_RCC_GetPCLK1Freq+0x18>)
 8003406:	4a06      	ldr	r2, [pc, #24]	; (8003420 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800340e:	5cd3      	ldrb	r3, [r2, r3]
 8003410:	4a04      	ldr	r2, [pc, #16]	; (8003424 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003412:	6810      	ldr	r0, [r2, #0]
 8003414:	f003 031f 	and.w	r3, r3, #31
}
 8003418:	40d8      	lsrs	r0, r3
 800341a:	4770      	bx	lr
 800341c:	40021000 	.word	0x40021000
 8003420:	08005f60 	.word	0x08005f60
 8003424:	20000000 	.word	0x20000000

08003428 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003428:	4b05      	ldr	r3, [pc, #20]	; (8003440 <HAL_RCC_GetPCLK2Freq+0x18>)
 800342a:	4a06      	ldr	r2, [pc, #24]	; (8003444 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003432:	5cd3      	ldrb	r3, [r2, r3]
 8003434:	4a04      	ldr	r2, [pc, #16]	; (8003448 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003436:	6810      	ldr	r0, [r2, #0]
 8003438:	f003 031f 	and.w	r3, r3, #31
}
 800343c:	40d8      	lsrs	r0, r3
 800343e:	4770      	bx	lr
 8003440:	40021000 	.word	0x40021000
 8003444:	08005f60 	.word	0x08005f60
 8003448:	20000000 	.word	0x20000000

0800344c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800344c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003450:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003452:	6800      	ldr	r0, [r0, #0]
 8003454:	f410 2000 	ands.w	r0, r0, #524288	; 0x80000
 8003458:	d039      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x82>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800345a:	4d99      	ldr	r5, [pc, #612]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 800345c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800345e:	00d8      	lsls	r0, r3, #3
 8003460:	d427      	bmi.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003462:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003468:	65ab      	str	r3, [r5, #88]	; 0x58
 800346a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800346c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003470:	9301      	str	r3, [sp, #4]
 8003472:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003474:	2601      	movs	r6, #1
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003476:	4f93      	ldr	r7, [pc, #588]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800347e:	603b      	str	r3, [r7, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003480:	f7fe fd5c 	bl	8001f3c <HAL_GetTick>
 8003484:	4680      	mov	r8, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	05d9      	lsls	r1, r3, #23
 800348a:	d514      	bpl.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800348c:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003490:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003492:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003496:	d002      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003498:	4293      	cmp	r3, r2
 800349a:	f040 80eb 	bne.w	8003674 <HAL_RCCEx_PeriphCLKConfig+0x228>
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800349e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80034a2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80034a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034a8:	4313      	orrs	r3, r2
 80034aa:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034ae:	2000      	movs	r0, #0
 80034b0:	e008      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;
 80034b2:	2600      	movs	r6, #0
 80034b4:	e7df      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034b6:	f7fe fd41 	bl	8001f3c <HAL_GetTick>
 80034ba:	eba0 0008 	sub.w	r0, r0, r8
 80034be:	2802      	cmp	r0, #2
 80034c0:	d9e1      	bls.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c2:	2003      	movs	r0, #3
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034c4:	b11e      	cbz	r6, 80034ce <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80034c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034cc:	65ab      	str	r3, [r5, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034ce:	6823      	ldr	r3, [r4, #0]
 80034d0:	07de      	lsls	r6, r3, #31
 80034d2:	d508      	bpl.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034d4:	497a      	ldr	r1, [pc, #488]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80034d6:	6865      	ldr	r5, [r4, #4]
 80034d8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80034dc:	f022 0203 	bic.w	r2, r2, #3
 80034e0:	432a      	orrs	r2, r5
 80034e2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034e6:	079d      	lsls	r5, r3, #30
 80034e8:	d508      	bpl.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034ea:	4975      	ldr	r1, [pc, #468]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80034ec:	68a5      	ldr	r5, [r4, #8]
 80034ee:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80034f2:	f022 020c 	bic.w	r2, r2, #12
 80034f6:	432a      	orrs	r2, r5
 80034f8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034fc:	0759      	lsls	r1, r3, #29
 80034fe:	d508      	bpl.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003500:	496f      	ldr	r1, [pc, #444]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8003502:	68e5      	ldr	r5, [r4, #12]
 8003504:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003508:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800350c:	432a      	orrs	r2, r5
 800350e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003512:	071a      	lsls	r2, r3, #28
 8003514:	d508      	bpl.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0xdc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003516:	496a      	ldr	r1, [pc, #424]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8003518:	6925      	ldr	r5, [r4, #16]
 800351a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800351e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003522:	432a      	orrs	r2, r5
 8003524:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003528:	069f      	lsls	r7, r3, #26
 800352a:	d508      	bpl.n	800353e <HAL_RCCEx_PeriphCLKConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800352c:	4964      	ldr	r1, [pc, #400]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 800352e:	6965      	ldr	r5, [r4, #20]
 8003530:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003534:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003538:	432a      	orrs	r2, r5
 800353a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800353e:	065e      	lsls	r6, r3, #25
 8003540:	d508      	bpl.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003542:	495f      	ldr	r1, [pc, #380]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8003544:	69a5      	ldr	r5, [r4, #24]
 8003546:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800354a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800354e:	432a      	orrs	r2, r5
 8003550:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003554:	061d      	lsls	r5, r3, #24
 8003556:	d508      	bpl.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003558:	4959      	ldr	r1, [pc, #356]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 800355a:	69e5      	ldr	r5, [r4, #28]
 800355c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003560:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003564:	432a      	orrs	r2, r5
 8003566:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800356a:	05d9      	lsls	r1, r3, #23
 800356c:	d508      	bpl.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800356e:	4954      	ldr	r1, [pc, #336]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8003570:	6a25      	ldr	r5, [r4, #32]
 8003572:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003576:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800357a:	432a      	orrs	r2, r5
 800357c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003580:	059a      	lsls	r2, r3, #22
 8003582:	d508      	bpl.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003584:	494e      	ldr	r1, [pc, #312]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8003586:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003588:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800358c:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8003590:	432a      	orrs	r2, r5
 8003592:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003596:	055f      	lsls	r7, r3, #21
 8003598:	d50f      	bpl.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800359a:	4949      	ldr	r1, [pc, #292]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 800359c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800359e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80035a2:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80035a6:	432a      	orrs	r2, r5
 80035a8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80035ac:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035b0:	bf02      	ittt	eq
 80035b2:	68ca      	ldreq	r2, [r1, #12]
 80035b4:	f442 1280 	orreq.w	r2, r2, #1048576	; 0x100000
 80035b8:	60ca      	streq	r2, [r1, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80035ba:	051e      	lsls	r6, r3, #20
 80035bc:	d50f      	bpl.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80035be:	4940      	ldr	r1, [pc, #256]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80035c0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80035c2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80035c6:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80035ca:	432a      	orrs	r2, r5
 80035cc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80035d0:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035d4:	bf02      	ittt	eq
 80035d6:	68ca      	ldreq	r2, [r1, #12]
 80035d8:	f442 1280 	orreq.w	r2, r2, #1048576	; 0x100000
 80035dc:	60ca      	streq	r2, [r1, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80035de:	04dd      	lsls	r5, r3, #19
 80035e0:	d50f      	bpl.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80035e2:	4937      	ldr	r1, [pc, #220]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80035e4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80035e6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80035ea:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80035ee:	432a      	orrs	r2, r5
 80035f0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80035f4:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035f8:	bf02      	ittt	eq
 80035fa:	68ca      	ldreq	r2, [r1, #12]
 80035fc:	f442 1280 	orreq.w	r2, r2, #1048576	; 0x100000
 8003600:	60ca      	streq	r2, [r1, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003602:	0499      	lsls	r1, r3, #18
 8003604:	d50f      	bpl.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003606:	492e      	ldr	r1, [pc, #184]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8003608:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800360a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800360e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8003612:	432a      	orrs	r2, r5
 8003614:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003618:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800361c:	bf02      	ittt	eq
 800361e:	68ca      	ldreq	r2, [r1, #12]
 8003620:	f442 1280 	orreq.w	r2, r2, #1048576	; 0x100000
 8003624:	60ca      	streq	r2, [r1, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003626:	045a      	lsls	r2, r3, #17
 8003628:	d50f      	bpl.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800362a:	4925      	ldr	r1, [pc, #148]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 800362c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800362e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003632:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8003636:	432a      	orrs	r2, r5
 8003638:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800363c:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003640:	bf02      	ittt	eq
 8003642:	68ca      	ldreq	r2, [r1, #12]
 8003644:	f442 1280 	orreq.w	r2, r2, #1048576	; 0x100000
 8003648:	60ca      	streq	r2, [r1, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800364a:	041b      	lsls	r3, r3, #16
 800364c:	d50f      	bpl.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800364e:	4a1c      	ldr	r2, [pc, #112]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8003650:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003652:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003656:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800365a:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800365c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003660:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003664:	d103      	bne.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x222>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003666:	68d3      	ldr	r3, [r2, #12]
 8003668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800366c:	60d3      	str	r3, [r2, #12]
  }

#endif /* QUADSPI */

  return status;
}
 800366e:	b002      	add	sp, #8
 8003670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003674:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8003678:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800367c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003680:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003684:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003688:	f422 7140 	bic.w	r1, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 800368c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003690:	07d2      	lsls	r2, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003692:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8003696:	f8c5 1090 	str.w	r1, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800369a:	f57f af00 	bpl.w	800349e <HAL_RCCEx_PeriphCLKConfig+0x52>
        tickstart = HAL_GetTick();
 800369e:	f7fe fc4d 	bl	8001f3c <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a2:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80036a6:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036a8:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80036ac:	079b      	lsls	r3, r3, #30
 80036ae:	f53f aef6 	bmi.w	800349e <HAL_RCCEx_PeriphCLKConfig+0x52>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036b2:	f7fe fc43 	bl	8001f3c <HAL_GetTick>
 80036b6:	1bc0      	subs	r0, r0, r7
 80036b8:	4540      	cmp	r0, r8
 80036ba:	d9f5      	bls.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x25c>
 80036bc:	e701      	b.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036be:	bf00      	nop
 80036c0:	40021000 	.word	0x40021000
 80036c4:	40007000 	.word	0x40007000

080036c8 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80036c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80036cc:	461c      	mov	r4, r3
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80036ce:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80036d0:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 80036d2:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80036d6:	4605      	mov	r5, r0
 80036d8:	460e      	mov	r6, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80036da:	f7fe fc2f 	bl	8001f3c <HAL_GetTick>
 80036de:	443c      	add	r4, r7
 80036e0:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 80036e2:	f7fe fc2b 	bl	8001f3c <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80036e6:	4b29      	ldr	r3, [pc, #164]	; (800378c <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc4>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80036e8:	f8d5 9000 	ldr.w	r9, [r5]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2223      	movs	r2, #35	; 0x23
 80036f0:	4353      	muls	r3, r2
 80036f2:	0d1b      	lsrs	r3, r3, #20
  tmp_tickstart = HAL_GetTick();
 80036f4:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80036f6:	4363      	muls	r3, r4

  while ((hspi->Instance->SR & Fifo) != State)
 80036f8:	682a      	ldr	r2, [r5, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 80036fa:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 80036fc:	6893      	ldr	r3, [r2, #8]
 80036fe:	4033      	ands	r3, r6
 8003700:	d101      	bne.n	8003706 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x3e>
    }
  }

  return HAL_OK;
 8003702:	4618      	mov	r0, r3
 8003704:	e038      	b.n	8003778 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb0>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003706:	f5b6 6fc0 	cmp.w	r6, #1536	; 0x600
      tmpreg8 = *ptmpreg8;
 800370a:	bf01      	itttt	eq
 800370c:	f899 300c 	ldrbeq.w	r3, [r9, #12]
 8003710:	b2db      	uxtbeq	r3, r3
 8003712:	f88d 3003 	strbeq.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8003716:	f89d 3003 	ldrbeq.w	r3, [sp, #3]
    if (Timeout != HAL_MAX_DELAY)
 800371a:	1c7b      	adds	r3, r7, #1
 800371c:	d0ee      	beq.n	80036fc <SPI_WaitFifoStateUntilTimeout.constprop.0+0x34>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800371e:	f7fe fc0d 	bl	8001f3c <HAL_GetTick>
 8003722:	eba0 0008 	sub.w	r0, r0, r8
 8003726:	42a0      	cmp	r0, r4
 8003728:	d329      	bcc.n	800377e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb6>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800372a:	682b      	ldr	r3, [r5, #0]
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003732:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003734:	686a      	ldr	r2, [r5, #4]
 8003736:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800373a:	d10a      	bne.n	8003752 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8a>
 800373c:	68aa      	ldr	r2, [r5, #8]
 800373e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003742:	d002      	beq.n	800374a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x82>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003744:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003748:	d103      	bne.n	8003752 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8a>
          __HAL_SPI_DISABLE(hspi);
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003750:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003752:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8003754:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003758:	d107      	bne.n	800376a <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa2>
          SPI_RESET_CRC(hspi);
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003760:	601a      	str	r2, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003768:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800376a:	2301      	movs	r3, #1
 800376c:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8003770:	2300      	movs	r3, #0
 8003772:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 8003776:	2003      	movs	r0, #3
}
 8003778:	b003      	add	sp, #12
 800377a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (count == 0U)
 800377e:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8003780:	2b00      	cmp	r3, #0
      count--;
 8003782:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8003784:	bf08      	it	eq
 8003786:	2400      	moveq	r4, #0
      count--;
 8003788:	3b01      	subs	r3, #1
 800378a:	e7b5      	b.n	80036f8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x30>
 800378c:	20000000 	.word	0x20000000

08003790 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8003790:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003792:	460e      	mov	r6, r1
 8003794:	4614      	mov	r4, r2
 8003796:	4605      	mov	r5, r0
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003798:	f7fe fbd0 	bl	8001f3c <HAL_GetTick>
 800379c:	4434      	add	r4, r6
 800379e:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 80037a0:	f7fe fbcc 	bl	8001f3c <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80037a4:	4b22      	ldr	r3, [pc, #136]	; (8003830 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa0>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f3c3 33cb 	ubfx	r3, r3, #15, #12
  tmp_tickstart = HAL_GetTick();
 80037ac:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80037ae:	4363      	muls	r3, r4
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037b0:	682a      	ldr	r2, [r5, #0]
      count--;
 80037b2:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037b4:	6893      	ldr	r3, [r2, #8]
 80037b6:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 80037ba:	d101      	bne.n	80037c0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x30>
  return HAL_OK;
 80037bc:	4618      	mov	r0, r3
 80037be:	e02d      	b.n	800381c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8c>
    if (Timeout != HAL_MAX_DELAY)
 80037c0:	1c73      	adds	r3, r6, #1
 80037c2:	d0f7      	beq.n	80037b4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80037c4:	f7fe fbba 	bl	8001f3c <HAL_GetTick>
 80037c8:	1bc0      	subs	r0, r0, r7
 80037ca:	42a0      	cmp	r0, r4
 80037cc:	d328      	bcc.n	8003820 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x90>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037ce:	682b      	ldr	r3, [r5, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80037d6:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037d8:	686a      	ldr	r2, [r5, #4]
 80037da:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80037de:	d10a      	bne.n	80037f6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x66>
 80037e0:	68aa      	ldr	r2, [r5, #8]
 80037e2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80037e6:	d002      	beq.n	80037ee <SPI_WaitFlagStateUntilTimeout.constprop.0+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037e8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80037ec:	d103      	bne.n	80037f6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x66>
          __HAL_SPI_DISABLE(hspi);
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037f4:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037f6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80037f8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80037fc:	d107      	bne.n	800380e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7e>
          SPI_RESET_CRC(hspi);
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003804:	601a      	str	r2, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800380c:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800380e:	2301      	movs	r3, #1
 8003810:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8003814:	2300      	movs	r3, #0
 8003816:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 800381a:	2003      	movs	r0, #3
}
 800381c:	b003      	add	sp, #12
 800381e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 8003820:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8003822:	2b00      	cmp	r3, #0
      count--;
 8003824:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8003826:	bf08      	it	eq
 8003828:	2400      	moveq	r4, #0
      count--;
 800382a:	3b01      	subs	r3, #1
 800382c:	e7c0      	b.n	80037b0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x20>
 800382e:	bf00      	nop
 8003830:	20000000 	.word	0x20000000

08003834 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003834:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003836:	4613      	mov	r3, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003838:	9201      	str	r2, [sp, #4]
{
 800383a:	460d      	mov	r5, r1
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800383c:	460a      	mov	r2, r1
 800383e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 8003842:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003844:	f7ff ff40 	bl	80036c8 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8003848:	9b01      	ldr	r3, [sp, #4]
 800384a:	b128      	cbz	r0, 8003858 <SPI_EndRxTxTransaction+0x24>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800384c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800384e:	f043 0320 	orr.w	r3, r3, #32
 8003852:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003854:	2003      	movs	r0, #3
 8003856:	e010      	b.n	800387a <SPI_EndRxTxTransaction+0x46>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003858:	461a      	mov	r2, r3
 800385a:	4629      	mov	r1, r5
 800385c:	4620      	mov	r0, r4
 800385e:	9301      	str	r3, [sp, #4]
 8003860:	f7ff ff96 	bl	8003790 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8003864:	9b01      	ldr	r3, [sp, #4]
 8003866:	2800      	cmp	r0, #0
 8003868:	d1f0      	bne.n	800384c <SPI_EndRxTxTransaction+0x18>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800386a:	462a      	mov	r2, r5
 800386c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003870:	4620      	mov	r0, r4
 8003872:	f7ff ff29 	bl	80036c8 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8003876:	2800      	cmp	r0, #0
 8003878:	d1e8      	bne.n	800384c <SPI_EndRxTxTransaction+0x18>
  }

  return HAL_OK;
}
 800387a:	b003      	add	sp, #12
 800387c:	bd30      	pop	{r4, r5, pc}

0800387e <HAL_SPI_Init>:
{
 800387e:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8003880:	4604      	mov	r4, r0
 8003882:	2800      	cmp	r0, #0
 8003884:	d063      	beq.n	800394e <HAL_SPI_Init+0xd0>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003886:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003888:	2b00      	cmp	r3, #0
 800388a:	d15c      	bne.n	8003946 <HAL_SPI_Init+0xc8>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800388c:	6842      	ldr	r2, [r0, #4]
 800388e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003892:	d000      	beq.n	8003896 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003894:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003896:	2300      	movs	r3, #0
 8003898:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800389a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800389e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80038a2:	b923      	cbnz	r3, 80038ae <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 80038a4:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80038a8:	4620      	mov	r0, r4
 80038aa:	f7fe f86d 	bl	8001988 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 80038ae:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038b0:	68e0      	ldr	r0, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 80038b2:	2302      	movs	r3, #2
 80038b4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80038b8:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038ba:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 80038be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038c2:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038c4:	f04f 0300 	mov.w	r3, #0
 80038c8:	d843      	bhi.n	8003952 <HAL_SPI_Init+0xd4>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80038ca:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80038ce:	d000      	beq.n	80038d2 <HAL_SPI_Init+0x54>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038d0:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038d2:	6863      	ldr	r3, [r4, #4]
 80038d4:	68a6      	ldr	r6, [r4, #8]
 80038d6:	69a1      	ldr	r1, [r4, #24]
 80038d8:	f406 4604 	and.w	r6, r6, #33792	; 0x8400
 80038dc:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80038e0:	4333      	orrs	r3, r6
 80038e2:	6926      	ldr	r6, [r4, #16]
 80038e4:	f006 0602 	and.w	r6, r6, #2
 80038e8:	4333      	orrs	r3, r6
 80038ea:	6966      	ldr	r6, [r4, #20]
 80038ec:	f006 0601 	and.w	r6, r6, #1
 80038f0:	4333      	orrs	r3, r6
 80038f2:	f401 7600 	and.w	r6, r1, #512	; 0x200
 80038f6:	4333      	orrs	r3, r6
 80038f8:	69e6      	ldr	r6, [r4, #28]
 80038fa:	f006 0638 	and.w	r6, r6, #56	; 0x38
 80038fe:	4333      	orrs	r3, r6
 8003900:	6a26      	ldr	r6, [r4, #32]
 8003902:	f006 0680 	and.w	r6, r6, #128	; 0x80
 8003906:	4333      	orrs	r3, r6
 8003908:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800390a:	f406 5600 	and.w	r6, r6, #8192	; 0x2000
 800390e:	4333      	orrs	r3, r6
 8003910:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003912:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8003914:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003916:	f006 0608 	and.w	r6, r6, #8
 800391a:	f003 0310 	and.w	r3, r3, #16
 800391e:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
 8003922:	4333      	orrs	r3, r6
 8003924:	0c09      	lsrs	r1, r1, #16
 8003926:	4303      	orrs	r3, r0
 8003928:	f001 0104 	and.w	r1, r1, #4
 800392c:	430b      	orrs	r3, r1
 800392e:	432b      	orrs	r3, r5
 8003930:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003932:	69d3      	ldr	r3, [r2, #28]
 8003934:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003938:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800393a:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800393c:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800393e:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003940:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8003944:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003946:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003948:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800394c:	e7a3      	b.n	8003896 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 800394e:	2001      	movs	r0, #1
 8003950:	e7f8      	b.n	8003944 <HAL_SPI_Init+0xc6>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003952:	461d      	mov	r5, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003954:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
 8003958:	e7b9      	b.n	80038ce <HAL_SPI_Init+0x50>

0800395a <HAL_SPI_Transmit>:
{
 800395a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800395e:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8003960:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8003964:	2b01      	cmp	r3, #1
{
 8003966:	4604      	mov	r4, r0
 8003968:	460d      	mov	r5, r1
 800396a:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 800396c:	f000 80b6 	beq.w	8003adc <HAL_SPI_Transmit+0x182>
 8003970:	2301      	movs	r3, #1
 8003972:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8003976:	f7fe fae1 	bl	8001f3c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800397a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800397e:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8003980:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003982:	b2d8      	uxtb	r0, r3
 8003984:	f040 80a8 	bne.w	8003ad8 <HAL_SPI_Transmit+0x17e>
  if ((pData == NULL) || (Size == 0U))
 8003988:	2d00      	cmp	r5, #0
 800398a:	d063      	beq.n	8003a54 <HAL_SPI_Transmit+0xfa>
 800398c:	f1b8 0f00 	cmp.w	r8, #0
 8003990:	d060      	beq.n	8003a54 <HAL_SPI_Transmit+0xfa>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003992:	2303      	movs	r3, #3
 8003994:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003998:	2300      	movs	r3, #0
 800399a:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxISR       = NULL;
 800399c:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  hspi->TxXferCount = Size;
 80039a0:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039a4:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80039a6:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80039aa:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039ae:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 80039b0:	6826      	ldr	r6, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80039b2:	63a5      	str	r5, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  hspi->TxXferSize  = Size;
 80039b8:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039bc:	d107      	bne.n	80039ce <HAL_SPI_Transmit+0x74>
    __HAL_SPI_DISABLE(hspi);
 80039be:	6833      	ldr	r3, [r6, #0]
 80039c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039c4:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 80039c6:	6833      	ldr	r3, [r6, #0]
 80039c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039cc:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039ce:	6833      	ldr	r3, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039d0:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039d2:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 80039d4:	bf5e      	ittt	pl
 80039d6:	6833      	ldrpl	r3, [r6, #0]
 80039d8:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 80039dc:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039de:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039e2:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039e4:	d93f      	bls.n	8003a66 <HAL_SPI_Transmit+0x10c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039e6:	b113      	cbz	r3, 80039ee <HAL_SPI_Transmit+0x94>
 80039e8:	f1b8 0f01 	cmp.w	r8, #1
 80039ec:	d107      	bne.n	80039fe <HAL_SPI_Transmit+0xa4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039ee:	f835 3b02 	ldrh.w	r3, [r5], #2
 80039f2:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039f4:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80039f6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80039f8:	3b01      	subs	r3, #1
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 80039fe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	b9a3      	cbnz	r3, 8003a2e <HAL_SPI_Transmit+0xd4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a04:	464a      	mov	r2, r9
 8003a06:	4639      	mov	r1, r7
 8003a08:	4620      	mov	r0, r4
 8003a0a:	f7ff ff13 	bl	8003834 <SPI_EndRxTxTransaction>
 8003a0e:	2800      	cmp	r0, #0
 8003a10:	d15f      	bne.n	8003ad2 <HAL_SPI_Transmit+0x178>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a12:	68a3      	ldr	r3, [r4, #8]
 8003a14:	b933      	cbnz	r3, 8003a24 <HAL_SPI_Transmit+0xca>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a16:	9301      	str	r3, [sp, #4]
 8003a18:	6823      	ldr	r3, [r4, #0]
 8003a1a:	68da      	ldr	r2, [r3, #12]
 8003a1c:	9201      	str	r2, [sp, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	9301      	str	r3, [sp, #4]
 8003a22:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a24:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8003a26:	3800      	subs	r0, #0
 8003a28:	bf18      	it	ne
 8003a2a:	2001      	movne	r0, #1
error:
 8003a2c:	e012      	b.n	8003a54 <HAL_SPI_Transmit+0xfa>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a2e:	6822      	ldr	r2, [r4, #0]
 8003a30:	6893      	ldr	r3, [r2, #8]
 8003a32:	079d      	lsls	r5, r3, #30
 8003a34:	d505      	bpl.n	8003a42 <HAL_SPI_Transmit+0xe8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a38:	f833 1b02 	ldrh.w	r1, [r3], #2
 8003a3c:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a3e:	63a3      	str	r3, [r4, #56]	; 0x38
 8003a40:	e7d9      	b.n	80039f6 <HAL_SPI_Transmit+0x9c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a42:	f7fe fa7b 	bl	8001f3c <HAL_GetTick>
 8003a46:	eba0 0009 	sub.w	r0, r0, r9
 8003a4a:	42b8      	cmp	r0, r7
 8003a4c:	d3d7      	bcc.n	80039fe <HAL_SPI_Transmit+0xa4>
 8003a4e:	1c78      	adds	r0, r7, #1
 8003a50:	d0d5      	beq.n	80039fe <HAL_SPI_Transmit+0xa4>
          errorcode = HAL_TIMEOUT;
 8003a52:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8003a54:	2301      	movs	r3, #1
 8003a56:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8003a60:	b003      	add	sp, #12
 8003a62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a66:	b113      	cbz	r3, 8003a6e <HAL_SPI_Transmit+0x114>
 8003a68:	f1b8 0f01 	cmp.w	r8, #1
 8003a6c:	d113      	bne.n	8003a96 <HAL_SPI_Transmit+0x13c>
      if (hspi->TxXferCount > 1U)
 8003a6e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d906      	bls.n	8003a84 <HAL_SPI_Transmit+0x12a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a76:	f835 3b02 	ldrh.w	r3, [r5], #2
 8003a7a:	60f3      	str	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a7c:	63a5      	str	r5, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003a7e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003a80:	3b02      	subs	r3, #2
 8003a82:	e006      	b.n	8003a92 <HAL_SPI_Transmit+0x138>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a84:	782b      	ldrb	r3, [r5, #0]
 8003a86:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr ++;
 8003a88:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003a8e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003a90:	3b01      	subs	r3, #1
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8003a96:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d0b2      	beq.n	8003a04 <HAL_SPI_Transmit+0xaa>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a9e:	6822      	ldr	r2, [r4, #0]
 8003aa0:	6893      	ldr	r3, [r2, #8]
 8003aa2:	0799      	lsls	r1, r3, #30
 8003aa4:	d50c      	bpl.n	8003ac0 <HAL_SPI_Transmit+0x166>
        if (hspi->TxXferCount > 1U)
 8003aa6:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003aa8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if (hspi->TxXferCount > 1U)
 8003aaa:	b289      	uxth	r1, r1
 8003aac:	2901      	cmp	r1, #1
 8003aae:	d904      	bls.n	8003aba <HAL_SPI_Transmit+0x160>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ab0:	f833 1b02 	ldrh.w	r1, [r3], #2
 8003ab4:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ab6:	63a3      	str	r3, [r4, #56]	; 0x38
 8003ab8:	e7e1      	b.n	8003a7e <HAL_SPI_Transmit+0x124>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8003abe:	e7e3      	b.n	8003a88 <HAL_SPI_Transmit+0x12e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ac0:	f7fe fa3c 	bl	8001f3c <HAL_GetTick>
 8003ac4:	eba0 0009 	sub.w	r0, r0, r9
 8003ac8:	42b8      	cmp	r0, r7
 8003aca:	d3e4      	bcc.n	8003a96 <HAL_SPI_Transmit+0x13c>
 8003acc:	1c7b      	adds	r3, r7, #1
 8003ace:	d0e2      	beq.n	8003a96 <HAL_SPI_Transmit+0x13c>
 8003ad0:	e7bf      	b.n	8003a52 <HAL_SPI_Transmit+0xf8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ad2:	2320      	movs	r3, #32
 8003ad4:	6623      	str	r3, [r4, #96]	; 0x60
 8003ad6:	e79c      	b.n	8003a12 <HAL_SPI_Transmit+0xb8>
    errorcode = HAL_BUSY;
 8003ad8:	2002      	movs	r0, #2
 8003ada:	e7bb      	b.n	8003a54 <HAL_SPI_Transmit+0xfa>
  __HAL_LOCK(hspi);
 8003adc:	2002      	movs	r0, #2
 8003ade:	e7bf      	b.n	8003a60 <HAL_SPI_Transmit+0x106>

08003ae0 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ae0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d127      	bne.n	8003b38 <HAL_TIM_Base_Start+0x58>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ae8:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aea:	4a14      	ldr	r2, [pc, #80]	; (8003b3c <HAL_TIM_Base_Start+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003aec:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003af0:	6803      	ldr	r3, [r0, #0]
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d012      	beq.n	8003b1c <HAL_TIM_Base_Start+0x3c>
 8003af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003afa:	d00f      	beq.n	8003b1c <HAL_TIM_Base_Start+0x3c>
 8003afc:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d00b      	beq.n	8003b1c <HAL_TIM_Base_Start+0x3c>
 8003b04:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d007      	beq.n	8003b1c <HAL_TIM_Base_Start+0x3c>
 8003b0c:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d003      	beq.n	8003b1c <HAL_TIM_Base_Start+0x3c>
 8003b14:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d107      	bne.n	8003b2c <HAL_TIM_Base_Start+0x4c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b1c:	6899      	ldr	r1, [r3, #8]
 8003b1e:	4a08      	ldr	r2, [pc, #32]	; (8003b40 <HAL_TIM_Base_Start+0x60>)
 8003b20:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b22:	2a06      	cmp	r2, #6
 8003b24:	d006      	beq.n	8003b34 <HAL_TIM_Base_Start+0x54>
 8003b26:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003b2a:	d003      	beq.n	8003b34 <HAL_TIM_Base_Start+0x54>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	f042 0201 	orr.w	r2, r2, #1
 8003b32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b34:	2000      	movs	r0, #0
}
 8003b36:	4770      	bx	lr
    return HAL_ERROR;
 8003b38:	2001      	movs	r0, #1
 8003b3a:	4770      	bx	lr
 8003b3c:	40012c00 	.word	0x40012c00
 8003b40:	00010007 	.word	0x00010007

08003b44 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b44:	4a2c      	ldr	r2, [pc, #176]	; (8003bf8 <TIM_Base_SetConfig+0xb4>)
  tmpcr1 = TIMx->CR1;
 8003b46:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b48:	4290      	cmp	r0, r2
 8003b4a:	d00e      	beq.n	8003b6a <TIM_Base_SetConfig+0x26>
 8003b4c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003b50:	d00b      	beq.n	8003b6a <TIM_Base_SetConfig+0x26>
 8003b52:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003b56:	4290      	cmp	r0, r2
 8003b58:	d007      	beq.n	8003b6a <TIM_Base_SetConfig+0x26>
 8003b5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b5e:	4290      	cmp	r0, r2
 8003b60:	d003      	beq.n	8003b6a <TIM_Base_SetConfig+0x26>
 8003b62:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8003b66:	4290      	cmp	r0, r2
 8003b68:	d115      	bne.n	8003b96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8003b6a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003b70:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b72:	4a21      	ldr	r2, [pc, #132]	; (8003bf8 <TIM_Base_SetConfig+0xb4>)
 8003b74:	4290      	cmp	r0, r2
 8003b76:	d019      	beq.n	8003bac <TIM_Base_SetConfig+0x68>
 8003b78:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003b7c:	d016      	beq.n	8003bac <TIM_Base_SetConfig+0x68>
 8003b7e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003b82:	4290      	cmp	r0, r2
 8003b84:	d012      	beq.n	8003bac <TIM_Base_SetConfig+0x68>
 8003b86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b8a:	4290      	cmp	r0, r2
 8003b8c:	d00e      	beq.n	8003bac <TIM_Base_SetConfig+0x68>
 8003b8e:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8003b92:	4290      	cmp	r0, r2
 8003b94:	d00a      	beq.n	8003bac <TIM_Base_SetConfig+0x68>
 8003b96:	4a19      	ldr	r2, [pc, #100]	; (8003bfc <TIM_Base_SetConfig+0xb8>)
 8003b98:	4290      	cmp	r0, r2
 8003b9a:	d007      	beq.n	8003bac <TIM_Base_SetConfig+0x68>
 8003b9c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003ba0:	4290      	cmp	r0, r2
 8003ba2:	d003      	beq.n	8003bac <TIM_Base_SetConfig+0x68>
 8003ba4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003ba8:	4290      	cmp	r0, r2
 8003baa:	d103      	bne.n	8003bb4 <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bac:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bb2:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bb4:	694a      	ldr	r2, [r1, #20]
 8003bb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bba:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8003bbc:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bbe:	688b      	ldr	r3, [r1, #8]
 8003bc0:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bc2:	680b      	ldr	r3, [r1, #0]
 8003bc4:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bc6:	4b0c      	ldr	r3, [pc, #48]	; (8003bf8 <TIM_Base_SetConfig+0xb4>)
 8003bc8:	4298      	cmp	r0, r3
 8003bca:	d00f      	beq.n	8003bec <TIM_Base_SetConfig+0xa8>
 8003bcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bd0:	4298      	cmp	r0, r3
 8003bd2:	d00b      	beq.n	8003bec <TIM_Base_SetConfig+0xa8>
 8003bd4:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8003bd8:	4298      	cmp	r0, r3
 8003bda:	d007      	beq.n	8003bec <TIM_Base_SetConfig+0xa8>
 8003bdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003be0:	4298      	cmp	r0, r3
 8003be2:	d003      	beq.n	8003bec <TIM_Base_SetConfig+0xa8>
 8003be4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003be8:	4298      	cmp	r0, r3
 8003bea:	d101      	bne.n	8003bf0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bec:	690b      	ldr	r3, [r1, #16]
 8003bee:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	6143      	str	r3, [r0, #20]
}
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	40012c00 	.word	0x40012c00
 8003bfc:	40014000 	.word	0x40014000

08003c00 <HAL_TIM_Base_Init>:
{
 8003c00:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003c02:	4604      	mov	r4, r0
 8003c04:	b350      	cbz	r0, 8003c5c <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003c06:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003c0a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003c0e:	b91b      	cbnz	r3, 8003c18 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003c10:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003c14:	f7fe f8a2 	bl	8001d5c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003c18:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c1a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003c1c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c20:	1d21      	adds	r1, r4, #4
 8003c22:	f7ff ff8f 	bl	8003b44 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c26:	2301      	movs	r3, #1
 8003c28:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 8003c2c:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c2e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003c32:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003c36:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003c3a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003c3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c46:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003c4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c4e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8003c52:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003c56:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003c5a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003c5c:	2001      	movs	r0, #1
 8003c5e:	e7fc      	b.n	8003c5a <HAL_TIM_Base_Init+0x5a>

08003c60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c60:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c62:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c64:	4311      	orrs	r1, r2
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c66:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c6a:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8003c6e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c70:	6083      	str	r3, [r0, #8]
}
 8003c72:	bd10      	pop	{r4, pc}

08003c74 <HAL_TIM_ConfigClockSource>:
{
 8003c74:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003c76:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003c7a:	2b01      	cmp	r3, #1
{
 8003c7c:	4604      	mov	r4, r0
 8003c7e:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8003c82:	f000 80aa 	beq.w	8003dda <HAL_TIM_ConfigClockSource+0x166>
 8003c86:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003c88:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8003c8c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003c90:	6800      	ldr	r0, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c92:	4b53      	ldr	r3, [pc, #332]	; (8003de0 <HAL_TIM_ConfigClockSource+0x16c>)
  tmpsmcr = htim->Instance->SMCR;
 8003c94:	6885      	ldr	r5, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c96:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8003c98:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8003c9a:	680b      	ldr	r3, [r1, #0]
 8003c9c:	2b70      	cmp	r3, #112	; 0x70
 8003c9e:	d056      	beq.n	8003d4e <HAL_TIM_ConfigClockSource+0xda>
 8003ca0:	d83c      	bhi.n	8003d1c <HAL_TIM_ConfigClockSource+0xa8>
 8003ca2:	2b50      	cmp	r3, #80	; 0x50
 8003ca4:	d067      	beq.n	8003d76 <HAL_TIM_ConfigClockSource+0x102>
 8003ca6:	d81d      	bhi.n	8003ce4 <HAL_TIM_ConfigClockSource+0x70>
 8003ca8:	2b40      	cmp	r3, #64	; 0x40
 8003caa:	d07d      	beq.n	8003da8 <HAL_TIM_ConfigClockSource+0x134>
 8003cac:	d806      	bhi.n	8003cbc <HAL_TIM_ConfigClockSource+0x48>
 8003cae:	2b20      	cmp	r3, #32
 8003cb0:	d00e      	beq.n	8003cd0 <HAL_TIM_ConfigClockSource+0x5c>
 8003cb2:	d80b      	bhi.n	8003ccc <HAL_TIM_ConfigClockSource+0x58>
 8003cb4:	f033 0210 	bics.w	r2, r3, #16
 8003cb8:	d00a      	beq.n	8003cd0 <HAL_TIM_ConfigClockSource+0x5c>
 8003cba:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_READY;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003cc8:	4610      	mov	r0, r2
 8003cca:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8003ccc:	2b30      	cmp	r3, #48	; 0x30
 8003cce:	d1f4      	bne.n	8003cba <HAL_TIM_ConfigClockSource+0x46>
  tmpsmcr = TIMx->SMCR;
 8003cd0:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cd2:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003cd6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
 8003ce0:	6082      	str	r2, [r0, #8]
 8003ce2:	e03d      	b.n	8003d60 <HAL_TIM_ConfigClockSource+0xec>
  switch (sClockSourceConfig->ClockSource)
 8003ce4:	2b60      	cmp	r3, #96	; 0x60
 8003ce6:	d1e9      	bne.n	8003cbc <HAL_TIM_ConfigClockSource+0x48>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ce8:	6a03      	ldr	r3, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cea:	684d      	ldr	r5, [r1, #4]
 8003cec:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cee:	f023 0310 	bic.w	r3, r3, #16
 8003cf2:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cf4:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8003cf6:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cf8:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cfc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d00:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d04:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003d08:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003d0a:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003d0c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d0e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d16:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8003d1a:	e020      	b.n	8003d5e <HAL_TIM_ConfigClockSource+0xea>
  switch (sClockSourceConfig->ClockSource)
 8003d1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d20:	d020      	beq.n	8003d64 <HAL_TIM_ConfigClockSource+0xf0>
 8003d22:	d804      	bhi.n	8003d2e <HAL_TIM_ConfigClockSource+0xba>
  HAL_StatusTypeDef status = HAL_OK;
 8003d24:	f5b3 5280 	subs.w	r2, r3, #4096	; 0x1000
 8003d28:	bf18      	it	ne
 8003d2a:	2201      	movne	r2, #1
 8003d2c:	e7c6      	b.n	8003cbc <HAL_TIM_ConfigClockSource+0x48>
  switch (sClockSourceConfig->ClockSource)
 8003d2e:	492d      	ldr	r1, [pc, #180]	; (8003de4 <HAL_TIM_ConfigClockSource+0x170>)
 8003d30:	428b      	cmp	r3, r1
 8003d32:	d0cd      	beq.n	8003cd0 <HAL_TIM_ConfigClockSource+0x5c>
 8003d34:	d806      	bhi.n	8003d44 <HAL_TIM_ConfigClockSource+0xd0>
 8003d36:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003d3a:	d0c9      	beq.n	8003cd0 <HAL_TIM_ConfigClockSource+0x5c>
 8003d3c:	3910      	subs	r1, #16
 8003d3e:	428b      	cmp	r3, r1
 8003d40:	d0c6      	beq.n	8003cd0 <HAL_TIM_ConfigClockSource+0x5c>
 8003d42:	e7bb      	b.n	8003cbc <HAL_TIM_ConfigClockSource+0x48>
 8003d44:	4928      	ldr	r1, [pc, #160]	; (8003de8 <HAL_TIM_ConfigClockSource+0x174>)
 8003d46:	428b      	cmp	r3, r1
 8003d48:	d0c2      	beq.n	8003cd0 <HAL_TIM_ConfigClockSource+0x5c>
 8003d4a:	3130      	adds	r1, #48	; 0x30
 8003d4c:	e7f7      	b.n	8003d3e <HAL_TIM_ConfigClockSource+0xca>
      TIM_ETR_SetConfig(htim->Instance,
 8003d4e:	68cb      	ldr	r3, [r1, #12]
 8003d50:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8003d54:	f7ff ff84 	bl	8003c60 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003d58:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d5a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d5e:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003d60:	2200      	movs	r2, #0
}
 8003d62:	e7ab      	b.n	8003cbc <HAL_TIM_ConfigClockSource+0x48>
      TIM_ETR_SetConfig(htim->Instance,
 8003d64:	68cb      	ldr	r3, [r1, #12]
 8003d66:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8003d6a:	f7ff ff79 	bl	8003c60 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d6e:	6883      	ldr	r3, [r0, #8]
 8003d70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d74:	e7f3      	b.n	8003d5e <HAL_TIM_ConfigClockSource+0xea>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d76:	684a      	ldr	r2, [r1, #4]
 8003d78:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8003d7a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d7c:	6a03      	ldr	r3, [r0, #32]
 8003d7e:	f023 0301 	bic.w	r3, r3, #1
 8003d82:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d84:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d86:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d8e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003d92:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8003d94:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003d96:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003d98:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d9a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003da2:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8003da6:	e7da      	b.n	8003d5e <HAL_TIM_ConfigClockSource+0xea>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003da8:	684a      	ldr	r2, [r1, #4]
 8003daa:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8003dac:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dae:	6a03      	ldr	r3, [r0, #32]
 8003db0:	f023 0301 	bic.w	r3, r3, #1
 8003db4:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003db6:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003db8:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003dc0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003dc4:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8003dc6:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003dc8:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003dca:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dcc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dd4:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8003dd8:	e7c1      	b.n	8003d5e <HAL_TIM_ConfigClockSource+0xea>
  __HAL_LOCK(htim);
 8003dda:	461a      	mov	r2, r3
 8003ddc:	e774      	b.n	8003cc8 <HAL_TIM_ConfigClockSource+0x54>
 8003dde:	bf00      	nop
 8003de0:	ffce0088 	.word	0xffce0088
 8003de4:	00100030 	.word	0x00100030
 8003de8:	00100040 	.word	0x00100040

08003dec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003dec:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dee:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	f04f 0302 	mov.w	r3, #2
 8003df8:	d037      	beq.n	8003e6a <HAL_TIMEx_MasterConfigSynchronization+0x7e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dfa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003dfe:	4d1c      	ldr	r5, [pc, #112]	; (8003e70 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
  tmpcr2 = htim->Instance->CR2;
 8003e00:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e02:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8003e04:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003e06:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e08:	d003      	beq.n	8003e12 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8003e0a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003e0e:	42ab      	cmp	r3, r5
 8003e10:	d103      	bne.n	8003e1a <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e12:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e14:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e18:	432a      	orrs	r2, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e1a:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e1c:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8003e20:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e24:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e26:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e28:	4a11      	ldr	r2, [pc, #68]	; (8003e70 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d012      	beq.n	8003e54 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8003e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e32:	d00f      	beq.n	8003e54 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8003e34:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d00b      	beq.n	8003e54 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8003e3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d007      	beq.n	8003e54 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8003e44:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d003      	beq.n	8003e54 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8003e4c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d104      	bne.n	8003e5e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e54:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e56:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e5a:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e64:	2300      	movs	r3, #0
 8003e66:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8003e6a:	4618      	mov	r0, r3

  return HAL_OK;
}
 8003e6c:	bd30      	pop	{r4, r5, pc}
 8003e6e:	bf00      	nop
 8003e70:	40012c00 	.word	0x40012c00

08003e74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e74:	b538      	push	{r3, r4, r5, lr}
 8003e76:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e78:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e7a:	6921      	ldr	r1, [r4, #16]
 8003e7c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e7e:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e80:	69c0      	ldr	r0, [r0, #28]
 8003e82:	430a      	orrs	r2, r1
 8003e84:	6961      	ldr	r1, [r4, #20]
 8003e86:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e88:	4993      	ldr	r1, [pc, #588]	; (80040d8 <UART_SetConfig+0x264>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e8a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e8c:	4029      	ands	r1, r5
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e92:	685a      	ldr	r2, [r3, #4]
 8003e94:	68e1      	ldr	r1, [r4, #12]
 8003e96:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	605a      	str	r2, [r3, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e9e:	4a8f      	ldr	r2, [pc, #572]	; (80040dc <UART_SetConfig+0x268>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ea0:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ea2:	4293      	cmp	r3, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ea4:	bf1c      	itt	ne
 8003ea6:	6a22      	ldrne	r2, [r4, #32]
 8003ea8:	4311      	orrne	r1, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003eaa:	689a      	ldr	r2, [r3, #8]
 8003eac:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 8003eb0:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eba:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003ebc:	f022 020f 	bic.w	r2, r2, #15
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ec4:	4a86      	ldr	r2, [pc, #536]	; (80040e0 <UART_SetConfig+0x26c>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d117      	bne.n	8003efa <UART_SetConfig+0x86>
 8003eca:	4b86      	ldr	r3, [pc, #536]	; (80040e4 <UART_SetConfig+0x270>)
 8003ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed0:	f003 0303 	and.w	r3, r3, #3
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	f200 80da 	bhi.w	8004090 <UART_SetConfig+0x21c>
 8003edc:	4a82      	ldr	r2, [pc, #520]	; (80040e8 <UART_SetConfig+0x274>)
 8003ede:	5cd3      	ldrb	r3, [r2, r3]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ee0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003ee4:	f040 80af 	bne.w	8004046 <UART_SetConfig+0x1d2>
  {
    switch (clocksource)
 8003ee8:	2b08      	cmp	r3, #8
 8003eea:	d822      	bhi.n	8003f32 <UART_SetConfig+0xbe>
 8003eec:	e8df f003 	tbb	[pc, r3]
 8003ef0:	21a9d38a 	.word	0x21a9d38a
 8003ef4:	212121cd 	.word	0x212121cd
 8003ef8:	8e          	.byte	0x8e
 8003ef9:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003efa:	4a7c      	ldr	r2, [pc, #496]	; (80040ec <UART_SetConfig+0x278>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d106      	bne.n	8003f0e <UART_SetConfig+0x9a>
 8003f00:	4b78      	ldr	r3, [pc, #480]	; (80040e4 <UART_SetConfig+0x270>)
 8003f02:	4a7b      	ldr	r2, [pc, #492]	; (80040f0 <UART_SetConfig+0x27c>)
 8003f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f08:	f003 030c 	and.w	r3, r3, #12
 8003f0c:	e7e7      	b.n	8003ede <UART_SetConfig+0x6a>
 8003f0e:	4a79      	ldr	r2, [pc, #484]	; (80040f4 <UART_SetConfig+0x280>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d118      	bne.n	8003f46 <UART_SetConfig+0xd2>
 8003f14:	4b73      	ldr	r3, [pc, #460]	; (80040e4 <UART_SetConfig+0x270>)
 8003f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f1e:	2b20      	cmp	r3, #32
 8003f20:	f000 80bc 	beq.w	800409c <UART_SetConfig+0x228>
 8003f24:	d807      	bhi.n	8003f36 <UART_SetConfig+0xc2>
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f000 80bd 	beq.w	80040a6 <UART_SetConfig+0x232>
 8003f2c:	2b10      	cmp	r3, #16
 8003f2e:	f000 80a9 	beq.w	8004084 <UART_SetConfig+0x210>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f32:	2001      	movs	r0, #1
 8003f34:	e037      	b.n	8003fa6 <UART_SetConfig+0x132>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f36:	2b30      	cmp	r3, #48	; 0x30
 8003f38:	d1fb      	bne.n	8003f32 <UART_SetConfig+0xbe>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f3a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003f3e:	d065      	beq.n	800400c <UART_SetConfig+0x198>
 8003f40:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003f44:	e0b7      	b.n	80040b6 <UART_SetConfig+0x242>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f46:	4a6c      	ldr	r2, [pc, #432]	; (80040f8 <UART_SetConfig+0x284>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d10f      	bne.n	8003f6c <UART_SetConfig+0xf8>
 8003f4c:	4b65      	ldr	r3, [pc, #404]	; (80040e4 <UART_SetConfig+0x270>)
 8003f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f52:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003f56:	2b80      	cmp	r3, #128	; 0x80
 8003f58:	f000 80a0 	beq.w	800409c <UART_SetConfig+0x228>
 8003f5c:	d804      	bhi.n	8003f68 <UART_SetConfig+0xf4>
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 80a1 	beq.w	80040a6 <UART_SetConfig+0x232>
 8003f64:	2b40      	cmp	r3, #64	; 0x40
 8003f66:	e7e2      	b.n	8003f2e <UART_SetConfig+0xba>
 8003f68:	2bc0      	cmp	r3, #192	; 0xc0
 8003f6a:	e7e5      	b.n	8003f38 <UART_SetConfig+0xc4>
 8003f6c:	4a5b      	ldr	r2, [pc, #364]	; (80040dc <UART_SetConfig+0x268>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d1df      	bne.n	8003f32 <UART_SetConfig+0xbe>
 8003f72:	4b5c      	ldr	r3, [pc, #368]	; (80040e4 <UART_SetConfig+0x270>)
 8003f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f80:	d018      	beq.n	8003fb4 <UART_SetConfig+0x140>
 8003f82:	d806      	bhi.n	8003f92 <UART_SetConfig+0x11e>
 8003f84:	b15b      	cbz	r3, 8003f9e <UART_SetConfig+0x12a>
 8003f86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f8a:	d1d2      	bne.n	8003f32 <UART_SetConfig+0xbe>
        pclk = HAL_RCC_GetSysClockFreq();
 8003f8c:	f7ff f910 	bl	80031b0 <HAL_RCC_GetSysClockFreq>
        break;
 8003f90:	e007      	b.n	8003fa2 <UART_SetConfig+0x12e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f96:	d1cc      	bne.n	8003f32 <UART_SetConfig+0xbe>
        pclk = (uint32_t) LSE_VALUE;
 8003f98:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003f9c:	e00b      	b.n	8003fb6 <UART_SetConfig+0x142>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f9e:	f7ff fa31 	bl	8003404 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003fa2:	b940      	cbnz	r0, 8003fb6 <UART_SetConfig+0x142>
 8003fa4:	2000      	movs	r0, #0
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
 8003fa6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8003faa:	66a3      	str	r3, [r4, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fac:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8003fae:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70

  return ret;
}
 8003fb2:	bd38      	pop	{r3, r4, r5, pc}
        pclk = (uint32_t) HSI_VALUE;
 8003fb4:	4851      	ldr	r0, [pc, #324]	; (80040fc <UART_SetConfig+0x288>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003fb6:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003fb8:	4b51      	ldr	r3, [pc, #324]	; (8004100 <UART_SetConfig+0x28c>)
 8003fba:	6a62      	ldr	r2, [r4, #36]	; 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003fbc:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003fc0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8003fc4:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003fc8:	4299      	cmp	r1, r3
 8003fca:	d8b2      	bhi.n	8003f32 <UART_SetConfig+0xbe>
 8003fcc:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8003fd0:	d8af      	bhi.n	8003f32 <UART_SetConfig+0xbe>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	f7fc fe23 	bl	8000c20 <__aeabi_uldivmod>
 8003fda:	0209      	lsls	r1, r1, #8
 8003fdc:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8003fe0:	086b      	lsrs	r3, r5, #1
 8003fe2:	0200      	lsls	r0, r0, #8
 8003fe4:	18c0      	adds	r0, r0, r3
 8003fe6:	462a      	mov	r2, r5
 8003fe8:	f04f 0300 	mov.w	r3, #0
 8003fec:	f141 0100 	adc.w	r1, r1, #0
 8003ff0:	f7fc fe16 	bl	8000c20 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ff4:	4b43      	ldr	r3, [pc, #268]	; (8004104 <UART_SetConfig+0x290>)
 8003ff6:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d899      	bhi.n	8003f32 <UART_SetConfig+0xbe>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ffe:	6823      	ldr	r3, [r4, #0]
 8004000:	60d8      	str	r0, [r3, #12]
 8004002:	e7cf      	b.n	8003fa4 <UART_SetConfig+0x130>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004004:	f7ff f9fe 	bl	8003404 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004008:	2800      	cmp	r0, #0
 800400a:	d0cb      	beq.n	8003fa4 <UART_SetConfig+0x130>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800400c:	6861      	ldr	r1, [r4, #4]
 800400e:	4b3c      	ldr	r3, [pc, #240]	; (8004100 <UART_SetConfig+0x28c>)
 8004010:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004012:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8004016:	fbb0 f2f2 	udiv	r2, r0, r2
 800401a:	084b      	lsrs	r3, r1, #1
 800401c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004020:	f64f 72ef 	movw	r2, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004024:	fbb3 f3f1 	udiv	r3, r3, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004028:	f1a3 0110 	sub.w	r1, r3, #16
 800402c:	4291      	cmp	r1, r2
 800402e:	d880      	bhi.n	8003f32 <UART_SetConfig+0xbe>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004030:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8004034:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004036:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004038:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800403c:	4313      	orrs	r3, r2
 800403e:	60cb      	str	r3, [r1, #12]
 8004040:	e7b0      	b.n	8003fa4 <UART_SetConfig+0x130>
        pclk = (uint32_t) HSI_VALUE;
 8004042:	482e      	ldr	r0, [pc, #184]	; (80040fc <UART_SetConfig+0x288>)
 8004044:	e7e2      	b.n	800400c <UART_SetConfig+0x198>
    switch (clocksource)
 8004046:	2b08      	cmp	r3, #8
 8004048:	f63f af73 	bhi.w	8003f32 <UART_SetConfig+0xbe>
 800404c:	a201      	add	r2, pc, #4	; (adr r2, 8004054 <UART_SetConfig+0x1e0>)
 800404e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004052:	bf00      	nop
 8004054:	080040ad 	.word	0x080040ad
 8004058:	08004079 	.word	0x08004079
 800405c:	080040a3 	.word	0x080040a3
 8004060:	08003f33 	.word	0x08003f33
 8004064:	0800407f 	.word	0x0800407f
 8004068:	08003f33 	.word	0x08003f33
 800406c:	08003f33 	.word	0x08003f33
 8004070:	08003f33 	.word	0x08003f33
 8004074:	08003f41 	.word	0x08003f41
        pclk = HAL_RCC_GetPCLK2Freq();
 8004078:	f7ff f9d6 	bl	8003428 <HAL_RCC_GetPCLK2Freq>
        break;
 800407c:	e018      	b.n	80040b0 <UART_SetConfig+0x23c>
        pclk = HAL_RCC_GetSysClockFreq();
 800407e:	f7ff f897 	bl	80031b0 <HAL_RCC_GetSysClockFreq>
        break;
 8004082:	e015      	b.n	80040b0 <UART_SetConfig+0x23c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004084:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004088:	d1f9      	bne.n	800407e <UART_SetConfig+0x20a>
        pclk = HAL_RCC_GetSysClockFreq();
 800408a:	f7ff f891 	bl	80031b0 <HAL_RCC_GetSysClockFreq>
        break;
 800408e:	e7bb      	b.n	8004008 <UART_SetConfig+0x194>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004090:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004094:	d1f0      	bne.n	8004078 <UART_SetConfig+0x204>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004096:	f7ff f9c7 	bl	8003428 <HAL_RCC_GetPCLK2Freq>
        break;
 800409a:	e7b5      	b.n	8004008 <UART_SetConfig+0x194>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800409c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80040a0:	d0cf      	beq.n	8004042 <UART_SetConfig+0x1ce>
        pclk = (uint32_t) HSI_VALUE;
 80040a2:	4816      	ldr	r0, [pc, #88]	; (80040fc <UART_SetConfig+0x288>)
 80040a4:	e007      	b.n	80040b6 <UART_SetConfig+0x242>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040a6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80040aa:	d0ab      	beq.n	8004004 <UART_SetConfig+0x190>
        pclk = HAL_RCC_GetPCLK1Freq();
 80040ac:	f7ff f9aa 	bl	8003404 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80040b0:	2800      	cmp	r0, #0
 80040b2:	f43f af77 	beq.w	8003fa4 <UART_SetConfig+0x130>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040b6:	6863      	ldr	r3, [r4, #4]
 80040b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80040ba:	4a11      	ldr	r2, [pc, #68]	; (8004100 <UART_SetConfig+0x28c>)
 80040bc:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80040c0:	fbb0 f0f2 	udiv	r0, r0, r2
 80040c4:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80040c8:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040cc:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80040d0:	f1a0 0210 	sub.w	r2, r0, #16
 80040d4:	e791      	b.n	8003ffa <UART_SetConfig+0x186>
 80040d6:	bf00      	nop
 80040d8:	cfff69f3 	.word	0xcfff69f3
 80040dc:	40008000 	.word	0x40008000
 80040e0:	40013800 	.word	0x40013800
 80040e4:	40021000 	.word	0x40021000
 80040e8:	08005f68 	.word	0x08005f68
 80040ec:	40004400 	.word	0x40004400
 80040f0:	08005f6b 	.word	0x08005f6b
 80040f4:	40004800 	.word	0x40004800
 80040f8:	40004c00 	.word	0x40004c00
 80040fc:	00f42400 	.word	0x00f42400
 8004100:	08005f78 	.word	0x08005f78
 8004104:	000ffcff 	.word	0x000ffcff

08004108 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004108:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800410a:	07da      	lsls	r2, r3, #31
{
 800410c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800410e:	d506      	bpl.n	800411e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004110:	6801      	ldr	r1, [r0, #0]
 8004112:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8004114:	684a      	ldr	r2, [r1, #4]
 8004116:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800411a:	4322      	orrs	r2, r4
 800411c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800411e:	079c      	lsls	r4, r3, #30
 8004120:	d506      	bpl.n	8004130 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004122:	6801      	ldr	r1, [r0, #0]
 8004124:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004126:	684a      	ldr	r2, [r1, #4]
 8004128:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800412c:	4322      	orrs	r2, r4
 800412e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004130:	0759      	lsls	r1, r3, #29
 8004132:	d506      	bpl.n	8004142 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004134:	6801      	ldr	r1, [r0, #0]
 8004136:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004138:	684a      	ldr	r2, [r1, #4]
 800413a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800413e:	4322      	orrs	r2, r4
 8004140:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004142:	071a      	lsls	r2, r3, #28
 8004144:	d506      	bpl.n	8004154 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004146:	6801      	ldr	r1, [r0, #0]
 8004148:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800414a:	684a      	ldr	r2, [r1, #4]
 800414c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004150:	4322      	orrs	r2, r4
 8004152:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004154:	06dc      	lsls	r4, r3, #27
 8004156:	d506      	bpl.n	8004166 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004158:	6801      	ldr	r1, [r0, #0]
 800415a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800415c:	688a      	ldr	r2, [r1, #8]
 800415e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004162:	4322      	orrs	r2, r4
 8004164:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004166:	0699      	lsls	r1, r3, #26
 8004168:	d506      	bpl.n	8004178 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800416a:	6801      	ldr	r1, [r0, #0]
 800416c:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800416e:	688a      	ldr	r2, [r1, #8]
 8004170:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004174:	4322      	orrs	r2, r4
 8004176:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004178:	065a      	lsls	r2, r3, #25
 800417a:	d50f      	bpl.n	800419c <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800417c:	6801      	ldr	r1, [r0, #0]
 800417e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004180:	684a      	ldr	r2, [r1, #4]
 8004182:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004186:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004188:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800418c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800418e:	d105      	bne.n	800419c <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004190:	684a      	ldr	r2, [r1, #4]
 8004192:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8004194:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8004198:	4322      	orrs	r2, r4
 800419a:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800419c:	061b      	lsls	r3, r3, #24
 800419e:	d506      	bpl.n	80041ae <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041a0:	6802      	ldr	r2, [r0, #0]
 80041a2:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80041a4:	6853      	ldr	r3, [r2, #4]
 80041a6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80041aa:	430b      	orrs	r3, r1
 80041ac:	6053      	str	r3, [r2, #4]
  }
}
 80041ae:	bd10      	pop	{r4, pc}

080041b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041b4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80041b8:	4604      	mov	r4, r0
 80041ba:	460e      	mov	r6, r1
 80041bc:	4615      	mov	r5, r2
 80041be:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041c0:	6822      	ldr	r2, [r4, #0]
 80041c2:	69d3      	ldr	r3, [r2, #28]
 80041c4:	ea36 0303 	bics.w	r3, r6, r3
 80041c8:	bf0c      	ite	eq
 80041ca:	2301      	moveq	r3, #1
 80041cc:	2300      	movne	r3, #0
 80041ce:	42ab      	cmp	r3, r5
 80041d0:	d001      	beq.n	80041d6 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80041d2:	2000      	movs	r0, #0
 80041d4:	e027      	b.n	8004226 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 80041d6:	f1b8 3fff 	cmp.w	r8, #4294967295
 80041da:	d0f2      	beq.n	80041c2 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041dc:	f7fd feae 	bl	8001f3c <HAL_GetTick>
 80041e0:	1bc0      	subs	r0, r0, r7
 80041e2:	4540      	cmp	r0, r8
 80041e4:	6820      	ldr	r0, [r4, #0]
 80041e6:	d802      	bhi.n	80041ee <UART_WaitOnFlagUntilTimeout+0x3e>
 80041e8:	f1b8 0f00 	cmp.w	r8, #0
 80041ec:	d11d      	bne.n	800422a <UART_WaitOnFlagUntilTimeout+0x7a>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ee:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80041f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f6:	e840 3200 	strex	r2, r3, [r0]
 80041fa:	2a00      	cmp	r2, #0
 80041fc:	d1f7      	bne.n	80041ee <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fe:	f100 0308 	add.w	r3, r0, #8
 8004202:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004206:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420a:	f100 0108 	add.w	r1, r0, #8
 800420e:	e841 3200 	strex	r2, r3, [r1]
 8004212:	2a00      	cmp	r2, #0
 8004214:	d1f3      	bne.n	80041fe <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 8004216:	2320      	movs	r3, #32
 8004218:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800421c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          __HAL_UNLOCK(huart);
 8004220:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
          return HAL_TIMEOUT;
 8004224:	2003      	movs	r0, #3
}
 8004226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800422a:	6803      	ldr	r3, [r0, #0]
 800422c:	075a      	lsls	r2, r3, #29
 800422e:	d5c7      	bpl.n	80041c0 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004230:	69c3      	ldr	r3, [r0, #28]
 8004232:	051b      	lsls	r3, r3, #20
 8004234:	d5c4      	bpl.n	80041c0 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004236:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800423a:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423c:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004240:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004244:	e840 3200 	strex	r2, r3, [r0]
 8004248:	2a00      	cmp	r2, #0
 800424a:	d1f7      	bne.n	800423c <UART_WaitOnFlagUntilTimeout+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424c:	f100 0308 	add.w	r3, r0, #8
 8004250:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004254:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004258:	f100 0108 	add.w	r1, r0, #8
 800425c:	e841 3200 	strex	r2, r3, [r1]
 8004260:	2a00      	cmp	r2, #0
 8004262:	d1f3      	bne.n	800424c <UART_WaitOnFlagUntilTimeout+0x9c>
          huart->gState = HAL_UART_STATE_READY;
 8004264:	2320      	movs	r3, #32
 8004266:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800426a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800426e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8004272:	e7d5      	b.n	8004220 <UART_WaitOnFlagUntilTimeout+0x70>

08004274 <UART_CheckIdleState>:
{
 8004274:	b530      	push	{r4, r5, lr}
 8004276:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004278:	2500      	movs	r5, #0
{
 800427a:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800427c:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8004280:	f7fd fe5c 	bl	8001f3c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004284:	6822      	ldr	r2, [r4, #0]
 8004286:	6812      	ldr	r2, [r2, #0]
 8004288:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 800428a:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800428c:	d417      	bmi.n	80042be <UART_CheckIdleState+0x4a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800428e:	6822      	ldr	r2, [r4, #0]
 8004290:	6812      	ldr	r2, [r2, #0]
 8004292:	0752      	lsls	r2, r2, #29
 8004294:	d509      	bpl.n	80042aa <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004296:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800429a:	9200      	str	r2, [sp, #0]
 800429c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80042a0:	2200      	movs	r2, #0
 80042a2:	4620      	mov	r0, r4
 80042a4:	f7ff ff84 	bl	80041b0 <UART_WaitOnFlagUntilTimeout>
 80042a8:	b9b0      	cbnz	r0, 80042d8 <UART_CheckIdleState+0x64>
  huart->gState = HAL_UART_STATE_READY;
 80042aa:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ac:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80042ae:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80042b2:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80042b6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ba:	66e0      	str	r0, [r4, #108]	; 0x6c
  return HAL_OK;
 80042bc:	e00d      	b.n	80042da <UART_CheckIdleState+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042be:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80042c2:	9200      	str	r2, [sp, #0]
 80042c4:	9003      	str	r0, [sp, #12]
 80042c6:	462a      	mov	r2, r5
 80042c8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80042cc:	4620      	mov	r0, r4
 80042ce:	f7ff ff6f 	bl	80041b0 <UART_WaitOnFlagUntilTimeout>
 80042d2:	9b03      	ldr	r3, [sp, #12]
 80042d4:	2800      	cmp	r0, #0
 80042d6:	d0da      	beq.n	800428e <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 80042d8:	2003      	movs	r0, #3
}
 80042da:	b005      	add	sp, #20
 80042dc:	bd30      	pop	{r4, r5, pc}

080042de <HAL_UART_Init>:
{
 80042de:	b510      	push	{r4, lr}
  if (huart == NULL)
 80042e0:	4604      	mov	r4, r0
 80042e2:	b350      	cbz	r0, 800433a <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 80042e4:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80042e8:	b91b      	cbnz	r3, 80042f2 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 80042ea:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 80042ee:	f7fd fd79 	bl	8001de4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80042f2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80042f4:	2324      	movs	r3, #36	; 0x24
 80042f6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 80042fa:	6813      	ldr	r3, [r2, #0]
 80042fc:	f023 0301 	bic.w	r3, r3, #1
 8004300:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004302:	4620      	mov	r0, r4
 8004304:	f7ff fdb6 	bl	8003e74 <UART_SetConfig>
 8004308:	2801      	cmp	r0, #1
 800430a:	d016      	beq.n	800433a <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800430c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800430e:	b113      	cbz	r3, 8004316 <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 8004310:	4620      	mov	r0, r4
 8004312:	f7ff fef9 	bl	8004108 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004316:	6823      	ldr	r3, [r4, #0]
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800431e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004320:	689a      	ldr	r2, [r3, #8]
 8004322:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004326:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800432e:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8004330:	601a      	str	r2, [r3, #0]
}
 8004332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8004336:	f7ff bf9d 	b.w	8004274 <UART_CheckIdleState>
}
 800433a:	2001      	movs	r0, #1
 800433c:	bd10      	pop	{r4, pc}
	...

08004340 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004340:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
 8004342:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004344:	b92b      	cbnz	r3, 8004352 <UARTEx_SetNbDataToProcess+0x12>
  {
    huart->NbTxDataToProcess = 1U;
 8004346:	2301      	movs	r3, #1
 8004348:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800434c:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004350:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004352:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004354:	4d09      	ldr	r5, [pc, #36]	; (800437c <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004356:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004358:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 800435a:	4c09      	ldr	r4, [pc, #36]	; (8004380 <UARTEx_SetNbDataToProcess+0x40>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800435c:	0f49      	lsrs	r1, r1, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800435e:	f3c2 6242 	ubfx	r2, r2, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004362:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 8004364:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	fbb3 f3f1 	udiv	r3, r3, r1
 800436c:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004370:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 8004372:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	fbb3 f3f2 	udiv	r3, r3, r2
}
 800437a:	e7e7      	b.n	800434c <UARTEx_SetNbDataToProcess+0xc>
 800437c:	08005f98 	.word	0x08005f98
 8004380:	08005f90 	.word	0x08005f90

08004384 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8004384:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8004388:	2b01      	cmp	r3, #1
 800438a:	d014      	beq.n	80043b6 <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800438c:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800438e:	2324      	movs	r3, #36	; 0x24
 8004390:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004394:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8004396:	6813      	ldr	r3, [r2, #0]
 8004398:	f023 0301 	bic.w	r3, r3, #1
 800439c:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800439e:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80043a2:	2300      	movs	r3, #0
 80043a4:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80043a6:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80043a8:	2220      	movs	r2, #32
 80043aa:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80043ae:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 80043b2:	4618      	mov	r0, r3
 80043b4:	4770      	bx	lr
  __HAL_LOCK(huart);
 80043b6:	2002      	movs	r0, #2
}
 80043b8:	4770      	bx	lr

080043ba <HAL_UARTEx_SetTxFifoThreshold>:
{
 80043ba:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 80043bc:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80043c0:	2b01      	cmp	r3, #1
{
 80043c2:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 80043c4:	d017      	beq.n	80043f6 <HAL_UARTEx_SetTxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043c6:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80043c8:	2324      	movs	r3, #36	; 0x24
 80043ca:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043ce:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 80043d0:	682b      	ldr	r3, [r5, #0]
 80043d2:	f023 0301 	bic.w	r3, r3, #1
 80043d6:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80043d8:	68ab      	ldr	r3, [r5, #8]
 80043da:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80043de:	4319      	orrs	r1, r3
 80043e0:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 80043e2:	f7ff ffad 	bl	8004340 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 80043e6:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80043e8:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 80043ea:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80043ee:	2000      	movs	r0, #0
 80043f0:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80043f4:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 80043f6:	2002      	movs	r0, #2
 80043f8:	e7fc      	b.n	80043f4 <HAL_UARTEx_SetTxFifoThreshold+0x3a>

080043fa <HAL_UARTEx_SetRxFifoThreshold>:
{
 80043fa:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 80043fc:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8004400:	2b01      	cmp	r3, #1
{
 8004402:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8004404:	d017      	beq.n	8004436 <HAL_UARTEx_SetRxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004406:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004408:	2324      	movs	r3, #36	; 0x24
 800440a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800440e:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8004410:	682b      	ldr	r3, [r5, #0]
 8004412:	f023 0301 	bic.w	r3, r3, #1
 8004416:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004418:	68ab      	ldr	r3, [r5, #8]
 800441a:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 800441e:	4319      	orrs	r1, r3
 8004420:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 8004422:	f7ff ff8d 	bl	8004340 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8004426:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004428:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 800442a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800442e:	2000      	movs	r0, #0
 8004430:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8004434:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8004436:	2002      	movs	r0, #2
 8004438:	e7fc      	b.n	8004434 <HAL_UARTEx_SetRxFifoThreshold+0x3a>

0800443a <memset>:
 800443a:	4402      	add	r2, r0
 800443c:	4603      	mov	r3, r0
 800443e:	4293      	cmp	r3, r2
 8004440:	d100      	bne.n	8004444 <memset+0xa>
 8004442:	4770      	bx	lr
 8004444:	f803 1b01 	strb.w	r1, [r3], #1
 8004448:	e7f9      	b.n	800443e <memset+0x4>
	...

0800444c <__errno>:
 800444c:	4b01      	ldr	r3, [pc, #4]	; (8004454 <__errno+0x8>)
 800444e:	6818      	ldr	r0, [r3, #0]
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	20000058 	.word	0x20000058

08004458 <__libc_init_array>:
 8004458:	b570      	push	{r4, r5, r6, lr}
 800445a:	4d0d      	ldr	r5, [pc, #52]	; (8004490 <__libc_init_array+0x38>)
 800445c:	4c0d      	ldr	r4, [pc, #52]	; (8004494 <__libc_init_array+0x3c>)
 800445e:	1b64      	subs	r4, r4, r5
 8004460:	10a4      	asrs	r4, r4, #2
 8004462:	2600      	movs	r6, #0
 8004464:	42a6      	cmp	r6, r4
 8004466:	d109      	bne.n	800447c <__libc_init_array+0x24>
 8004468:	4d0b      	ldr	r5, [pc, #44]	; (8004498 <__libc_init_array+0x40>)
 800446a:	4c0c      	ldr	r4, [pc, #48]	; (800449c <__libc_init_array+0x44>)
 800446c:	f001 fd10 	bl	8005e90 <_init>
 8004470:	1b64      	subs	r4, r4, r5
 8004472:	10a4      	asrs	r4, r4, #2
 8004474:	2600      	movs	r6, #0
 8004476:	42a6      	cmp	r6, r4
 8004478:	d105      	bne.n	8004486 <__libc_init_array+0x2e>
 800447a:	bd70      	pop	{r4, r5, r6, pc}
 800447c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004480:	4798      	blx	r3
 8004482:	3601      	adds	r6, #1
 8004484:	e7ee      	b.n	8004464 <__libc_init_array+0xc>
 8004486:	f855 3b04 	ldr.w	r3, [r5], #4
 800448a:	4798      	blx	r3
 800448c:	3601      	adds	r6, #1
 800448e:	e7f2      	b.n	8004476 <__libc_init_array+0x1e>
 8004490:	08006188 	.word	0x08006188
 8004494:	08006188 	.word	0x08006188
 8004498:	08006188 	.word	0x08006188
 800449c:	0800618c 	.word	0x0800618c

080044a0 <log>:
 80044a0:	b538      	push	{r3, r4, r5, lr}
 80044a2:	ed2d 8b02 	vpush	{d8}
 80044a6:	ec55 4b10 	vmov	r4, r5, d0
 80044aa:	f000 faa5 	bl	80049f8 <__ieee754_log>
 80044ae:	4622      	mov	r2, r4
 80044b0:	462b      	mov	r3, r5
 80044b2:	4620      	mov	r0, r4
 80044b4:	4629      	mov	r1, r5
 80044b6:	eeb0 8a40 	vmov.f32	s16, s0
 80044ba:	eef0 8a60 	vmov.f32	s17, s1
 80044be:	f7fc fb01 	bl	8000ac4 <__aeabi_dcmpun>
 80044c2:	b998      	cbnz	r0, 80044ec <log+0x4c>
 80044c4:	2200      	movs	r2, #0
 80044c6:	2300      	movs	r3, #0
 80044c8:	4620      	mov	r0, r4
 80044ca:	4629      	mov	r1, r5
 80044cc:	f7fc faf0 	bl	8000ab0 <__aeabi_dcmpgt>
 80044d0:	b960      	cbnz	r0, 80044ec <log+0x4c>
 80044d2:	2200      	movs	r2, #0
 80044d4:	2300      	movs	r3, #0
 80044d6:	4620      	mov	r0, r4
 80044d8:	4629      	mov	r1, r5
 80044da:	f7fc fac1 	bl	8000a60 <__aeabi_dcmpeq>
 80044de:	b160      	cbz	r0, 80044fa <log+0x5a>
 80044e0:	f7ff ffb4 	bl	800444c <__errno>
 80044e4:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8004510 <log+0x70>
 80044e8:	2322      	movs	r3, #34	; 0x22
 80044ea:	6003      	str	r3, [r0, #0]
 80044ec:	eeb0 0a48 	vmov.f32	s0, s16
 80044f0:	eef0 0a68 	vmov.f32	s1, s17
 80044f4:	ecbd 8b02 	vpop	{d8}
 80044f8:	bd38      	pop	{r3, r4, r5, pc}
 80044fa:	f7ff ffa7 	bl	800444c <__errno>
 80044fe:	ecbd 8b02 	vpop	{d8}
 8004502:	2321      	movs	r3, #33	; 0x21
 8004504:	6003      	str	r3, [r0, #0]
 8004506:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800450a:	4803      	ldr	r0, [pc, #12]	; (8004518 <log+0x78>)
 800450c:	f000 b8b4 	b.w	8004678 <nan>
 8004510:	00000000 	.word	0x00000000
 8004514:	fff00000 	.word	0xfff00000
 8004518:	08005fa0 	.word	0x08005fa0
 800451c:	00000000 	.word	0x00000000

08004520 <cos>:
 8004520:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004522:	ec53 2b10 	vmov	r2, r3, d0
 8004526:	4826      	ldr	r0, [pc, #152]	; (80045c0 <cos+0xa0>)
 8004528:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800452c:	4281      	cmp	r1, r0
 800452e:	dc06      	bgt.n	800453e <cos+0x1e>
 8004530:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80045b8 <cos+0x98>
 8004534:	b005      	add	sp, #20
 8004536:	f85d eb04 	ldr.w	lr, [sp], #4
 800453a:	f000 b8d5 	b.w	80046e8 <__kernel_cos>
 800453e:	4821      	ldr	r0, [pc, #132]	; (80045c4 <cos+0xa4>)
 8004540:	4281      	cmp	r1, r0
 8004542:	dd09      	ble.n	8004558 <cos+0x38>
 8004544:	ee10 0a10 	vmov	r0, s0
 8004548:	4619      	mov	r1, r3
 800454a:	f7fb fe69 	bl	8000220 <__aeabi_dsub>
 800454e:	ec41 0b10 	vmov	d0, r0, r1
 8004552:	b005      	add	sp, #20
 8004554:	f85d fb04 	ldr.w	pc, [sp], #4
 8004558:	4668      	mov	r0, sp
 800455a:	f000 fc09 	bl	8004d70 <__ieee754_rem_pio2>
 800455e:	f000 0003 	and.w	r0, r0, #3
 8004562:	2801      	cmp	r0, #1
 8004564:	d00b      	beq.n	800457e <cos+0x5e>
 8004566:	2802      	cmp	r0, #2
 8004568:	d016      	beq.n	8004598 <cos+0x78>
 800456a:	b9e0      	cbnz	r0, 80045a6 <cos+0x86>
 800456c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004570:	ed9d 0b00 	vldr	d0, [sp]
 8004574:	f000 f8b8 	bl	80046e8 <__kernel_cos>
 8004578:	ec51 0b10 	vmov	r0, r1, d0
 800457c:	e7e7      	b.n	800454e <cos+0x2e>
 800457e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004582:	ed9d 0b00 	vldr	d0, [sp]
 8004586:	f000 f977 	bl	8004878 <__kernel_sin>
 800458a:	ec53 2b10 	vmov	r2, r3, d0
 800458e:	ee10 0a10 	vmov	r0, s0
 8004592:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004596:	e7da      	b.n	800454e <cos+0x2e>
 8004598:	ed9d 1b02 	vldr	d1, [sp, #8]
 800459c:	ed9d 0b00 	vldr	d0, [sp]
 80045a0:	f000 f8a2 	bl	80046e8 <__kernel_cos>
 80045a4:	e7f1      	b.n	800458a <cos+0x6a>
 80045a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80045aa:	ed9d 0b00 	vldr	d0, [sp]
 80045ae:	2001      	movs	r0, #1
 80045b0:	f000 f962 	bl	8004878 <__kernel_sin>
 80045b4:	e7e0      	b.n	8004578 <cos+0x58>
 80045b6:	bf00      	nop
	...
 80045c0:	3fe921fb 	.word	0x3fe921fb
 80045c4:	7fefffff 	.word	0x7fefffff

080045c8 <sin>:
 80045c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80045ca:	ec53 2b10 	vmov	r2, r3, d0
 80045ce:	4828      	ldr	r0, [pc, #160]	; (8004670 <sin+0xa8>)
 80045d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80045d4:	4281      	cmp	r1, r0
 80045d6:	dc07      	bgt.n	80045e8 <sin+0x20>
 80045d8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8004668 <sin+0xa0>
 80045dc:	2000      	movs	r0, #0
 80045de:	b005      	add	sp, #20
 80045e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80045e4:	f000 b948 	b.w	8004878 <__kernel_sin>
 80045e8:	4822      	ldr	r0, [pc, #136]	; (8004674 <sin+0xac>)
 80045ea:	4281      	cmp	r1, r0
 80045ec:	dd09      	ble.n	8004602 <sin+0x3a>
 80045ee:	ee10 0a10 	vmov	r0, s0
 80045f2:	4619      	mov	r1, r3
 80045f4:	f7fb fe14 	bl	8000220 <__aeabi_dsub>
 80045f8:	ec41 0b10 	vmov	d0, r0, r1
 80045fc:	b005      	add	sp, #20
 80045fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8004602:	4668      	mov	r0, sp
 8004604:	f000 fbb4 	bl	8004d70 <__ieee754_rem_pio2>
 8004608:	f000 0003 	and.w	r0, r0, #3
 800460c:	2801      	cmp	r0, #1
 800460e:	d00c      	beq.n	800462a <sin+0x62>
 8004610:	2802      	cmp	r0, #2
 8004612:	d011      	beq.n	8004638 <sin+0x70>
 8004614:	b9f0      	cbnz	r0, 8004654 <sin+0x8c>
 8004616:	ed9d 1b02 	vldr	d1, [sp, #8]
 800461a:	ed9d 0b00 	vldr	d0, [sp]
 800461e:	2001      	movs	r0, #1
 8004620:	f000 f92a 	bl	8004878 <__kernel_sin>
 8004624:	ec51 0b10 	vmov	r0, r1, d0
 8004628:	e7e6      	b.n	80045f8 <sin+0x30>
 800462a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800462e:	ed9d 0b00 	vldr	d0, [sp]
 8004632:	f000 f859 	bl	80046e8 <__kernel_cos>
 8004636:	e7f5      	b.n	8004624 <sin+0x5c>
 8004638:	ed9d 1b02 	vldr	d1, [sp, #8]
 800463c:	ed9d 0b00 	vldr	d0, [sp]
 8004640:	2001      	movs	r0, #1
 8004642:	f000 f919 	bl	8004878 <__kernel_sin>
 8004646:	ec53 2b10 	vmov	r2, r3, d0
 800464a:	ee10 0a10 	vmov	r0, s0
 800464e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004652:	e7d1      	b.n	80045f8 <sin+0x30>
 8004654:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004658:	ed9d 0b00 	vldr	d0, [sp]
 800465c:	f000 f844 	bl	80046e8 <__kernel_cos>
 8004660:	e7f1      	b.n	8004646 <sin+0x7e>
 8004662:	bf00      	nop
 8004664:	f3af 8000 	nop.w
	...
 8004670:	3fe921fb 	.word	0x3fe921fb
 8004674:	7fefffff 	.word	0x7fefffff

08004678 <nan>:
 8004678:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8004680 <nan+0x8>
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	00000000 	.word	0x00000000
 8004684:	7ff80000 	.word	0x7ff80000

08004688 <cabs>:
 8004688:	b508      	push	{r3, lr}
 800468a:	ed2d 8b06 	vpush	{d8-d10}
 800468e:	eeb0 aa40 	vmov.f32	s20, s0
 8004692:	eef0 aa60 	vmov.f32	s21, s1
 8004696:	eeb0 9a41 	vmov.f32	s18, s2
 800469a:	eef0 9a61 	vmov.f32	s19, s3
 800469e:	f000 f821 	bl	80046e4 <creal>
 80046a2:	eeb0 1a49 	vmov.f32	s2, s18
 80046a6:	eef0 1a69 	vmov.f32	s3, s19
 80046aa:	eeb0 8a40 	vmov.f32	s16, s0
 80046ae:	eef0 8a60 	vmov.f32	s17, s1
 80046b2:	eeb0 0a4a 	vmov.f32	s0, s20
 80046b6:	eef0 0a6a 	vmov.f32	s1, s21
 80046ba:	f000 f80e 	bl	80046da <cimag>
 80046be:	eeb0 1a40 	vmov.f32	s2, s0
 80046c2:	eef0 1a60 	vmov.f32	s3, s1
 80046c6:	eeb0 0a48 	vmov.f32	s0, s16
 80046ca:	eef0 0a68 	vmov.f32	s1, s17
 80046ce:	ecbd 8b06 	vpop	{d8-d10}
 80046d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80046d6:	f000 bd53 	b.w	8005180 <hypot>

080046da <cimag>:
 80046da:	eeb0 0a41 	vmov.f32	s0, s2
 80046de:	eef0 0a61 	vmov.f32	s1, s3
 80046e2:	4770      	bx	lr

080046e4 <creal>:
 80046e4:	4770      	bx	lr
	...

080046e8 <__kernel_cos>:
 80046e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ec:	ec57 6b10 	vmov	r6, r7, d0
 80046f0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80046f4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80046f8:	ed8d 1b00 	vstr	d1, [sp]
 80046fc:	da07      	bge.n	800470e <__kernel_cos+0x26>
 80046fe:	ee10 0a10 	vmov	r0, s0
 8004702:	4639      	mov	r1, r7
 8004704:	f7fc f9f4 	bl	8000af0 <__aeabi_d2iz>
 8004708:	2800      	cmp	r0, #0
 800470a:	f000 8088 	beq.w	800481e <__kernel_cos+0x136>
 800470e:	4632      	mov	r2, r6
 8004710:	463b      	mov	r3, r7
 8004712:	4630      	mov	r0, r6
 8004714:	4639      	mov	r1, r7
 8004716:	f7fb ff3b 	bl	8000590 <__aeabi_dmul>
 800471a:	4b51      	ldr	r3, [pc, #324]	; (8004860 <__kernel_cos+0x178>)
 800471c:	2200      	movs	r2, #0
 800471e:	4604      	mov	r4, r0
 8004720:	460d      	mov	r5, r1
 8004722:	f7fb ff35 	bl	8000590 <__aeabi_dmul>
 8004726:	a340      	add	r3, pc, #256	; (adr r3, 8004828 <__kernel_cos+0x140>)
 8004728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472c:	4682      	mov	sl, r0
 800472e:	468b      	mov	fp, r1
 8004730:	4620      	mov	r0, r4
 8004732:	4629      	mov	r1, r5
 8004734:	f7fb ff2c 	bl	8000590 <__aeabi_dmul>
 8004738:	a33d      	add	r3, pc, #244	; (adr r3, 8004830 <__kernel_cos+0x148>)
 800473a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473e:	f7fb fd71 	bl	8000224 <__adddf3>
 8004742:	4622      	mov	r2, r4
 8004744:	462b      	mov	r3, r5
 8004746:	f7fb ff23 	bl	8000590 <__aeabi_dmul>
 800474a:	a33b      	add	r3, pc, #236	; (adr r3, 8004838 <__kernel_cos+0x150>)
 800474c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004750:	f7fb fd66 	bl	8000220 <__aeabi_dsub>
 8004754:	4622      	mov	r2, r4
 8004756:	462b      	mov	r3, r5
 8004758:	f7fb ff1a 	bl	8000590 <__aeabi_dmul>
 800475c:	a338      	add	r3, pc, #224	; (adr r3, 8004840 <__kernel_cos+0x158>)
 800475e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004762:	f7fb fd5f 	bl	8000224 <__adddf3>
 8004766:	4622      	mov	r2, r4
 8004768:	462b      	mov	r3, r5
 800476a:	f7fb ff11 	bl	8000590 <__aeabi_dmul>
 800476e:	a336      	add	r3, pc, #216	; (adr r3, 8004848 <__kernel_cos+0x160>)
 8004770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004774:	f7fb fd54 	bl	8000220 <__aeabi_dsub>
 8004778:	4622      	mov	r2, r4
 800477a:	462b      	mov	r3, r5
 800477c:	f7fb ff08 	bl	8000590 <__aeabi_dmul>
 8004780:	a333      	add	r3, pc, #204	; (adr r3, 8004850 <__kernel_cos+0x168>)
 8004782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004786:	f7fb fd4d 	bl	8000224 <__adddf3>
 800478a:	4622      	mov	r2, r4
 800478c:	462b      	mov	r3, r5
 800478e:	f7fb feff 	bl	8000590 <__aeabi_dmul>
 8004792:	4622      	mov	r2, r4
 8004794:	462b      	mov	r3, r5
 8004796:	f7fb fefb 	bl	8000590 <__aeabi_dmul>
 800479a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800479e:	4604      	mov	r4, r0
 80047a0:	460d      	mov	r5, r1
 80047a2:	4630      	mov	r0, r6
 80047a4:	4639      	mov	r1, r7
 80047a6:	f7fb fef3 	bl	8000590 <__aeabi_dmul>
 80047aa:	460b      	mov	r3, r1
 80047ac:	4602      	mov	r2, r0
 80047ae:	4629      	mov	r1, r5
 80047b0:	4620      	mov	r0, r4
 80047b2:	f7fb fd35 	bl	8000220 <__aeabi_dsub>
 80047b6:	4b2b      	ldr	r3, [pc, #172]	; (8004864 <__kernel_cos+0x17c>)
 80047b8:	4598      	cmp	r8, r3
 80047ba:	4606      	mov	r6, r0
 80047bc:	460f      	mov	r7, r1
 80047be:	dc10      	bgt.n	80047e2 <__kernel_cos+0xfa>
 80047c0:	4602      	mov	r2, r0
 80047c2:	460b      	mov	r3, r1
 80047c4:	4650      	mov	r0, sl
 80047c6:	4659      	mov	r1, fp
 80047c8:	f7fb fd2a 	bl	8000220 <__aeabi_dsub>
 80047cc:	460b      	mov	r3, r1
 80047ce:	4926      	ldr	r1, [pc, #152]	; (8004868 <__kernel_cos+0x180>)
 80047d0:	4602      	mov	r2, r0
 80047d2:	2000      	movs	r0, #0
 80047d4:	f7fb fd24 	bl	8000220 <__aeabi_dsub>
 80047d8:	ec41 0b10 	vmov	d0, r0, r1
 80047dc:	b003      	add	sp, #12
 80047de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047e2:	4b22      	ldr	r3, [pc, #136]	; (800486c <__kernel_cos+0x184>)
 80047e4:	4920      	ldr	r1, [pc, #128]	; (8004868 <__kernel_cos+0x180>)
 80047e6:	4598      	cmp	r8, r3
 80047e8:	bfcc      	ite	gt
 80047ea:	4d21      	ldrgt	r5, [pc, #132]	; (8004870 <__kernel_cos+0x188>)
 80047ec:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80047f0:	2400      	movs	r4, #0
 80047f2:	4622      	mov	r2, r4
 80047f4:	462b      	mov	r3, r5
 80047f6:	2000      	movs	r0, #0
 80047f8:	f7fb fd12 	bl	8000220 <__aeabi_dsub>
 80047fc:	4622      	mov	r2, r4
 80047fe:	4680      	mov	r8, r0
 8004800:	4689      	mov	r9, r1
 8004802:	462b      	mov	r3, r5
 8004804:	4650      	mov	r0, sl
 8004806:	4659      	mov	r1, fp
 8004808:	f7fb fd0a 	bl	8000220 <__aeabi_dsub>
 800480c:	4632      	mov	r2, r6
 800480e:	463b      	mov	r3, r7
 8004810:	f7fb fd06 	bl	8000220 <__aeabi_dsub>
 8004814:	4602      	mov	r2, r0
 8004816:	460b      	mov	r3, r1
 8004818:	4640      	mov	r0, r8
 800481a:	4649      	mov	r1, r9
 800481c:	e7da      	b.n	80047d4 <__kernel_cos+0xec>
 800481e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8004858 <__kernel_cos+0x170>
 8004822:	e7db      	b.n	80047dc <__kernel_cos+0xf4>
 8004824:	f3af 8000 	nop.w
 8004828:	be8838d4 	.word	0xbe8838d4
 800482c:	bda8fae9 	.word	0xbda8fae9
 8004830:	bdb4b1c4 	.word	0xbdb4b1c4
 8004834:	3e21ee9e 	.word	0x3e21ee9e
 8004838:	809c52ad 	.word	0x809c52ad
 800483c:	3e927e4f 	.word	0x3e927e4f
 8004840:	19cb1590 	.word	0x19cb1590
 8004844:	3efa01a0 	.word	0x3efa01a0
 8004848:	16c15177 	.word	0x16c15177
 800484c:	3f56c16c 	.word	0x3f56c16c
 8004850:	5555554c 	.word	0x5555554c
 8004854:	3fa55555 	.word	0x3fa55555
 8004858:	00000000 	.word	0x00000000
 800485c:	3ff00000 	.word	0x3ff00000
 8004860:	3fe00000 	.word	0x3fe00000
 8004864:	3fd33332 	.word	0x3fd33332
 8004868:	3ff00000 	.word	0x3ff00000
 800486c:	3fe90000 	.word	0x3fe90000
 8004870:	3fd20000 	.word	0x3fd20000
 8004874:	00000000 	.word	0x00000000

08004878 <__kernel_sin>:
 8004878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800487c:	ed2d 8b04 	vpush	{d8-d9}
 8004880:	eeb0 8a41 	vmov.f32	s16, s2
 8004884:	eef0 8a61 	vmov.f32	s17, s3
 8004888:	ec55 4b10 	vmov	r4, r5, d0
 800488c:	b083      	sub	sp, #12
 800488e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004892:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8004896:	9001      	str	r0, [sp, #4]
 8004898:	da06      	bge.n	80048a8 <__kernel_sin+0x30>
 800489a:	ee10 0a10 	vmov	r0, s0
 800489e:	4629      	mov	r1, r5
 80048a0:	f7fc f926 	bl	8000af0 <__aeabi_d2iz>
 80048a4:	2800      	cmp	r0, #0
 80048a6:	d051      	beq.n	800494c <__kernel_sin+0xd4>
 80048a8:	4622      	mov	r2, r4
 80048aa:	462b      	mov	r3, r5
 80048ac:	4620      	mov	r0, r4
 80048ae:	4629      	mov	r1, r5
 80048b0:	f7fb fe6e 	bl	8000590 <__aeabi_dmul>
 80048b4:	4682      	mov	sl, r0
 80048b6:	468b      	mov	fp, r1
 80048b8:	4602      	mov	r2, r0
 80048ba:	460b      	mov	r3, r1
 80048bc:	4620      	mov	r0, r4
 80048be:	4629      	mov	r1, r5
 80048c0:	f7fb fe66 	bl	8000590 <__aeabi_dmul>
 80048c4:	a341      	add	r3, pc, #260	; (adr r3, 80049cc <__kernel_sin+0x154>)
 80048c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ca:	4680      	mov	r8, r0
 80048cc:	4689      	mov	r9, r1
 80048ce:	4650      	mov	r0, sl
 80048d0:	4659      	mov	r1, fp
 80048d2:	f7fb fe5d 	bl	8000590 <__aeabi_dmul>
 80048d6:	a33f      	add	r3, pc, #252	; (adr r3, 80049d4 <__kernel_sin+0x15c>)
 80048d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048dc:	f7fb fca0 	bl	8000220 <__aeabi_dsub>
 80048e0:	4652      	mov	r2, sl
 80048e2:	465b      	mov	r3, fp
 80048e4:	f7fb fe54 	bl	8000590 <__aeabi_dmul>
 80048e8:	a33c      	add	r3, pc, #240	; (adr r3, 80049dc <__kernel_sin+0x164>)
 80048ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ee:	f7fb fc99 	bl	8000224 <__adddf3>
 80048f2:	4652      	mov	r2, sl
 80048f4:	465b      	mov	r3, fp
 80048f6:	f7fb fe4b 	bl	8000590 <__aeabi_dmul>
 80048fa:	a33a      	add	r3, pc, #232	; (adr r3, 80049e4 <__kernel_sin+0x16c>)
 80048fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004900:	f7fb fc8e 	bl	8000220 <__aeabi_dsub>
 8004904:	4652      	mov	r2, sl
 8004906:	465b      	mov	r3, fp
 8004908:	f7fb fe42 	bl	8000590 <__aeabi_dmul>
 800490c:	a337      	add	r3, pc, #220	; (adr r3, 80049ec <__kernel_sin+0x174>)
 800490e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004912:	f7fb fc87 	bl	8000224 <__adddf3>
 8004916:	9b01      	ldr	r3, [sp, #4]
 8004918:	4606      	mov	r6, r0
 800491a:	460f      	mov	r7, r1
 800491c:	b9eb      	cbnz	r3, 800495a <__kernel_sin+0xe2>
 800491e:	4602      	mov	r2, r0
 8004920:	460b      	mov	r3, r1
 8004922:	4650      	mov	r0, sl
 8004924:	4659      	mov	r1, fp
 8004926:	f7fb fe33 	bl	8000590 <__aeabi_dmul>
 800492a:	a325      	add	r3, pc, #148	; (adr r3, 80049c0 <__kernel_sin+0x148>)
 800492c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004930:	f7fb fc76 	bl	8000220 <__aeabi_dsub>
 8004934:	4642      	mov	r2, r8
 8004936:	464b      	mov	r3, r9
 8004938:	f7fb fe2a 	bl	8000590 <__aeabi_dmul>
 800493c:	4602      	mov	r2, r0
 800493e:	460b      	mov	r3, r1
 8004940:	4620      	mov	r0, r4
 8004942:	4629      	mov	r1, r5
 8004944:	f7fb fc6e 	bl	8000224 <__adddf3>
 8004948:	4604      	mov	r4, r0
 800494a:	460d      	mov	r5, r1
 800494c:	ec45 4b10 	vmov	d0, r4, r5
 8004950:	b003      	add	sp, #12
 8004952:	ecbd 8b04 	vpop	{d8-d9}
 8004956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800495a:	4b1b      	ldr	r3, [pc, #108]	; (80049c8 <__kernel_sin+0x150>)
 800495c:	ec51 0b18 	vmov	r0, r1, d8
 8004960:	2200      	movs	r2, #0
 8004962:	f7fb fe15 	bl	8000590 <__aeabi_dmul>
 8004966:	4632      	mov	r2, r6
 8004968:	ec41 0b19 	vmov	d9, r0, r1
 800496c:	463b      	mov	r3, r7
 800496e:	4640      	mov	r0, r8
 8004970:	4649      	mov	r1, r9
 8004972:	f7fb fe0d 	bl	8000590 <__aeabi_dmul>
 8004976:	4602      	mov	r2, r0
 8004978:	460b      	mov	r3, r1
 800497a:	ec51 0b19 	vmov	r0, r1, d9
 800497e:	f7fb fc4f 	bl	8000220 <__aeabi_dsub>
 8004982:	4652      	mov	r2, sl
 8004984:	465b      	mov	r3, fp
 8004986:	f7fb fe03 	bl	8000590 <__aeabi_dmul>
 800498a:	ec53 2b18 	vmov	r2, r3, d8
 800498e:	f7fb fc47 	bl	8000220 <__aeabi_dsub>
 8004992:	a30b      	add	r3, pc, #44	; (adr r3, 80049c0 <__kernel_sin+0x148>)
 8004994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004998:	4606      	mov	r6, r0
 800499a:	460f      	mov	r7, r1
 800499c:	4640      	mov	r0, r8
 800499e:	4649      	mov	r1, r9
 80049a0:	f7fb fdf6 	bl	8000590 <__aeabi_dmul>
 80049a4:	4602      	mov	r2, r0
 80049a6:	460b      	mov	r3, r1
 80049a8:	4630      	mov	r0, r6
 80049aa:	4639      	mov	r1, r7
 80049ac:	f7fb fc3a 	bl	8000224 <__adddf3>
 80049b0:	4602      	mov	r2, r0
 80049b2:	460b      	mov	r3, r1
 80049b4:	4620      	mov	r0, r4
 80049b6:	4629      	mov	r1, r5
 80049b8:	f7fb fc32 	bl	8000220 <__aeabi_dsub>
 80049bc:	e7c4      	b.n	8004948 <__kernel_sin+0xd0>
 80049be:	bf00      	nop
 80049c0:	55555549 	.word	0x55555549
 80049c4:	3fc55555 	.word	0x3fc55555
 80049c8:	3fe00000 	.word	0x3fe00000
 80049cc:	5acfd57c 	.word	0x5acfd57c
 80049d0:	3de5d93a 	.word	0x3de5d93a
 80049d4:	8a2b9ceb 	.word	0x8a2b9ceb
 80049d8:	3e5ae5e6 	.word	0x3e5ae5e6
 80049dc:	57b1fe7d 	.word	0x57b1fe7d
 80049e0:	3ec71de3 	.word	0x3ec71de3
 80049e4:	19c161d5 	.word	0x19c161d5
 80049e8:	3f2a01a0 	.word	0x3f2a01a0
 80049ec:	1110f8a6 	.word	0x1110f8a6
 80049f0:	3f811111 	.word	0x3f811111
 80049f4:	00000000 	.word	0x00000000

080049f8 <__ieee754_log>:
 80049f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049fc:	ec51 0b10 	vmov	r0, r1, d0
 8004a00:	ed2d 8b04 	vpush	{d8-d9}
 8004a04:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004a08:	b083      	sub	sp, #12
 8004a0a:	460d      	mov	r5, r1
 8004a0c:	da29      	bge.n	8004a62 <__ieee754_log+0x6a>
 8004a0e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004a12:	4303      	orrs	r3, r0
 8004a14:	ee10 2a10 	vmov	r2, s0
 8004a18:	d10c      	bne.n	8004a34 <__ieee754_log+0x3c>
 8004a1a:	49cf      	ldr	r1, [pc, #828]	; (8004d58 <__ieee754_log+0x360>)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	2300      	movs	r3, #0
 8004a20:	2000      	movs	r0, #0
 8004a22:	f7fb fedf 	bl	80007e4 <__aeabi_ddiv>
 8004a26:	ec41 0b10 	vmov	d0, r0, r1
 8004a2a:	b003      	add	sp, #12
 8004a2c:	ecbd 8b04 	vpop	{d8-d9}
 8004a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a34:	2900      	cmp	r1, #0
 8004a36:	da05      	bge.n	8004a44 <__ieee754_log+0x4c>
 8004a38:	460b      	mov	r3, r1
 8004a3a:	f7fb fbf1 	bl	8000220 <__aeabi_dsub>
 8004a3e:	2200      	movs	r2, #0
 8004a40:	2300      	movs	r3, #0
 8004a42:	e7ee      	b.n	8004a22 <__ieee754_log+0x2a>
 8004a44:	4bc5      	ldr	r3, [pc, #788]	; (8004d5c <__ieee754_log+0x364>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	f7fb fda2 	bl	8000590 <__aeabi_dmul>
 8004a4c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8004a50:	460d      	mov	r5, r1
 8004a52:	4ac3      	ldr	r2, [pc, #780]	; (8004d60 <__ieee754_log+0x368>)
 8004a54:	4295      	cmp	r5, r2
 8004a56:	dd06      	ble.n	8004a66 <__ieee754_log+0x6e>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	f7fb fbe2 	bl	8000224 <__adddf3>
 8004a60:	e7e1      	b.n	8004a26 <__ieee754_log+0x2e>
 8004a62:	2300      	movs	r3, #0
 8004a64:	e7f5      	b.n	8004a52 <__ieee754_log+0x5a>
 8004a66:	152c      	asrs	r4, r5, #20
 8004a68:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004a6c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8004a70:	441c      	add	r4, r3
 8004a72:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8004a76:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8004a7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a7e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8004a82:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8004a86:	ea42 0105 	orr.w	r1, r2, r5
 8004a8a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8004a8e:	2200      	movs	r2, #0
 8004a90:	4bb4      	ldr	r3, [pc, #720]	; (8004d64 <__ieee754_log+0x36c>)
 8004a92:	f7fb fbc5 	bl	8000220 <__aeabi_dsub>
 8004a96:	1cab      	adds	r3, r5, #2
 8004a98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	4682      	mov	sl, r0
 8004aa0:	468b      	mov	fp, r1
 8004aa2:	f04f 0200 	mov.w	r2, #0
 8004aa6:	dc53      	bgt.n	8004b50 <__ieee754_log+0x158>
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	f7fb ffd9 	bl	8000a60 <__aeabi_dcmpeq>
 8004aae:	b1d0      	cbz	r0, 8004ae6 <__ieee754_log+0xee>
 8004ab0:	2c00      	cmp	r4, #0
 8004ab2:	f000 8122 	beq.w	8004cfa <__ieee754_log+0x302>
 8004ab6:	4620      	mov	r0, r4
 8004ab8:	f7fb fd00 	bl	80004bc <__aeabi_i2d>
 8004abc:	a390      	add	r3, pc, #576	; (adr r3, 8004d00 <__ieee754_log+0x308>)
 8004abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac2:	4606      	mov	r6, r0
 8004ac4:	460f      	mov	r7, r1
 8004ac6:	f7fb fd63 	bl	8000590 <__aeabi_dmul>
 8004aca:	a38f      	add	r3, pc, #572	; (adr r3, 8004d08 <__ieee754_log+0x310>)
 8004acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad0:	4604      	mov	r4, r0
 8004ad2:	460d      	mov	r5, r1
 8004ad4:	4630      	mov	r0, r6
 8004ad6:	4639      	mov	r1, r7
 8004ad8:	f7fb fd5a 	bl	8000590 <__aeabi_dmul>
 8004adc:	4602      	mov	r2, r0
 8004ade:	460b      	mov	r3, r1
 8004ae0:	4620      	mov	r0, r4
 8004ae2:	4629      	mov	r1, r5
 8004ae4:	e7ba      	b.n	8004a5c <__ieee754_log+0x64>
 8004ae6:	a38a      	add	r3, pc, #552	; (adr r3, 8004d10 <__ieee754_log+0x318>)
 8004ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aec:	4650      	mov	r0, sl
 8004aee:	4659      	mov	r1, fp
 8004af0:	f7fb fd4e 	bl	8000590 <__aeabi_dmul>
 8004af4:	4602      	mov	r2, r0
 8004af6:	460b      	mov	r3, r1
 8004af8:	2000      	movs	r0, #0
 8004afa:	499b      	ldr	r1, [pc, #620]	; (8004d68 <__ieee754_log+0x370>)
 8004afc:	f7fb fb90 	bl	8000220 <__aeabi_dsub>
 8004b00:	4652      	mov	r2, sl
 8004b02:	4606      	mov	r6, r0
 8004b04:	460f      	mov	r7, r1
 8004b06:	465b      	mov	r3, fp
 8004b08:	4650      	mov	r0, sl
 8004b0a:	4659      	mov	r1, fp
 8004b0c:	f7fb fd40 	bl	8000590 <__aeabi_dmul>
 8004b10:	4602      	mov	r2, r0
 8004b12:	460b      	mov	r3, r1
 8004b14:	4630      	mov	r0, r6
 8004b16:	4639      	mov	r1, r7
 8004b18:	f7fb fd3a 	bl	8000590 <__aeabi_dmul>
 8004b1c:	4606      	mov	r6, r0
 8004b1e:	460f      	mov	r7, r1
 8004b20:	b914      	cbnz	r4, 8004b28 <__ieee754_log+0x130>
 8004b22:	4632      	mov	r2, r6
 8004b24:	463b      	mov	r3, r7
 8004b26:	e0a2      	b.n	8004c6e <__ieee754_log+0x276>
 8004b28:	4620      	mov	r0, r4
 8004b2a:	f7fb fcc7 	bl	80004bc <__aeabi_i2d>
 8004b2e:	a374      	add	r3, pc, #464	; (adr r3, 8004d00 <__ieee754_log+0x308>)
 8004b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b34:	4680      	mov	r8, r0
 8004b36:	4689      	mov	r9, r1
 8004b38:	f7fb fd2a 	bl	8000590 <__aeabi_dmul>
 8004b3c:	a372      	add	r3, pc, #456	; (adr r3, 8004d08 <__ieee754_log+0x310>)
 8004b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b42:	4604      	mov	r4, r0
 8004b44:	460d      	mov	r5, r1
 8004b46:	4640      	mov	r0, r8
 8004b48:	4649      	mov	r1, r9
 8004b4a:	f7fb fd21 	bl	8000590 <__aeabi_dmul>
 8004b4e:	e0a7      	b.n	8004ca0 <__ieee754_log+0x2a8>
 8004b50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004b54:	f7fb fb66 	bl	8000224 <__adddf3>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	4650      	mov	r0, sl
 8004b5e:	4659      	mov	r1, fp
 8004b60:	f7fb fe40 	bl	80007e4 <__aeabi_ddiv>
 8004b64:	ec41 0b18 	vmov	d8, r0, r1
 8004b68:	4620      	mov	r0, r4
 8004b6a:	f7fb fca7 	bl	80004bc <__aeabi_i2d>
 8004b6e:	ec53 2b18 	vmov	r2, r3, d8
 8004b72:	ec41 0b19 	vmov	d9, r0, r1
 8004b76:	ec51 0b18 	vmov	r0, r1, d8
 8004b7a:	f7fb fd09 	bl	8000590 <__aeabi_dmul>
 8004b7e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8004b82:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8004b86:	9301      	str	r3, [sp, #4]
 8004b88:	4602      	mov	r2, r0
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	4680      	mov	r8, r0
 8004b8e:	4689      	mov	r9, r1
 8004b90:	f7fb fcfe 	bl	8000590 <__aeabi_dmul>
 8004b94:	a360      	add	r3, pc, #384	; (adr r3, 8004d18 <__ieee754_log+0x320>)
 8004b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b9a:	4606      	mov	r6, r0
 8004b9c:	460f      	mov	r7, r1
 8004b9e:	f7fb fcf7 	bl	8000590 <__aeabi_dmul>
 8004ba2:	a35f      	add	r3, pc, #380	; (adr r3, 8004d20 <__ieee754_log+0x328>)
 8004ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba8:	f7fb fb3c 	bl	8000224 <__adddf3>
 8004bac:	4632      	mov	r2, r6
 8004bae:	463b      	mov	r3, r7
 8004bb0:	f7fb fcee 	bl	8000590 <__aeabi_dmul>
 8004bb4:	a35c      	add	r3, pc, #368	; (adr r3, 8004d28 <__ieee754_log+0x330>)
 8004bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bba:	f7fb fb33 	bl	8000224 <__adddf3>
 8004bbe:	4632      	mov	r2, r6
 8004bc0:	463b      	mov	r3, r7
 8004bc2:	f7fb fce5 	bl	8000590 <__aeabi_dmul>
 8004bc6:	a35a      	add	r3, pc, #360	; (adr r3, 8004d30 <__ieee754_log+0x338>)
 8004bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bcc:	f7fb fb2a 	bl	8000224 <__adddf3>
 8004bd0:	4642      	mov	r2, r8
 8004bd2:	464b      	mov	r3, r9
 8004bd4:	f7fb fcdc 	bl	8000590 <__aeabi_dmul>
 8004bd8:	a357      	add	r3, pc, #348	; (adr r3, 8004d38 <__ieee754_log+0x340>)
 8004bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bde:	4680      	mov	r8, r0
 8004be0:	4689      	mov	r9, r1
 8004be2:	4630      	mov	r0, r6
 8004be4:	4639      	mov	r1, r7
 8004be6:	f7fb fcd3 	bl	8000590 <__aeabi_dmul>
 8004bea:	a355      	add	r3, pc, #340	; (adr r3, 8004d40 <__ieee754_log+0x348>)
 8004bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf0:	f7fb fb18 	bl	8000224 <__adddf3>
 8004bf4:	4632      	mov	r2, r6
 8004bf6:	463b      	mov	r3, r7
 8004bf8:	f7fb fcca 	bl	8000590 <__aeabi_dmul>
 8004bfc:	a352      	add	r3, pc, #328	; (adr r3, 8004d48 <__ieee754_log+0x350>)
 8004bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c02:	f7fb fb0f 	bl	8000224 <__adddf3>
 8004c06:	4632      	mov	r2, r6
 8004c08:	463b      	mov	r3, r7
 8004c0a:	f7fb fcc1 	bl	8000590 <__aeabi_dmul>
 8004c0e:	460b      	mov	r3, r1
 8004c10:	4602      	mov	r2, r0
 8004c12:	4649      	mov	r1, r9
 8004c14:	4640      	mov	r0, r8
 8004c16:	f7fb fb05 	bl	8000224 <__adddf3>
 8004c1a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8004c1e:	9b01      	ldr	r3, [sp, #4]
 8004c20:	3551      	adds	r5, #81	; 0x51
 8004c22:	431d      	orrs	r5, r3
 8004c24:	2d00      	cmp	r5, #0
 8004c26:	4680      	mov	r8, r0
 8004c28:	4689      	mov	r9, r1
 8004c2a:	dd48      	ble.n	8004cbe <__ieee754_log+0x2c6>
 8004c2c:	4b4e      	ldr	r3, [pc, #312]	; (8004d68 <__ieee754_log+0x370>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	4650      	mov	r0, sl
 8004c32:	4659      	mov	r1, fp
 8004c34:	f7fb fcac 	bl	8000590 <__aeabi_dmul>
 8004c38:	4652      	mov	r2, sl
 8004c3a:	465b      	mov	r3, fp
 8004c3c:	f7fb fca8 	bl	8000590 <__aeabi_dmul>
 8004c40:	4602      	mov	r2, r0
 8004c42:	460b      	mov	r3, r1
 8004c44:	4606      	mov	r6, r0
 8004c46:	460f      	mov	r7, r1
 8004c48:	4640      	mov	r0, r8
 8004c4a:	4649      	mov	r1, r9
 8004c4c:	f7fb faea 	bl	8000224 <__adddf3>
 8004c50:	ec53 2b18 	vmov	r2, r3, d8
 8004c54:	f7fb fc9c 	bl	8000590 <__aeabi_dmul>
 8004c58:	4680      	mov	r8, r0
 8004c5a:	4689      	mov	r9, r1
 8004c5c:	b964      	cbnz	r4, 8004c78 <__ieee754_log+0x280>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	460b      	mov	r3, r1
 8004c62:	4630      	mov	r0, r6
 8004c64:	4639      	mov	r1, r7
 8004c66:	f7fb fadb 	bl	8000220 <__aeabi_dsub>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	4650      	mov	r0, sl
 8004c70:	4659      	mov	r1, fp
 8004c72:	f7fb fad5 	bl	8000220 <__aeabi_dsub>
 8004c76:	e6d6      	b.n	8004a26 <__ieee754_log+0x2e>
 8004c78:	a321      	add	r3, pc, #132	; (adr r3, 8004d00 <__ieee754_log+0x308>)
 8004c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7e:	ec51 0b19 	vmov	r0, r1, d9
 8004c82:	f7fb fc85 	bl	8000590 <__aeabi_dmul>
 8004c86:	a320      	add	r3, pc, #128	; (adr r3, 8004d08 <__ieee754_log+0x310>)
 8004c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8c:	4604      	mov	r4, r0
 8004c8e:	460d      	mov	r5, r1
 8004c90:	ec51 0b19 	vmov	r0, r1, d9
 8004c94:	f7fb fc7c 	bl	8000590 <__aeabi_dmul>
 8004c98:	4642      	mov	r2, r8
 8004c9a:	464b      	mov	r3, r9
 8004c9c:	f7fb fac2 	bl	8000224 <__adddf3>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	4630      	mov	r0, r6
 8004ca6:	4639      	mov	r1, r7
 8004ca8:	f7fb faba 	bl	8000220 <__aeabi_dsub>
 8004cac:	4652      	mov	r2, sl
 8004cae:	465b      	mov	r3, fp
 8004cb0:	f7fb fab6 	bl	8000220 <__aeabi_dsub>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	4620      	mov	r0, r4
 8004cba:	4629      	mov	r1, r5
 8004cbc:	e7d9      	b.n	8004c72 <__ieee754_log+0x27a>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	4650      	mov	r0, sl
 8004cc4:	4659      	mov	r1, fp
 8004cc6:	f7fb faab 	bl	8000220 <__aeabi_dsub>
 8004cca:	ec53 2b18 	vmov	r2, r3, d8
 8004cce:	f7fb fc5f 	bl	8000590 <__aeabi_dmul>
 8004cd2:	4606      	mov	r6, r0
 8004cd4:	460f      	mov	r7, r1
 8004cd6:	2c00      	cmp	r4, #0
 8004cd8:	f43f af23 	beq.w	8004b22 <__ieee754_log+0x12a>
 8004cdc:	a308      	add	r3, pc, #32	; (adr r3, 8004d00 <__ieee754_log+0x308>)
 8004cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce2:	ec51 0b19 	vmov	r0, r1, d9
 8004ce6:	f7fb fc53 	bl	8000590 <__aeabi_dmul>
 8004cea:	a307      	add	r3, pc, #28	; (adr r3, 8004d08 <__ieee754_log+0x310>)
 8004cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf0:	4604      	mov	r4, r0
 8004cf2:	460d      	mov	r5, r1
 8004cf4:	ec51 0b19 	vmov	r0, r1, d9
 8004cf8:	e727      	b.n	8004b4a <__ieee754_log+0x152>
 8004cfa:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8004d50 <__ieee754_log+0x358>
 8004cfe:	e694      	b.n	8004a2a <__ieee754_log+0x32>
 8004d00:	fee00000 	.word	0xfee00000
 8004d04:	3fe62e42 	.word	0x3fe62e42
 8004d08:	35793c76 	.word	0x35793c76
 8004d0c:	3dea39ef 	.word	0x3dea39ef
 8004d10:	55555555 	.word	0x55555555
 8004d14:	3fd55555 	.word	0x3fd55555
 8004d18:	df3e5244 	.word	0xdf3e5244
 8004d1c:	3fc2f112 	.word	0x3fc2f112
 8004d20:	96cb03de 	.word	0x96cb03de
 8004d24:	3fc74664 	.word	0x3fc74664
 8004d28:	94229359 	.word	0x94229359
 8004d2c:	3fd24924 	.word	0x3fd24924
 8004d30:	55555593 	.word	0x55555593
 8004d34:	3fe55555 	.word	0x3fe55555
 8004d38:	d078c69f 	.word	0xd078c69f
 8004d3c:	3fc39a09 	.word	0x3fc39a09
 8004d40:	1d8e78af 	.word	0x1d8e78af
 8004d44:	3fcc71c5 	.word	0x3fcc71c5
 8004d48:	9997fa04 	.word	0x9997fa04
 8004d4c:	3fd99999 	.word	0x3fd99999
	...
 8004d58:	c3500000 	.word	0xc3500000
 8004d5c:	43500000 	.word	0x43500000
 8004d60:	7fefffff 	.word	0x7fefffff
 8004d64:	3ff00000 	.word	0x3ff00000
 8004d68:	3fe00000 	.word	0x3fe00000
 8004d6c:	00000000 	.word	0x00000000

08004d70 <__ieee754_rem_pio2>:
 8004d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d74:	ed2d 8b02 	vpush	{d8}
 8004d78:	ec55 4b10 	vmov	r4, r5, d0
 8004d7c:	4bca      	ldr	r3, [pc, #808]	; (80050a8 <__ieee754_rem_pio2+0x338>)
 8004d7e:	b08b      	sub	sp, #44	; 0x2c
 8004d80:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8004d84:	4598      	cmp	r8, r3
 8004d86:	4682      	mov	sl, r0
 8004d88:	9502      	str	r5, [sp, #8]
 8004d8a:	dc08      	bgt.n	8004d9e <__ieee754_rem_pio2+0x2e>
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	2300      	movs	r3, #0
 8004d90:	ed80 0b00 	vstr	d0, [r0]
 8004d94:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004d98:	f04f 0b00 	mov.w	fp, #0
 8004d9c:	e028      	b.n	8004df0 <__ieee754_rem_pio2+0x80>
 8004d9e:	4bc3      	ldr	r3, [pc, #780]	; (80050ac <__ieee754_rem_pio2+0x33c>)
 8004da0:	4598      	cmp	r8, r3
 8004da2:	dc78      	bgt.n	8004e96 <__ieee754_rem_pio2+0x126>
 8004da4:	9b02      	ldr	r3, [sp, #8]
 8004da6:	4ec2      	ldr	r6, [pc, #776]	; (80050b0 <__ieee754_rem_pio2+0x340>)
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	ee10 0a10 	vmov	r0, s0
 8004dae:	a3b0      	add	r3, pc, #704	; (adr r3, 8005070 <__ieee754_rem_pio2+0x300>)
 8004db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db4:	4629      	mov	r1, r5
 8004db6:	dd39      	ble.n	8004e2c <__ieee754_rem_pio2+0xbc>
 8004db8:	f7fb fa32 	bl	8000220 <__aeabi_dsub>
 8004dbc:	45b0      	cmp	r8, r6
 8004dbe:	4604      	mov	r4, r0
 8004dc0:	460d      	mov	r5, r1
 8004dc2:	d01b      	beq.n	8004dfc <__ieee754_rem_pio2+0x8c>
 8004dc4:	a3ac      	add	r3, pc, #688	; (adr r3, 8005078 <__ieee754_rem_pio2+0x308>)
 8004dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dca:	f7fb fa29 	bl	8000220 <__aeabi_dsub>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	e9ca 2300 	strd	r2, r3, [sl]
 8004dd6:	4620      	mov	r0, r4
 8004dd8:	4629      	mov	r1, r5
 8004dda:	f7fb fa21 	bl	8000220 <__aeabi_dsub>
 8004dde:	a3a6      	add	r3, pc, #664	; (adr r3, 8005078 <__ieee754_rem_pio2+0x308>)
 8004de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de4:	f7fb fa1c 	bl	8000220 <__aeabi_dsub>
 8004de8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004dec:	f04f 0b01 	mov.w	fp, #1
 8004df0:	4658      	mov	r0, fp
 8004df2:	b00b      	add	sp, #44	; 0x2c
 8004df4:	ecbd 8b02 	vpop	{d8}
 8004df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dfc:	a3a0      	add	r3, pc, #640	; (adr r3, 8005080 <__ieee754_rem_pio2+0x310>)
 8004dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e02:	f7fb fa0d 	bl	8000220 <__aeabi_dsub>
 8004e06:	a3a0      	add	r3, pc, #640	; (adr r3, 8005088 <__ieee754_rem_pio2+0x318>)
 8004e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0c:	4604      	mov	r4, r0
 8004e0e:	460d      	mov	r5, r1
 8004e10:	f7fb fa06 	bl	8000220 <__aeabi_dsub>
 8004e14:	4602      	mov	r2, r0
 8004e16:	460b      	mov	r3, r1
 8004e18:	e9ca 2300 	strd	r2, r3, [sl]
 8004e1c:	4620      	mov	r0, r4
 8004e1e:	4629      	mov	r1, r5
 8004e20:	f7fb f9fe 	bl	8000220 <__aeabi_dsub>
 8004e24:	a398      	add	r3, pc, #608	; (adr r3, 8005088 <__ieee754_rem_pio2+0x318>)
 8004e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2a:	e7db      	b.n	8004de4 <__ieee754_rem_pio2+0x74>
 8004e2c:	f7fb f9fa 	bl	8000224 <__adddf3>
 8004e30:	45b0      	cmp	r8, r6
 8004e32:	4604      	mov	r4, r0
 8004e34:	460d      	mov	r5, r1
 8004e36:	d016      	beq.n	8004e66 <__ieee754_rem_pio2+0xf6>
 8004e38:	a38f      	add	r3, pc, #572	; (adr r3, 8005078 <__ieee754_rem_pio2+0x308>)
 8004e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e3e:	f7fb f9f1 	bl	8000224 <__adddf3>
 8004e42:	4602      	mov	r2, r0
 8004e44:	460b      	mov	r3, r1
 8004e46:	e9ca 2300 	strd	r2, r3, [sl]
 8004e4a:	4620      	mov	r0, r4
 8004e4c:	4629      	mov	r1, r5
 8004e4e:	f7fb f9e7 	bl	8000220 <__aeabi_dsub>
 8004e52:	a389      	add	r3, pc, #548	; (adr r3, 8005078 <__ieee754_rem_pio2+0x308>)
 8004e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e58:	f7fb f9e4 	bl	8000224 <__adddf3>
 8004e5c:	f04f 3bff 	mov.w	fp, #4294967295
 8004e60:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004e64:	e7c4      	b.n	8004df0 <__ieee754_rem_pio2+0x80>
 8004e66:	a386      	add	r3, pc, #536	; (adr r3, 8005080 <__ieee754_rem_pio2+0x310>)
 8004e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6c:	f7fb f9da 	bl	8000224 <__adddf3>
 8004e70:	a385      	add	r3, pc, #532	; (adr r3, 8005088 <__ieee754_rem_pio2+0x318>)
 8004e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e76:	4604      	mov	r4, r0
 8004e78:	460d      	mov	r5, r1
 8004e7a:	f7fb f9d3 	bl	8000224 <__adddf3>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	460b      	mov	r3, r1
 8004e82:	e9ca 2300 	strd	r2, r3, [sl]
 8004e86:	4620      	mov	r0, r4
 8004e88:	4629      	mov	r1, r5
 8004e8a:	f7fb f9c9 	bl	8000220 <__aeabi_dsub>
 8004e8e:	a37e      	add	r3, pc, #504	; (adr r3, 8005088 <__ieee754_rem_pio2+0x318>)
 8004e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e94:	e7e0      	b.n	8004e58 <__ieee754_rem_pio2+0xe8>
 8004e96:	4b87      	ldr	r3, [pc, #540]	; (80050b4 <__ieee754_rem_pio2+0x344>)
 8004e98:	4598      	cmp	r8, r3
 8004e9a:	f300 80d8 	bgt.w	800504e <__ieee754_rem_pio2+0x2de>
 8004e9e:	f000 f9a3 	bl	80051e8 <fabs>
 8004ea2:	ec55 4b10 	vmov	r4, r5, d0
 8004ea6:	ee10 0a10 	vmov	r0, s0
 8004eaa:	a379      	add	r3, pc, #484	; (adr r3, 8005090 <__ieee754_rem_pio2+0x320>)
 8004eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb0:	4629      	mov	r1, r5
 8004eb2:	f7fb fb6d 	bl	8000590 <__aeabi_dmul>
 8004eb6:	4b80      	ldr	r3, [pc, #512]	; (80050b8 <__ieee754_rem_pio2+0x348>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f7fb f9b3 	bl	8000224 <__adddf3>
 8004ebe:	f7fb fe17 	bl	8000af0 <__aeabi_d2iz>
 8004ec2:	4683      	mov	fp, r0
 8004ec4:	f7fb fafa 	bl	80004bc <__aeabi_i2d>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	460b      	mov	r3, r1
 8004ecc:	ec43 2b18 	vmov	d8, r2, r3
 8004ed0:	a367      	add	r3, pc, #412	; (adr r3, 8005070 <__ieee754_rem_pio2+0x300>)
 8004ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed6:	f7fb fb5b 	bl	8000590 <__aeabi_dmul>
 8004eda:	4602      	mov	r2, r0
 8004edc:	460b      	mov	r3, r1
 8004ede:	4620      	mov	r0, r4
 8004ee0:	4629      	mov	r1, r5
 8004ee2:	f7fb f99d 	bl	8000220 <__aeabi_dsub>
 8004ee6:	a364      	add	r3, pc, #400	; (adr r3, 8005078 <__ieee754_rem_pio2+0x308>)
 8004ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eec:	4606      	mov	r6, r0
 8004eee:	460f      	mov	r7, r1
 8004ef0:	ec51 0b18 	vmov	r0, r1, d8
 8004ef4:	f7fb fb4c 	bl	8000590 <__aeabi_dmul>
 8004ef8:	f1bb 0f1f 	cmp.w	fp, #31
 8004efc:	4604      	mov	r4, r0
 8004efe:	460d      	mov	r5, r1
 8004f00:	dc0d      	bgt.n	8004f1e <__ieee754_rem_pio2+0x1ae>
 8004f02:	4b6e      	ldr	r3, [pc, #440]	; (80050bc <__ieee754_rem_pio2+0x34c>)
 8004f04:	f10b 32ff 	add.w	r2, fp, #4294967295
 8004f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f0c:	4543      	cmp	r3, r8
 8004f0e:	d006      	beq.n	8004f1e <__ieee754_rem_pio2+0x1ae>
 8004f10:	4622      	mov	r2, r4
 8004f12:	462b      	mov	r3, r5
 8004f14:	4630      	mov	r0, r6
 8004f16:	4639      	mov	r1, r7
 8004f18:	f7fb f982 	bl	8000220 <__aeabi_dsub>
 8004f1c:	e00e      	b.n	8004f3c <__ieee754_rem_pio2+0x1cc>
 8004f1e:	462b      	mov	r3, r5
 8004f20:	4622      	mov	r2, r4
 8004f22:	4630      	mov	r0, r6
 8004f24:	4639      	mov	r1, r7
 8004f26:	f7fb f97b 	bl	8000220 <__aeabi_dsub>
 8004f2a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004f2e:	9303      	str	r3, [sp, #12]
 8004f30:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004f34:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8004f38:	2b10      	cmp	r3, #16
 8004f3a:	dc02      	bgt.n	8004f42 <__ieee754_rem_pio2+0x1d2>
 8004f3c:	e9ca 0100 	strd	r0, r1, [sl]
 8004f40:	e039      	b.n	8004fb6 <__ieee754_rem_pio2+0x246>
 8004f42:	a34f      	add	r3, pc, #316	; (adr r3, 8005080 <__ieee754_rem_pio2+0x310>)
 8004f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f48:	ec51 0b18 	vmov	r0, r1, d8
 8004f4c:	f7fb fb20 	bl	8000590 <__aeabi_dmul>
 8004f50:	4604      	mov	r4, r0
 8004f52:	460d      	mov	r5, r1
 8004f54:	4602      	mov	r2, r0
 8004f56:	460b      	mov	r3, r1
 8004f58:	4630      	mov	r0, r6
 8004f5a:	4639      	mov	r1, r7
 8004f5c:	f7fb f960 	bl	8000220 <__aeabi_dsub>
 8004f60:	4602      	mov	r2, r0
 8004f62:	460b      	mov	r3, r1
 8004f64:	4680      	mov	r8, r0
 8004f66:	4689      	mov	r9, r1
 8004f68:	4630      	mov	r0, r6
 8004f6a:	4639      	mov	r1, r7
 8004f6c:	f7fb f958 	bl	8000220 <__aeabi_dsub>
 8004f70:	4622      	mov	r2, r4
 8004f72:	462b      	mov	r3, r5
 8004f74:	f7fb f954 	bl	8000220 <__aeabi_dsub>
 8004f78:	a343      	add	r3, pc, #268	; (adr r3, 8005088 <__ieee754_rem_pio2+0x318>)
 8004f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7e:	4604      	mov	r4, r0
 8004f80:	460d      	mov	r5, r1
 8004f82:	ec51 0b18 	vmov	r0, r1, d8
 8004f86:	f7fb fb03 	bl	8000590 <__aeabi_dmul>
 8004f8a:	4622      	mov	r2, r4
 8004f8c:	462b      	mov	r3, r5
 8004f8e:	f7fb f947 	bl	8000220 <__aeabi_dsub>
 8004f92:	4602      	mov	r2, r0
 8004f94:	460b      	mov	r3, r1
 8004f96:	4604      	mov	r4, r0
 8004f98:	460d      	mov	r5, r1
 8004f9a:	4640      	mov	r0, r8
 8004f9c:	4649      	mov	r1, r9
 8004f9e:	f7fb f93f 	bl	8000220 <__aeabi_dsub>
 8004fa2:	9a03      	ldr	r2, [sp, #12]
 8004fa4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	2b31      	cmp	r3, #49	; 0x31
 8004fac:	dc24      	bgt.n	8004ff8 <__ieee754_rem_pio2+0x288>
 8004fae:	e9ca 0100 	strd	r0, r1, [sl]
 8004fb2:	4646      	mov	r6, r8
 8004fb4:	464f      	mov	r7, r9
 8004fb6:	e9da 8900 	ldrd	r8, r9, [sl]
 8004fba:	4630      	mov	r0, r6
 8004fbc:	4642      	mov	r2, r8
 8004fbe:	464b      	mov	r3, r9
 8004fc0:	4639      	mov	r1, r7
 8004fc2:	f7fb f92d 	bl	8000220 <__aeabi_dsub>
 8004fc6:	462b      	mov	r3, r5
 8004fc8:	4622      	mov	r2, r4
 8004fca:	f7fb f929 	bl	8000220 <__aeabi_dsub>
 8004fce:	9b02      	ldr	r3, [sp, #8]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004fd6:	f6bf af0b 	bge.w	8004df0 <__ieee754_rem_pio2+0x80>
 8004fda:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004fde:	f8ca 3004 	str.w	r3, [sl, #4]
 8004fe2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004fe6:	f8ca 8000 	str.w	r8, [sl]
 8004fea:	f8ca 0008 	str.w	r0, [sl, #8]
 8004fee:	f8ca 300c 	str.w	r3, [sl, #12]
 8004ff2:	f1cb 0b00 	rsb	fp, fp, #0
 8004ff6:	e6fb      	b.n	8004df0 <__ieee754_rem_pio2+0x80>
 8004ff8:	a327      	add	r3, pc, #156	; (adr r3, 8005098 <__ieee754_rem_pio2+0x328>)
 8004ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffe:	ec51 0b18 	vmov	r0, r1, d8
 8005002:	f7fb fac5 	bl	8000590 <__aeabi_dmul>
 8005006:	4604      	mov	r4, r0
 8005008:	460d      	mov	r5, r1
 800500a:	4602      	mov	r2, r0
 800500c:	460b      	mov	r3, r1
 800500e:	4640      	mov	r0, r8
 8005010:	4649      	mov	r1, r9
 8005012:	f7fb f905 	bl	8000220 <__aeabi_dsub>
 8005016:	4602      	mov	r2, r0
 8005018:	460b      	mov	r3, r1
 800501a:	4606      	mov	r6, r0
 800501c:	460f      	mov	r7, r1
 800501e:	4640      	mov	r0, r8
 8005020:	4649      	mov	r1, r9
 8005022:	f7fb f8fd 	bl	8000220 <__aeabi_dsub>
 8005026:	4622      	mov	r2, r4
 8005028:	462b      	mov	r3, r5
 800502a:	f7fb f8f9 	bl	8000220 <__aeabi_dsub>
 800502e:	a31c      	add	r3, pc, #112	; (adr r3, 80050a0 <__ieee754_rem_pio2+0x330>)
 8005030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005034:	4604      	mov	r4, r0
 8005036:	460d      	mov	r5, r1
 8005038:	ec51 0b18 	vmov	r0, r1, d8
 800503c:	f7fb faa8 	bl	8000590 <__aeabi_dmul>
 8005040:	4622      	mov	r2, r4
 8005042:	462b      	mov	r3, r5
 8005044:	f7fb f8ec 	bl	8000220 <__aeabi_dsub>
 8005048:	4604      	mov	r4, r0
 800504a:	460d      	mov	r5, r1
 800504c:	e760      	b.n	8004f10 <__ieee754_rem_pio2+0x1a0>
 800504e:	4b1c      	ldr	r3, [pc, #112]	; (80050c0 <__ieee754_rem_pio2+0x350>)
 8005050:	4598      	cmp	r8, r3
 8005052:	dd37      	ble.n	80050c4 <__ieee754_rem_pio2+0x354>
 8005054:	ee10 2a10 	vmov	r2, s0
 8005058:	462b      	mov	r3, r5
 800505a:	4620      	mov	r0, r4
 800505c:	4629      	mov	r1, r5
 800505e:	f7fb f8df 	bl	8000220 <__aeabi_dsub>
 8005062:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005066:	e9ca 0100 	strd	r0, r1, [sl]
 800506a:	e695      	b.n	8004d98 <__ieee754_rem_pio2+0x28>
 800506c:	f3af 8000 	nop.w
 8005070:	54400000 	.word	0x54400000
 8005074:	3ff921fb 	.word	0x3ff921fb
 8005078:	1a626331 	.word	0x1a626331
 800507c:	3dd0b461 	.word	0x3dd0b461
 8005080:	1a600000 	.word	0x1a600000
 8005084:	3dd0b461 	.word	0x3dd0b461
 8005088:	2e037073 	.word	0x2e037073
 800508c:	3ba3198a 	.word	0x3ba3198a
 8005090:	6dc9c883 	.word	0x6dc9c883
 8005094:	3fe45f30 	.word	0x3fe45f30
 8005098:	2e000000 	.word	0x2e000000
 800509c:	3ba3198a 	.word	0x3ba3198a
 80050a0:	252049c1 	.word	0x252049c1
 80050a4:	397b839a 	.word	0x397b839a
 80050a8:	3fe921fb 	.word	0x3fe921fb
 80050ac:	4002d97b 	.word	0x4002d97b
 80050b0:	3ff921fb 	.word	0x3ff921fb
 80050b4:	413921fb 	.word	0x413921fb
 80050b8:	3fe00000 	.word	0x3fe00000
 80050bc:	08005fa4 	.word	0x08005fa4
 80050c0:	7fefffff 	.word	0x7fefffff
 80050c4:	ea4f 5628 	mov.w	r6, r8, asr #20
 80050c8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80050cc:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80050d0:	4620      	mov	r0, r4
 80050d2:	460d      	mov	r5, r1
 80050d4:	f7fb fd0c 	bl	8000af0 <__aeabi_d2iz>
 80050d8:	f7fb f9f0 	bl	80004bc <__aeabi_i2d>
 80050dc:	4602      	mov	r2, r0
 80050de:	460b      	mov	r3, r1
 80050e0:	4620      	mov	r0, r4
 80050e2:	4629      	mov	r1, r5
 80050e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80050e8:	f7fb f89a 	bl	8000220 <__aeabi_dsub>
 80050ec:	4b21      	ldr	r3, [pc, #132]	; (8005174 <__ieee754_rem_pio2+0x404>)
 80050ee:	2200      	movs	r2, #0
 80050f0:	f7fb fa4e 	bl	8000590 <__aeabi_dmul>
 80050f4:	460d      	mov	r5, r1
 80050f6:	4604      	mov	r4, r0
 80050f8:	f7fb fcfa 	bl	8000af0 <__aeabi_d2iz>
 80050fc:	f7fb f9de 	bl	80004bc <__aeabi_i2d>
 8005100:	4602      	mov	r2, r0
 8005102:	460b      	mov	r3, r1
 8005104:	4620      	mov	r0, r4
 8005106:	4629      	mov	r1, r5
 8005108:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800510c:	f7fb f888 	bl	8000220 <__aeabi_dsub>
 8005110:	4b18      	ldr	r3, [pc, #96]	; (8005174 <__ieee754_rem_pio2+0x404>)
 8005112:	2200      	movs	r2, #0
 8005114:	f7fb fa3c 	bl	8000590 <__aeabi_dmul>
 8005118:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800511c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8005120:	2703      	movs	r7, #3
 8005122:	2400      	movs	r4, #0
 8005124:	2500      	movs	r5, #0
 8005126:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800512a:	4622      	mov	r2, r4
 800512c:	462b      	mov	r3, r5
 800512e:	46b9      	mov	r9, r7
 8005130:	3f01      	subs	r7, #1
 8005132:	f7fb fc95 	bl	8000a60 <__aeabi_dcmpeq>
 8005136:	2800      	cmp	r0, #0
 8005138:	d1f5      	bne.n	8005126 <__ieee754_rem_pio2+0x3b6>
 800513a:	4b0f      	ldr	r3, [pc, #60]	; (8005178 <__ieee754_rem_pio2+0x408>)
 800513c:	9301      	str	r3, [sp, #4]
 800513e:	2302      	movs	r3, #2
 8005140:	9300      	str	r3, [sp, #0]
 8005142:	4632      	mov	r2, r6
 8005144:	464b      	mov	r3, r9
 8005146:	4651      	mov	r1, sl
 8005148:	a804      	add	r0, sp, #16
 800514a:	f000 f861 	bl	8005210 <__kernel_rem_pio2>
 800514e:	9b02      	ldr	r3, [sp, #8]
 8005150:	2b00      	cmp	r3, #0
 8005152:	4683      	mov	fp, r0
 8005154:	f6bf ae4c 	bge.w	8004df0 <__ieee754_rem_pio2+0x80>
 8005158:	e9da 2100 	ldrd	r2, r1, [sl]
 800515c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005160:	e9ca 2300 	strd	r2, r3, [sl]
 8005164:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8005168:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800516c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8005170:	e73f      	b.n	8004ff2 <__ieee754_rem_pio2+0x282>
 8005172:	bf00      	nop
 8005174:	41700000 	.word	0x41700000
 8005178:	08006024 	.word	0x08006024
 800517c:	00000000 	.word	0x00000000

08005180 <hypot>:
 8005180:	b508      	push	{r3, lr}
 8005182:	ed2d 8b06 	vpush	{d8-d10}
 8005186:	eeb0 aa40 	vmov.f32	s20, s0
 800518a:	eef0 aa60 	vmov.f32	s21, s1
 800518e:	eeb0 9a41 	vmov.f32	s18, s2
 8005192:	eef0 9a61 	vmov.f32	s19, s3
 8005196:	f000 fb89 	bl	80058ac <__ieee754_hypot>
 800519a:	eeb0 8a40 	vmov.f32	s16, s0
 800519e:	eef0 8a60 	vmov.f32	s17, s1
 80051a2:	f000 f82a 	bl	80051fa <finite>
 80051a6:	b998      	cbnz	r0, 80051d0 <hypot+0x50>
 80051a8:	eeb0 0a4a 	vmov.f32	s0, s20
 80051ac:	eef0 0a6a 	vmov.f32	s1, s21
 80051b0:	f000 f823 	bl	80051fa <finite>
 80051b4:	b160      	cbz	r0, 80051d0 <hypot+0x50>
 80051b6:	eeb0 0a49 	vmov.f32	s0, s18
 80051ba:	eef0 0a69 	vmov.f32	s1, s19
 80051be:	f000 f81c 	bl	80051fa <finite>
 80051c2:	b128      	cbz	r0, 80051d0 <hypot+0x50>
 80051c4:	f7ff f942 	bl	800444c <__errno>
 80051c8:	ed9f 8b05 	vldr	d8, [pc, #20]	; 80051e0 <hypot+0x60>
 80051cc:	2322      	movs	r3, #34	; 0x22
 80051ce:	6003      	str	r3, [r0, #0]
 80051d0:	eeb0 0a48 	vmov.f32	s0, s16
 80051d4:	eef0 0a68 	vmov.f32	s1, s17
 80051d8:	ecbd 8b06 	vpop	{d8-d10}
 80051dc:	bd08      	pop	{r3, pc}
 80051de:	bf00      	nop
 80051e0:	00000000 	.word	0x00000000
 80051e4:	7ff00000 	.word	0x7ff00000

080051e8 <fabs>:
 80051e8:	ec51 0b10 	vmov	r0, r1, d0
 80051ec:	ee10 2a10 	vmov	r2, s0
 80051f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80051f4:	ec43 2b10 	vmov	d0, r2, r3
 80051f8:	4770      	bx	lr

080051fa <finite>:
 80051fa:	b082      	sub	sp, #8
 80051fc:	ed8d 0b00 	vstr	d0, [sp]
 8005200:	9801      	ldr	r0, [sp, #4]
 8005202:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005206:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800520a:	0fc0      	lsrs	r0, r0, #31
 800520c:	b002      	add	sp, #8
 800520e:	4770      	bx	lr

08005210 <__kernel_rem_pio2>:
 8005210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005214:	ed2d 8b02 	vpush	{d8}
 8005218:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800521c:	f112 0f14 	cmn.w	r2, #20
 8005220:	9306      	str	r3, [sp, #24]
 8005222:	9104      	str	r1, [sp, #16]
 8005224:	4bc2      	ldr	r3, [pc, #776]	; (8005530 <__kernel_rem_pio2+0x320>)
 8005226:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8005228:	9009      	str	r0, [sp, #36]	; 0x24
 800522a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800522e:	9300      	str	r3, [sp, #0]
 8005230:	9b06      	ldr	r3, [sp, #24]
 8005232:	f103 33ff 	add.w	r3, r3, #4294967295
 8005236:	bfa8      	it	ge
 8005238:	1ed4      	subge	r4, r2, #3
 800523a:	9305      	str	r3, [sp, #20]
 800523c:	bfb2      	itee	lt
 800523e:	2400      	movlt	r4, #0
 8005240:	2318      	movge	r3, #24
 8005242:	fb94 f4f3 	sdivge	r4, r4, r3
 8005246:	f06f 0317 	mvn.w	r3, #23
 800524a:	fb04 3303 	mla	r3, r4, r3, r3
 800524e:	eb03 0a02 	add.w	sl, r3, r2
 8005252:	9b00      	ldr	r3, [sp, #0]
 8005254:	9a05      	ldr	r2, [sp, #20]
 8005256:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8005520 <__kernel_rem_pio2+0x310>
 800525a:	eb03 0802 	add.w	r8, r3, r2
 800525e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8005260:	1aa7      	subs	r7, r4, r2
 8005262:	ae20      	add	r6, sp, #128	; 0x80
 8005264:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005268:	2500      	movs	r5, #0
 800526a:	4545      	cmp	r5, r8
 800526c:	dd13      	ble.n	8005296 <__kernel_rem_pio2+0x86>
 800526e:	9b06      	ldr	r3, [sp, #24]
 8005270:	aa20      	add	r2, sp, #128	; 0x80
 8005272:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005276:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800527a:	f04f 0800 	mov.w	r8, #0
 800527e:	9b00      	ldr	r3, [sp, #0]
 8005280:	4598      	cmp	r8, r3
 8005282:	dc31      	bgt.n	80052e8 <__kernel_rem_pio2+0xd8>
 8005284:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8005520 <__kernel_rem_pio2+0x310>
 8005288:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800528c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005290:	462f      	mov	r7, r5
 8005292:	2600      	movs	r6, #0
 8005294:	e01b      	b.n	80052ce <__kernel_rem_pio2+0xbe>
 8005296:	42ef      	cmn	r7, r5
 8005298:	d407      	bmi.n	80052aa <__kernel_rem_pio2+0x9a>
 800529a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800529e:	f7fb f90d 	bl	80004bc <__aeabi_i2d>
 80052a2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80052a6:	3501      	adds	r5, #1
 80052a8:	e7df      	b.n	800526a <__kernel_rem_pio2+0x5a>
 80052aa:	ec51 0b18 	vmov	r0, r1, d8
 80052ae:	e7f8      	b.n	80052a2 <__kernel_rem_pio2+0x92>
 80052b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052b4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80052b8:	f7fb f96a 	bl	8000590 <__aeabi_dmul>
 80052bc:	4602      	mov	r2, r0
 80052be:	460b      	mov	r3, r1
 80052c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052c4:	f7fa ffae 	bl	8000224 <__adddf3>
 80052c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052cc:	3601      	adds	r6, #1
 80052ce:	9b05      	ldr	r3, [sp, #20]
 80052d0:	429e      	cmp	r6, r3
 80052d2:	f1a7 0708 	sub.w	r7, r7, #8
 80052d6:	ddeb      	ble.n	80052b0 <__kernel_rem_pio2+0xa0>
 80052d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80052dc:	f108 0801 	add.w	r8, r8, #1
 80052e0:	ecab 7b02 	vstmia	fp!, {d7}
 80052e4:	3508      	adds	r5, #8
 80052e6:	e7ca      	b.n	800527e <__kernel_rem_pio2+0x6e>
 80052e8:	9b00      	ldr	r3, [sp, #0]
 80052ea:	aa0c      	add	r2, sp, #48	; 0x30
 80052ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80052f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80052f2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80052f4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80052f8:	9c00      	ldr	r4, [sp, #0]
 80052fa:	930a      	str	r3, [sp, #40]	; 0x28
 80052fc:	00e3      	lsls	r3, r4, #3
 80052fe:	9308      	str	r3, [sp, #32]
 8005300:	ab98      	add	r3, sp, #608	; 0x260
 8005302:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005306:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800530a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800530e:	ab70      	add	r3, sp, #448	; 0x1c0
 8005310:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8005314:	46c3      	mov	fp, r8
 8005316:	46a1      	mov	r9, r4
 8005318:	f1b9 0f00 	cmp.w	r9, #0
 800531c:	f1a5 0508 	sub.w	r5, r5, #8
 8005320:	dc77      	bgt.n	8005412 <__kernel_rem_pio2+0x202>
 8005322:	ec47 6b10 	vmov	d0, r6, r7
 8005326:	4650      	mov	r0, sl
 8005328:	f000 fbda 	bl	8005ae0 <scalbn>
 800532c:	ec57 6b10 	vmov	r6, r7, d0
 8005330:	2200      	movs	r2, #0
 8005332:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005336:	ee10 0a10 	vmov	r0, s0
 800533a:	4639      	mov	r1, r7
 800533c:	f7fb f928 	bl	8000590 <__aeabi_dmul>
 8005340:	ec41 0b10 	vmov	d0, r0, r1
 8005344:	f000 fd24 	bl	8005d90 <floor>
 8005348:	4b7a      	ldr	r3, [pc, #488]	; (8005534 <__kernel_rem_pio2+0x324>)
 800534a:	ec51 0b10 	vmov	r0, r1, d0
 800534e:	2200      	movs	r2, #0
 8005350:	f7fb f91e 	bl	8000590 <__aeabi_dmul>
 8005354:	4602      	mov	r2, r0
 8005356:	460b      	mov	r3, r1
 8005358:	4630      	mov	r0, r6
 800535a:	4639      	mov	r1, r7
 800535c:	f7fa ff60 	bl	8000220 <__aeabi_dsub>
 8005360:	460f      	mov	r7, r1
 8005362:	4606      	mov	r6, r0
 8005364:	f7fb fbc4 	bl	8000af0 <__aeabi_d2iz>
 8005368:	9002      	str	r0, [sp, #8]
 800536a:	f7fb f8a7 	bl	80004bc <__aeabi_i2d>
 800536e:	4602      	mov	r2, r0
 8005370:	460b      	mov	r3, r1
 8005372:	4630      	mov	r0, r6
 8005374:	4639      	mov	r1, r7
 8005376:	f7fa ff53 	bl	8000220 <__aeabi_dsub>
 800537a:	f1ba 0f00 	cmp.w	sl, #0
 800537e:	4606      	mov	r6, r0
 8005380:	460f      	mov	r7, r1
 8005382:	dd6d      	ble.n	8005460 <__kernel_rem_pio2+0x250>
 8005384:	1e61      	subs	r1, r4, #1
 8005386:	ab0c      	add	r3, sp, #48	; 0x30
 8005388:	9d02      	ldr	r5, [sp, #8]
 800538a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800538e:	f1ca 0018 	rsb	r0, sl, #24
 8005392:	fa43 f200 	asr.w	r2, r3, r0
 8005396:	4415      	add	r5, r2
 8005398:	4082      	lsls	r2, r0
 800539a:	1a9b      	subs	r3, r3, r2
 800539c:	aa0c      	add	r2, sp, #48	; 0x30
 800539e:	9502      	str	r5, [sp, #8]
 80053a0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80053a4:	f1ca 0217 	rsb	r2, sl, #23
 80053a8:	fa43 fb02 	asr.w	fp, r3, r2
 80053ac:	f1bb 0f00 	cmp.w	fp, #0
 80053b0:	dd65      	ble.n	800547e <__kernel_rem_pio2+0x26e>
 80053b2:	9b02      	ldr	r3, [sp, #8]
 80053b4:	2200      	movs	r2, #0
 80053b6:	3301      	adds	r3, #1
 80053b8:	9302      	str	r3, [sp, #8]
 80053ba:	4615      	mov	r5, r2
 80053bc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80053c0:	4294      	cmp	r4, r2
 80053c2:	f300 809f 	bgt.w	8005504 <__kernel_rem_pio2+0x2f4>
 80053c6:	f1ba 0f00 	cmp.w	sl, #0
 80053ca:	dd07      	ble.n	80053dc <__kernel_rem_pio2+0x1cc>
 80053cc:	f1ba 0f01 	cmp.w	sl, #1
 80053d0:	f000 80c1 	beq.w	8005556 <__kernel_rem_pio2+0x346>
 80053d4:	f1ba 0f02 	cmp.w	sl, #2
 80053d8:	f000 80c7 	beq.w	800556a <__kernel_rem_pio2+0x35a>
 80053dc:	f1bb 0f02 	cmp.w	fp, #2
 80053e0:	d14d      	bne.n	800547e <__kernel_rem_pio2+0x26e>
 80053e2:	4632      	mov	r2, r6
 80053e4:	463b      	mov	r3, r7
 80053e6:	4954      	ldr	r1, [pc, #336]	; (8005538 <__kernel_rem_pio2+0x328>)
 80053e8:	2000      	movs	r0, #0
 80053ea:	f7fa ff19 	bl	8000220 <__aeabi_dsub>
 80053ee:	4606      	mov	r6, r0
 80053f0:	460f      	mov	r7, r1
 80053f2:	2d00      	cmp	r5, #0
 80053f4:	d043      	beq.n	800547e <__kernel_rem_pio2+0x26e>
 80053f6:	4650      	mov	r0, sl
 80053f8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8005528 <__kernel_rem_pio2+0x318>
 80053fc:	f000 fb70 	bl	8005ae0 <scalbn>
 8005400:	4630      	mov	r0, r6
 8005402:	4639      	mov	r1, r7
 8005404:	ec53 2b10 	vmov	r2, r3, d0
 8005408:	f7fa ff0a 	bl	8000220 <__aeabi_dsub>
 800540c:	4606      	mov	r6, r0
 800540e:	460f      	mov	r7, r1
 8005410:	e035      	b.n	800547e <__kernel_rem_pio2+0x26e>
 8005412:	4b4a      	ldr	r3, [pc, #296]	; (800553c <__kernel_rem_pio2+0x32c>)
 8005414:	2200      	movs	r2, #0
 8005416:	4630      	mov	r0, r6
 8005418:	4639      	mov	r1, r7
 800541a:	f7fb f8b9 	bl	8000590 <__aeabi_dmul>
 800541e:	f7fb fb67 	bl	8000af0 <__aeabi_d2iz>
 8005422:	f7fb f84b 	bl	80004bc <__aeabi_i2d>
 8005426:	4602      	mov	r2, r0
 8005428:	460b      	mov	r3, r1
 800542a:	ec43 2b18 	vmov	d8, r2, r3
 800542e:	4b44      	ldr	r3, [pc, #272]	; (8005540 <__kernel_rem_pio2+0x330>)
 8005430:	2200      	movs	r2, #0
 8005432:	f7fb f8ad 	bl	8000590 <__aeabi_dmul>
 8005436:	4602      	mov	r2, r0
 8005438:	460b      	mov	r3, r1
 800543a:	4630      	mov	r0, r6
 800543c:	4639      	mov	r1, r7
 800543e:	f7fa feef 	bl	8000220 <__aeabi_dsub>
 8005442:	f7fb fb55 	bl	8000af0 <__aeabi_d2iz>
 8005446:	e9d5 2300 	ldrd	r2, r3, [r5]
 800544a:	f84b 0b04 	str.w	r0, [fp], #4
 800544e:	ec51 0b18 	vmov	r0, r1, d8
 8005452:	f7fa fee7 	bl	8000224 <__adddf3>
 8005456:	f109 39ff 	add.w	r9, r9, #4294967295
 800545a:	4606      	mov	r6, r0
 800545c:	460f      	mov	r7, r1
 800545e:	e75b      	b.n	8005318 <__kernel_rem_pio2+0x108>
 8005460:	d106      	bne.n	8005470 <__kernel_rem_pio2+0x260>
 8005462:	1e63      	subs	r3, r4, #1
 8005464:	aa0c      	add	r2, sp, #48	; 0x30
 8005466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800546a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800546e:	e79d      	b.n	80053ac <__kernel_rem_pio2+0x19c>
 8005470:	4b34      	ldr	r3, [pc, #208]	; (8005544 <__kernel_rem_pio2+0x334>)
 8005472:	2200      	movs	r2, #0
 8005474:	f7fb fb12 	bl	8000a9c <__aeabi_dcmpge>
 8005478:	2800      	cmp	r0, #0
 800547a:	d140      	bne.n	80054fe <__kernel_rem_pio2+0x2ee>
 800547c:	4683      	mov	fp, r0
 800547e:	2200      	movs	r2, #0
 8005480:	2300      	movs	r3, #0
 8005482:	4630      	mov	r0, r6
 8005484:	4639      	mov	r1, r7
 8005486:	f7fb faeb 	bl	8000a60 <__aeabi_dcmpeq>
 800548a:	2800      	cmp	r0, #0
 800548c:	f000 80c1 	beq.w	8005612 <__kernel_rem_pio2+0x402>
 8005490:	1e65      	subs	r5, r4, #1
 8005492:	462b      	mov	r3, r5
 8005494:	2200      	movs	r2, #0
 8005496:	9900      	ldr	r1, [sp, #0]
 8005498:	428b      	cmp	r3, r1
 800549a:	da6d      	bge.n	8005578 <__kernel_rem_pio2+0x368>
 800549c:	2a00      	cmp	r2, #0
 800549e:	f000 808a 	beq.w	80055b6 <__kernel_rem_pio2+0x3a6>
 80054a2:	ab0c      	add	r3, sp, #48	; 0x30
 80054a4:	f1aa 0a18 	sub.w	sl, sl, #24
 80054a8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f000 80ae 	beq.w	800560e <__kernel_rem_pio2+0x3fe>
 80054b2:	4650      	mov	r0, sl
 80054b4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8005528 <__kernel_rem_pio2+0x318>
 80054b8:	f000 fb12 	bl	8005ae0 <scalbn>
 80054bc:	1c6b      	adds	r3, r5, #1
 80054be:	00da      	lsls	r2, r3, #3
 80054c0:	9205      	str	r2, [sp, #20]
 80054c2:	ec57 6b10 	vmov	r6, r7, d0
 80054c6:	aa70      	add	r2, sp, #448	; 0x1c0
 80054c8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800553c <__kernel_rem_pio2+0x32c>
 80054cc:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80054d0:	462c      	mov	r4, r5
 80054d2:	f04f 0800 	mov.w	r8, #0
 80054d6:	2c00      	cmp	r4, #0
 80054d8:	f280 80d4 	bge.w	8005684 <__kernel_rem_pio2+0x474>
 80054dc:	462c      	mov	r4, r5
 80054de:	2c00      	cmp	r4, #0
 80054e0:	f2c0 8102 	blt.w	80056e8 <__kernel_rem_pio2+0x4d8>
 80054e4:	4b18      	ldr	r3, [pc, #96]	; (8005548 <__kernel_rem_pio2+0x338>)
 80054e6:	461e      	mov	r6, r3
 80054e8:	ab70      	add	r3, sp, #448	; 0x1c0
 80054ea:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80054ee:	1b2b      	subs	r3, r5, r4
 80054f0:	f04f 0900 	mov.w	r9, #0
 80054f4:	f04f 0a00 	mov.w	sl, #0
 80054f8:	2700      	movs	r7, #0
 80054fa:	9306      	str	r3, [sp, #24]
 80054fc:	e0e6      	b.n	80056cc <__kernel_rem_pio2+0x4bc>
 80054fe:	f04f 0b02 	mov.w	fp, #2
 8005502:	e756      	b.n	80053b2 <__kernel_rem_pio2+0x1a2>
 8005504:	f8d8 3000 	ldr.w	r3, [r8]
 8005508:	bb05      	cbnz	r5, 800554c <__kernel_rem_pio2+0x33c>
 800550a:	b123      	cbz	r3, 8005516 <__kernel_rem_pio2+0x306>
 800550c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005510:	f8c8 3000 	str.w	r3, [r8]
 8005514:	2301      	movs	r3, #1
 8005516:	3201      	adds	r2, #1
 8005518:	f108 0804 	add.w	r8, r8, #4
 800551c:	461d      	mov	r5, r3
 800551e:	e74f      	b.n	80053c0 <__kernel_rem_pio2+0x1b0>
	...
 800552c:	3ff00000 	.word	0x3ff00000
 8005530:	08006170 	.word	0x08006170
 8005534:	40200000 	.word	0x40200000
 8005538:	3ff00000 	.word	0x3ff00000
 800553c:	3e700000 	.word	0x3e700000
 8005540:	41700000 	.word	0x41700000
 8005544:	3fe00000 	.word	0x3fe00000
 8005548:	08006130 	.word	0x08006130
 800554c:	1acb      	subs	r3, r1, r3
 800554e:	f8c8 3000 	str.w	r3, [r8]
 8005552:	462b      	mov	r3, r5
 8005554:	e7df      	b.n	8005516 <__kernel_rem_pio2+0x306>
 8005556:	1e62      	subs	r2, r4, #1
 8005558:	ab0c      	add	r3, sp, #48	; 0x30
 800555a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800555e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005562:	a90c      	add	r1, sp, #48	; 0x30
 8005564:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005568:	e738      	b.n	80053dc <__kernel_rem_pio2+0x1cc>
 800556a:	1e62      	subs	r2, r4, #1
 800556c:	ab0c      	add	r3, sp, #48	; 0x30
 800556e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005572:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005576:	e7f4      	b.n	8005562 <__kernel_rem_pio2+0x352>
 8005578:	a90c      	add	r1, sp, #48	; 0x30
 800557a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800557e:	3b01      	subs	r3, #1
 8005580:	430a      	orrs	r2, r1
 8005582:	e788      	b.n	8005496 <__kernel_rem_pio2+0x286>
 8005584:	3301      	adds	r3, #1
 8005586:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800558a:	2900      	cmp	r1, #0
 800558c:	d0fa      	beq.n	8005584 <__kernel_rem_pio2+0x374>
 800558e:	9a08      	ldr	r2, [sp, #32]
 8005590:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8005594:	446a      	add	r2, sp
 8005596:	3a98      	subs	r2, #152	; 0x98
 8005598:	9208      	str	r2, [sp, #32]
 800559a:	9a06      	ldr	r2, [sp, #24]
 800559c:	a920      	add	r1, sp, #128	; 0x80
 800559e:	18a2      	adds	r2, r4, r2
 80055a0:	18e3      	adds	r3, r4, r3
 80055a2:	f104 0801 	add.w	r8, r4, #1
 80055a6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80055aa:	9302      	str	r3, [sp, #8]
 80055ac:	9b02      	ldr	r3, [sp, #8]
 80055ae:	4543      	cmp	r3, r8
 80055b0:	da04      	bge.n	80055bc <__kernel_rem_pio2+0x3ac>
 80055b2:	461c      	mov	r4, r3
 80055b4:	e6a2      	b.n	80052fc <__kernel_rem_pio2+0xec>
 80055b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80055b8:	2301      	movs	r3, #1
 80055ba:	e7e4      	b.n	8005586 <__kernel_rem_pio2+0x376>
 80055bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055be:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80055c2:	f7fa ff7b 	bl	80004bc <__aeabi_i2d>
 80055c6:	e8e5 0102 	strd	r0, r1, [r5], #8
 80055ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055cc:	46ab      	mov	fp, r5
 80055ce:	461c      	mov	r4, r3
 80055d0:	f04f 0900 	mov.w	r9, #0
 80055d4:	2600      	movs	r6, #0
 80055d6:	2700      	movs	r7, #0
 80055d8:	9b05      	ldr	r3, [sp, #20]
 80055da:	4599      	cmp	r9, r3
 80055dc:	dd06      	ble.n	80055ec <__kernel_rem_pio2+0x3dc>
 80055de:	9b08      	ldr	r3, [sp, #32]
 80055e0:	e8e3 6702 	strd	r6, r7, [r3], #8
 80055e4:	f108 0801 	add.w	r8, r8, #1
 80055e8:	9308      	str	r3, [sp, #32]
 80055ea:	e7df      	b.n	80055ac <__kernel_rem_pio2+0x39c>
 80055ec:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80055f0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80055f4:	f7fa ffcc 	bl	8000590 <__aeabi_dmul>
 80055f8:	4602      	mov	r2, r0
 80055fa:	460b      	mov	r3, r1
 80055fc:	4630      	mov	r0, r6
 80055fe:	4639      	mov	r1, r7
 8005600:	f7fa fe10 	bl	8000224 <__adddf3>
 8005604:	f109 0901 	add.w	r9, r9, #1
 8005608:	4606      	mov	r6, r0
 800560a:	460f      	mov	r7, r1
 800560c:	e7e4      	b.n	80055d8 <__kernel_rem_pio2+0x3c8>
 800560e:	3d01      	subs	r5, #1
 8005610:	e747      	b.n	80054a2 <__kernel_rem_pio2+0x292>
 8005612:	ec47 6b10 	vmov	d0, r6, r7
 8005616:	f1ca 0000 	rsb	r0, sl, #0
 800561a:	f000 fa61 	bl	8005ae0 <scalbn>
 800561e:	ec57 6b10 	vmov	r6, r7, d0
 8005622:	4ba0      	ldr	r3, [pc, #640]	; (80058a4 <__kernel_rem_pio2+0x694>)
 8005624:	ee10 0a10 	vmov	r0, s0
 8005628:	2200      	movs	r2, #0
 800562a:	4639      	mov	r1, r7
 800562c:	f7fb fa36 	bl	8000a9c <__aeabi_dcmpge>
 8005630:	b1f8      	cbz	r0, 8005672 <__kernel_rem_pio2+0x462>
 8005632:	4b9d      	ldr	r3, [pc, #628]	; (80058a8 <__kernel_rem_pio2+0x698>)
 8005634:	2200      	movs	r2, #0
 8005636:	4630      	mov	r0, r6
 8005638:	4639      	mov	r1, r7
 800563a:	f7fa ffa9 	bl	8000590 <__aeabi_dmul>
 800563e:	f7fb fa57 	bl	8000af0 <__aeabi_d2iz>
 8005642:	4680      	mov	r8, r0
 8005644:	f7fa ff3a 	bl	80004bc <__aeabi_i2d>
 8005648:	4b96      	ldr	r3, [pc, #600]	; (80058a4 <__kernel_rem_pio2+0x694>)
 800564a:	2200      	movs	r2, #0
 800564c:	f7fa ffa0 	bl	8000590 <__aeabi_dmul>
 8005650:	460b      	mov	r3, r1
 8005652:	4602      	mov	r2, r0
 8005654:	4639      	mov	r1, r7
 8005656:	4630      	mov	r0, r6
 8005658:	f7fa fde2 	bl	8000220 <__aeabi_dsub>
 800565c:	f7fb fa48 	bl	8000af0 <__aeabi_d2iz>
 8005660:	1c65      	adds	r5, r4, #1
 8005662:	ab0c      	add	r3, sp, #48	; 0x30
 8005664:	f10a 0a18 	add.w	sl, sl, #24
 8005668:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800566c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8005670:	e71f      	b.n	80054b2 <__kernel_rem_pio2+0x2a2>
 8005672:	4630      	mov	r0, r6
 8005674:	4639      	mov	r1, r7
 8005676:	f7fb fa3b 	bl	8000af0 <__aeabi_d2iz>
 800567a:	ab0c      	add	r3, sp, #48	; 0x30
 800567c:	4625      	mov	r5, r4
 800567e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005682:	e716      	b.n	80054b2 <__kernel_rem_pio2+0x2a2>
 8005684:	ab0c      	add	r3, sp, #48	; 0x30
 8005686:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800568a:	f7fa ff17 	bl	80004bc <__aeabi_i2d>
 800568e:	4632      	mov	r2, r6
 8005690:	463b      	mov	r3, r7
 8005692:	f7fa ff7d 	bl	8000590 <__aeabi_dmul>
 8005696:	4642      	mov	r2, r8
 8005698:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800569c:	464b      	mov	r3, r9
 800569e:	4630      	mov	r0, r6
 80056a0:	4639      	mov	r1, r7
 80056a2:	f7fa ff75 	bl	8000590 <__aeabi_dmul>
 80056a6:	3c01      	subs	r4, #1
 80056a8:	4606      	mov	r6, r0
 80056aa:	460f      	mov	r7, r1
 80056ac:	e713      	b.n	80054d6 <__kernel_rem_pio2+0x2c6>
 80056ae:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80056b2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80056b6:	f7fa ff6b 	bl	8000590 <__aeabi_dmul>
 80056ba:	4602      	mov	r2, r0
 80056bc:	460b      	mov	r3, r1
 80056be:	4648      	mov	r0, r9
 80056c0:	4651      	mov	r1, sl
 80056c2:	f7fa fdaf 	bl	8000224 <__adddf3>
 80056c6:	3701      	adds	r7, #1
 80056c8:	4681      	mov	r9, r0
 80056ca:	468a      	mov	sl, r1
 80056cc:	9b00      	ldr	r3, [sp, #0]
 80056ce:	429f      	cmp	r7, r3
 80056d0:	dc02      	bgt.n	80056d8 <__kernel_rem_pio2+0x4c8>
 80056d2:	9b06      	ldr	r3, [sp, #24]
 80056d4:	429f      	cmp	r7, r3
 80056d6:	ddea      	ble.n	80056ae <__kernel_rem_pio2+0x49e>
 80056d8:	9a06      	ldr	r2, [sp, #24]
 80056da:	ab48      	add	r3, sp, #288	; 0x120
 80056dc:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 80056e0:	e9c6 9a00 	strd	r9, sl, [r6]
 80056e4:	3c01      	subs	r4, #1
 80056e6:	e6fa      	b.n	80054de <__kernel_rem_pio2+0x2ce>
 80056e8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	dc0b      	bgt.n	8005706 <__kernel_rem_pio2+0x4f6>
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	dc39      	bgt.n	8005766 <__kernel_rem_pio2+0x556>
 80056f2:	d05d      	beq.n	80057b0 <__kernel_rem_pio2+0x5a0>
 80056f4:	9b02      	ldr	r3, [sp, #8]
 80056f6:	f003 0007 	and.w	r0, r3, #7
 80056fa:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80056fe:	ecbd 8b02 	vpop	{d8}
 8005702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005706:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8005708:	2b03      	cmp	r3, #3
 800570a:	d1f3      	bne.n	80056f4 <__kernel_rem_pio2+0x4e4>
 800570c:	9b05      	ldr	r3, [sp, #20]
 800570e:	9500      	str	r5, [sp, #0]
 8005710:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8005714:	eb0d 0403 	add.w	r4, sp, r3
 8005718:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800571c:	46a2      	mov	sl, r4
 800571e:	9b00      	ldr	r3, [sp, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	f1aa 0a08 	sub.w	sl, sl, #8
 8005726:	dc69      	bgt.n	80057fc <__kernel_rem_pio2+0x5ec>
 8005728:	46aa      	mov	sl, r5
 800572a:	f1ba 0f01 	cmp.w	sl, #1
 800572e:	f1a4 0408 	sub.w	r4, r4, #8
 8005732:	f300 8083 	bgt.w	800583c <__kernel_rem_pio2+0x62c>
 8005736:	9c05      	ldr	r4, [sp, #20]
 8005738:	ab48      	add	r3, sp, #288	; 0x120
 800573a:	441c      	add	r4, r3
 800573c:	2000      	movs	r0, #0
 800573e:	2100      	movs	r1, #0
 8005740:	2d01      	cmp	r5, #1
 8005742:	f300 809a 	bgt.w	800587a <__kernel_rem_pio2+0x66a>
 8005746:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800574a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800574e:	f1bb 0f00 	cmp.w	fp, #0
 8005752:	f040 8098 	bne.w	8005886 <__kernel_rem_pio2+0x676>
 8005756:	9b04      	ldr	r3, [sp, #16]
 8005758:	e9c3 7800 	strd	r7, r8, [r3]
 800575c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005760:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005764:	e7c6      	b.n	80056f4 <__kernel_rem_pio2+0x4e4>
 8005766:	9e05      	ldr	r6, [sp, #20]
 8005768:	ab48      	add	r3, sp, #288	; 0x120
 800576a:	441e      	add	r6, r3
 800576c:	462c      	mov	r4, r5
 800576e:	2000      	movs	r0, #0
 8005770:	2100      	movs	r1, #0
 8005772:	2c00      	cmp	r4, #0
 8005774:	da33      	bge.n	80057de <__kernel_rem_pio2+0x5ce>
 8005776:	f1bb 0f00 	cmp.w	fp, #0
 800577a:	d036      	beq.n	80057ea <__kernel_rem_pio2+0x5da>
 800577c:	4602      	mov	r2, r0
 800577e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005782:	9c04      	ldr	r4, [sp, #16]
 8005784:	e9c4 2300 	strd	r2, r3, [r4]
 8005788:	4602      	mov	r2, r0
 800578a:	460b      	mov	r3, r1
 800578c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8005790:	f7fa fd46 	bl	8000220 <__aeabi_dsub>
 8005794:	ae4a      	add	r6, sp, #296	; 0x128
 8005796:	2401      	movs	r4, #1
 8005798:	42a5      	cmp	r5, r4
 800579a:	da29      	bge.n	80057f0 <__kernel_rem_pio2+0x5e0>
 800579c:	f1bb 0f00 	cmp.w	fp, #0
 80057a0:	d002      	beq.n	80057a8 <__kernel_rem_pio2+0x598>
 80057a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80057a6:	4619      	mov	r1, r3
 80057a8:	9b04      	ldr	r3, [sp, #16]
 80057aa:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80057ae:	e7a1      	b.n	80056f4 <__kernel_rem_pio2+0x4e4>
 80057b0:	9c05      	ldr	r4, [sp, #20]
 80057b2:	ab48      	add	r3, sp, #288	; 0x120
 80057b4:	441c      	add	r4, r3
 80057b6:	2000      	movs	r0, #0
 80057b8:	2100      	movs	r1, #0
 80057ba:	2d00      	cmp	r5, #0
 80057bc:	da09      	bge.n	80057d2 <__kernel_rem_pio2+0x5c2>
 80057be:	f1bb 0f00 	cmp.w	fp, #0
 80057c2:	d002      	beq.n	80057ca <__kernel_rem_pio2+0x5ba>
 80057c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80057c8:	4619      	mov	r1, r3
 80057ca:	9b04      	ldr	r3, [sp, #16]
 80057cc:	e9c3 0100 	strd	r0, r1, [r3]
 80057d0:	e790      	b.n	80056f4 <__kernel_rem_pio2+0x4e4>
 80057d2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80057d6:	f7fa fd25 	bl	8000224 <__adddf3>
 80057da:	3d01      	subs	r5, #1
 80057dc:	e7ed      	b.n	80057ba <__kernel_rem_pio2+0x5aa>
 80057de:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80057e2:	f7fa fd1f 	bl	8000224 <__adddf3>
 80057e6:	3c01      	subs	r4, #1
 80057e8:	e7c3      	b.n	8005772 <__kernel_rem_pio2+0x562>
 80057ea:	4602      	mov	r2, r0
 80057ec:	460b      	mov	r3, r1
 80057ee:	e7c8      	b.n	8005782 <__kernel_rem_pio2+0x572>
 80057f0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80057f4:	f7fa fd16 	bl	8000224 <__adddf3>
 80057f8:	3401      	adds	r4, #1
 80057fa:	e7cd      	b.n	8005798 <__kernel_rem_pio2+0x588>
 80057fc:	e9da 8900 	ldrd	r8, r9, [sl]
 8005800:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8005804:	9b00      	ldr	r3, [sp, #0]
 8005806:	3b01      	subs	r3, #1
 8005808:	9300      	str	r3, [sp, #0]
 800580a:	4632      	mov	r2, r6
 800580c:	463b      	mov	r3, r7
 800580e:	4640      	mov	r0, r8
 8005810:	4649      	mov	r1, r9
 8005812:	f7fa fd07 	bl	8000224 <__adddf3>
 8005816:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800581a:	4602      	mov	r2, r0
 800581c:	460b      	mov	r3, r1
 800581e:	4640      	mov	r0, r8
 8005820:	4649      	mov	r1, r9
 8005822:	f7fa fcfd 	bl	8000220 <__aeabi_dsub>
 8005826:	4632      	mov	r2, r6
 8005828:	463b      	mov	r3, r7
 800582a:	f7fa fcfb 	bl	8000224 <__adddf3>
 800582e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8005832:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005836:	ed8a 7b00 	vstr	d7, [sl]
 800583a:	e770      	b.n	800571e <__kernel_rem_pio2+0x50e>
 800583c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005840:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8005844:	4640      	mov	r0, r8
 8005846:	4632      	mov	r2, r6
 8005848:	463b      	mov	r3, r7
 800584a:	4649      	mov	r1, r9
 800584c:	f7fa fcea 	bl	8000224 <__adddf3>
 8005850:	e9cd 0100 	strd	r0, r1, [sp]
 8005854:	4602      	mov	r2, r0
 8005856:	460b      	mov	r3, r1
 8005858:	4640      	mov	r0, r8
 800585a:	4649      	mov	r1, r9
 800585c:	f7fa fce0 	bl	8000220 <__aeabi_dsub>
 8005860:	4632      	mov	r2, r6
 8005862:	463b      	mov	r3, r7
 8005864:	f7fa fcde 	bl	8000224 <__adddf3>
 8005868:	ed9d 7b00 	vldr	d7, [sp]
 800586c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005870:	ed84 7b00 	vstr	d7, [r4]
 8005874:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005878:	e757      	b.n	800572a <__kernel_rem_pio2+0x51a>
 800587a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800587e:	f7fa fcd1 	bl	8000224 <__adddf3>
 8005882:	3d01      	subs	r5, #1
 8005884:	e75c      	b.n	8005740 <__kernel_rem_pio2+0x530>
 8005886:	9b04      	ldr	r3, [sp, #16]
 8005888:	9a04      	ldr	r2, [sp, #16]
 800588a:	601f      	str	r7, [r3, #0]
 800588c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8005890:	605c      	str	r4, [r3, #4]
 8005892:	609d      	str	r5, [r3, #8]
 8005894:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005898:	60d3      	str	r3, [r2, #12]
 800589a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800589e:	6110      	str	r0, [r2, #16]
 80058a0:	6153      	str	r3, [r2, #20]
 80058a2:	e727      	b.n	80056f4 <__kernel_rem_pio2+0x4e4>
 80058a4:	41700000 	.word	0x41700000
 80058a8:	3e700000 	.word	0x3e700000

080058ac <__ieee754_hypot>:
 80058ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058b0:	ec51 0b10 	vmov	r0, r1, d0
 80058b4:	ec53 2b11 	vmov	r2, r3, d1
 80058b8:	ed2d 8b04 	vpush	{d8-d9}
 80058bc:	f021 4500 	bic.w	r5, r1, #2147483648	; 0x80000000
 80058c0:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80058c4:	42a5      	cmp	r5, r4
 80058c6:	b083      	sub	sp, #12
 80058c8:	da06      	bge.n	80058d8 <__ieee754_hypot+0x2c>
 80058ca:	462e      	mov	r6, r5
 80058cc:	ee11 0a10 	vmov	r0, s2
 80058d0:	ee10 2a10 	vmov	r2, s0
 80058d4:	4625      	mov	r5, r4
 80058d6:	4634      	mov	r4, r6
 80058d8:	1b2b      	subs	r3, r5, r4
 80058da:	f1b3 7f70 	cmp.w	r3, #62914560	; 0x3c00000
 80058de:	4629      	mov	r1, r5
 80058e0:	4682      	mov	sl, r0
 80058e2:	46ab      	mov	fp, r5
 80058e4:	4616      	mov	r6, r2
 80058e6:	4627      	mov	r7, r4
 80058e8:	dd05      	ble.n	80058f6 <__ieee754_hypot+0x4a>
 80058ea:	4623      	mov	r3, r4
 80058ec:	f7fa fc9a 	bl	8000224 <__adddf3>
 80058f0:	4682      	mov	sl, r0
 80058f2:	468b      	mov	fp, r1
 80058f4:	e017      	b.n	8005926 <__ieee754_hypot+0x7a>
 80058f6:	4b76      	ldr	r3, [pc, #472]	; (8005ad0 <__ieee754_hypot+0x224>)
 80058f8:	429d      	cmp	r5, r3
 80058fa:	f340 809a 	ble.w	8005a32 <__ieee754_hypot+0x186>
 80058fe:	4b75      	ldr	r3, [pc, #468]	; (8005ad4 <__ieee754_hypot+0x228>)
 8005900:	429d      	cmp	r5, r3
 8005902:	dd17      	ble.n	8005934 <__ieee754_hypot+0x88>
 8005904:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8005908:	4305      	orrs	r5, r0
 800590a:	d004      	beq.n	8005916 <__ieee754_hypot+0x6a>
 800590c:	4623      	mov	r3, r4
 800590e:	f7fa fc89 	bl	8000224 <__adddf3>
 8005912:	4682      	mov	sl, r0
 8005914:	468b      	mov	fp, r1
 8005916:	f084 44ff 	eor.w	r4, r4, #2139095040	; 0x7f800000
 800591a:	f484 04e0 	eor.w	r4, r4, #7340032	; 0x700000
 800591e:	4334      	orrs	r4, r6
 8005920:	d101      	bne.n	8005926 <__ieee754_hypot+0x7a>
 8005922:	46b2      	mov	sl, r6
 8005924:	46bb      	mov	fp, r7
 8005926:	ec4b ab10 	vmov	d0, sl, fp
 800592a:	b003      	add	sp, #12
 800592c:	ecbd 8b04 	vpop	{d8-d9}
 8005930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005934:	f1a5 5516 	sub.w	r5, r5, #629145600	; 0x25800000
 8005938:	f1a4 5416 	sub.w	r4, r4, #629145600	; 0x25800000
 800593c:	46ab      	mov	fp, r5
 800593e:	4627      	mov	r7, r4
 8005940:	f44f 7316 	mov.w	r3, #600	; 0x258
 8005944:	9301      	str	r3, [sp, #4]
 8005946:	4b64      	ldr	r3, [pc, #400]	; (8005ad8 <__ieee754_hypot+0x22c>)
 8005948:	429c      	cmp	r4, r3
 800594a:	dc19      	bgt.n	8005980 <__ieee754_hypot+0xd4>
 800594c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005950:	da71      	bge.n	8005a36 <__ieee754_hypot+0x18a>
 8005952:	4633      	mov	r3, r6
 8005954:	4323      	orrs	r3, r4
 8005956:	d0e6      	beq.n	8005926 <__ieee754_hypot+0x7a>
 8005958:	4b60      	ldr	r3, [pc, #384]	; (8005adc <__ieee754_hypot+0x230>)
 800595a:	2200      	movs	r2, #0
 800595c:	4630      	mov	r0, r6
 800595e:	4639      	mov	r1, r7
 8005960:	f7fa fe16 	bl	8000590 <__aeabi_dmul>
 8005964:	4b5d      	ldr	r3, [pc, #372]	; (8005adc <__ieee754_hypot+0x230>)
 8005966:	4606      	mov	r6, r0
 8005968:	460f      	mov	r7, r1
 800596a:	4650      	mov	r0, sl
 800596c:	4659      	mov	r1, fp
 800596e:	2200      	movs	r2, #0
 8005970:	f7fa fe0e 	bl	8000590 <__aeabi_dmul>
 8005974:	9b01      	ldr	r3, [sp, #4]
 8005976:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800597a:	4682      	mov	sl, r0
 800597c:	468b      	mov	fp, r1
 800597e:	9301      	str	r3, [sp, #4]
 8005980:	4632      	mov	r2, r6
 8005982:	463b      	mov	r3, r7
 8005984:	4650      	mov	r0, sl
 8005986:	4659      	mov	r1, fp
 8005988:	f7fa fc4a 	bl	8000220 <__aeabi_dsub>
 800598c:	4602      	mov	r2, r0
 800598e:	460b      	mov	r3, r1
 8005990:	4680      	mov	r8, r0
 8005992:	4689      	mov	r9, r1
 8005994:	4630      	mov	r0, r6
 8005996:	4639      	mov	r1, r7
 8005998:	f7fb f86c 	bl	8000a74 <__aeabi_dcmplt>
 800599c:	2200      	movs	r2, #0
 800599e:	2800      	cmp	r0, #0
 80059a0:	d054      	beq.n	8005a4c <__ieee754_hypot+0x1a0>
 80059a2:	462b      	mov	r3, r5
 80059a4:	4610      	mov	r0, r2
 80059a6:	4629      	mov	r1, r5
 80059a8:	4614      	mov	r4, r2
 80059aa:	f7fa fdf1 	bl	8000590 <__aeabi_dmul>
 80059ae:	4632      	mov	r2, r6
 80059b0:	ec41 0b18 	vmov	d8, r0, r1
 80059b4:	463b      	mov	r3, r7
 80059b6:	4630      	mov	r0, r6
 80059b8:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 80059bc:	f7fa fde8 	bl	8000590 <__aeabi_dmul>
 80059c0:	4622      	mov	r2, r4
 80059c2:	4606      	mov	r6, r0
 80059c4:	460f      	mov	r7, r1
 80059c6:	462b      	mov	r3, r5
 80059c8:	4650      	mov	r0, sl
 80059ca:	4659      	mov	r1, fp
 80059cc:	f7fa fc2a 	bl	8000224 <__adddf3>
 80059d0:	4622      	mov	r2, r4
 80059d2:	4680      	mov	r8, r0
 80059d4:	4689      	mov	r9, r1
 80059d6:	462b      	mov	r3, r5
 80059d8:	4650      	mov	r0, sl
 80059da:	4659      	mov	r1, fp
 80059dc:	f7fa fc20 	bl	8000220 <__aeabi_dsub>
 80059e0:	4602      	mov	r2, r0
 80059e2:	460b      	mov	r3, r1
 80059e4:	4640      	mov	r0, r8
 80059e6:	4649      	mov	r1, r9
 80059e8:	f7fa fdd2 	bl	8000590 <__aeabi_dmul>
 80059ec:	4602      	mov	r2, r0
 80059ee:	460b      	mov	r3, r1
 80059f0:	4630      	mov	r0, r6
 80059f2:	4639      	mov	r1, r7
 80059f4:	f7fa fc14 	bl	8000220 <__aeabi_dsub>
 80059f8:	4602      	mov	r2, r0
 80059fa:	460b      	mov	r3, r1
 80059fc:	ec51 0b18 	vmov	r0, r1, d8
 8005a00:	f7fa fc0e 	bl	8000220 <__aeabi_dsub>
 8005a04:	ec41 0b10 	vmov	d0, r0, r1
 8005a08:	f000 f8e8 	bl	8005bdc <__ieee754_sqrt>
 8005a0c:	9b01      	ldr	r3, [sp, #4]
 8005a0e:	ec5b ab10 	vmov	sl, fp, d0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d087      	beq.n	8005926 <__ieee754_hypot+0x7a>
 8005a16:	051b      	lsls	r3, r3, #20
 8005a18:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8005a1c:	2000      	movs	r0, #0
 8005a1e:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8005a22:	4602      	mov	r2, r0
 8005a24:	460b      	mov	r3, r1
 8005a26:	ee10 0a10 	vmov	r0, s0
 8005a2a:	4659      	mov	r1, fp
 8005a2c:	f7fa fdb0 	bl	8000590 <__aeabi_dmul>
 8005a30:	e75e      	b.n	80058f0 <__ieee754_hypot+0x44>
 8005a32:	2300      	movs	r3, #0
 8005a34:	e786      	b.n	8005944 <__ieee754_hypot+0x98>
 8005a36:	9b01      	ldr	r3, [sp, #4]
 8005a38:	f105 5516 	add.w	r5, r5, #629145600	; 0x25800000
 8005a3c:	f104 5416 	add.w	r4, r4, #629145600	; 0x25800000
 8005a40:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005a44:	9301      	str	r3, [sp, #4]
 8005a46:	46ab      	mov	fp, r5
 8005a48:	4627      	mov	r7, r4
 8005a4a:	e799      	b.n	8005980 <__ieee754_hypot+0xd4>
 8005a4c:	4623      	mov	r3, r4
 8005a4e:	ec43 2b18 	vmov	d8, r2, r3
 8005a52:	2200      	movs	r2, #0
 8005a54:	f505 1380 	add.w	r3, r5, #1048576	; 0x100000
 8005a58:	ec51 0b18 	vmov	r0, r1, d8
 8005a5c:	4614      	mov	r4, r2
 8005a5e:	461d      	mov	r5, r3
 8005a60:	f7fa fd96 	bl	8000590 <__aeabi_dmul>
 8005a64:	4642      	mov	r2, r8
 8005a66:	ec41 0b19 	vmov	d9, r0, r1
 8005a6a:	464b      	mov	r3, r9
 8005a6c:	4640      	mov	r0, r8
 8005a6e:	f109 4100 	add.w	r1, r9, #2147483648	; 0x80000000
 8005a72:	f7fa fd8d 	bl	8000590 <__aeabi_dmul>
 8005a76:	4652      	mov	r2, sl
 8005a78:	465b      	mov	r3, fp
 8005a7a:	4680      	mov	r8, r0
 8005a7c:	4689      	mov	r9, r1
 8005a7e:	4650      	mov	r0, sl
 8005a80:	4659      	mov	r1, fp
 8005a82:	f7fa fbcf 	bl	8000224 <__adddf3>
 8005a86:	4622      	mov	r2, r4
 8005a88:	462b      	mov	r3, r5
 8005a8a:	f7fa fbc9 	bl	8000220 <__aeabi_dsub>
 8005a8e:	4632      	mov	r2, r6
 8005a90:	463b      	mov	r3, r7
 8005a92:	f7fa fd7d 	bl	8000590 <__aeabi_dmul>
 8005a96:	ec53 2b18 	vmov	r2, r3, d8
 8005a9a:	4682      	mov	sl, r0
 8005a9c:	468b      	mov	fp, r1
 8005a9e:	4630      	mov	r0, r6
 8005aa0:	4639      	mov	r1, r7
 8005aa2:	f7fa fbbd 	bl	8000220 <__aeabi_dsub>
 8005aa6:	4622      	mov	r2, r4
 8005aa8:	462b      	mov	r3, r5
 8005aaa:	f7fa fd71 	bl	8000590 <__aeabi_dmul>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	4650      	mov	r0, sl
 8005ab4:	4659      	mov	r1, fp
 8005ab6:	f7fa fbb5 	bl	8000224 <__adddf3>
 8005aba:	4602      	mov	r2, r0
 8005abc:	460b      	mov	r3, r1
 8005abe:	4640      	mov	r0, r8
 8005ac0:	4649      	mov	r1, r9
 8005ac2:	f7fa fbad 	bl	8000220 <__aeabi_dsub>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	460b      	mov	r3, r1
 8005aca:	ec51 0b19 	vmov	r0, r1, d9
 8005ace:	e797      	b.n	8005a00 <__ieee754_hypot+0x154>
 8005ad0:	5f300000 	.word	0x5f300000
 8005ad4:	7fefffff 	.word	0x7fefffff
 8005ad8:	20afffff 	.word	0x20afffff
 8005adc:	7fd00000 	.word	0x7fd00000

08005ae0 <scalbn>:
 8005ae0:	b570      	push	{r4, r5, r6, lr}
 8005ae2:	ec55 4b10 	vmov	r4, r5, d0
 8005ae6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8005aea:	4606      	mov	r6, r0
 8005aec:	462b      	mov	r3, r5
 8005aee:	b999      	cbnz	r1, 8005b18 <scalbn+0x38>
 8005af0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005af4:	4323      	orrs	r3, r4
 8005af6:	d03f      	beq.n	8005b78 <scalbn+0x98>
 8005af8:	4b35      	ldr	r3, [pc, #212]	; (8005bd0 <scalbn+0xf0>)
 8005afa:	4629      	mov	r1, r5
 8005afc:	ee10 0a10 	vmov	r0, s0
 8005b00:	2200      	movs	r2, #0
 8005b02:	f7fa fd45 	bl	8000590 <__aeabi_dmul>
 8005b06:	4b33      	ldr	r3, [pc, #204]	; (8005bd4 <scalbn+0xf4>)
 8005b08:	429e      	cmp	r6, r3
 8005b0a:	4604      	mov	r4, r0
 8005b0c:	460d      	mov	r5, r1
 8005b0e:	da10      	bge.n	8005b32 <scalbn+0x52>
 8005b10:	a327      	add	r3, pc, #156	; (adr r3, 8005bb0 <scalbn+0xd0>)
 8005b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b16:	e01f      	b.n	8005b58 <scalbn+0x78>
 8005b18:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005b1c:	4291      	cmp	r1, r2
 8005b1e:	d10c      	bne.n	8005b3a <scalbn+0x5a>
 8005b20:	ee10 2a10 	vmov	r2, s0
 8005b24:	4620      	mov	r0, r4
 8005b26:	4629      	mov	r1, r5
 8005b28:	f7fa fb7c 	bl	8000224 <__adddf3>
 8005b2c:	4604      	mov	r4, r0
 8005b2e:	460d      	mov	r5, r1
 8005b30:	e022      	b.n	8005b78 <scalbn+0x98>
 8005b32:	460b      	mov	r3, r1
 8005b34:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005b38:	3936      	subs	r1, #54	; 0x36
 8005b3a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8005b3e:	4296      	cmp	r6, r2
 8005b40:	dd0d      	ble.n	8005b5e <scalbn+0x7e>
 8005b42:	2d00      	cmp	r5, #0
 8005b44:	a11c      	add	r1, pc, #112	; (adr r1, 8005bb8 <scalbn+0xd8>)
 8005b46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b4a:	da02      	bge.n	8005b52 <scalbn+0x72>
 8005b4c:	a11c      	add	r1, pc, #112	; (adr r1, 8005bc0 <scalbn+0xe0>)
 8005b4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b52:	a319      	add	r3, pc, #100	; (adr r3, 8005bb8 <scalbn+0xd8>)
 8005b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b58:	f7fa fd1a 	bl	8000590 <__aeabi_dmul>
 8005b5c:	e7e6      	b.n	8005b2c <scalbn+0x4c>
 8005b5e:	1872      	adds	r2, r6, r1
 8005b60:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005b64:	428a      	cmp	r2, r1
 8005b66:	dcec      	bgt.n	8005b42 <scalbn+0x62>
 8005b68:	2a00      	cmp	r2, #0
 8005b6a:	dd08      	ble.n	8005b7e <scalbn+0x9e>
 8005b6c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005b70:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005b74:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005b78:	ec45 4b10 	vmov	d0, r4, r5
 8005b7c:	bd70      	pop	{r4, r5, r6, pc}
 8005b7e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005b82:	da08      	bge.n	8005b96 <scalbn+0xb6>
 8005b84:	2d00      	cmp	r5, #0
 8005b86:	a10a      	add	r1, pc, #40	; (adr r1, 8005bb0 <scalbn+0xd0>)
 8005b88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b8c:	dac0      	bge.n	8005b10 <scalbn+0x30>
 8005b8e:	a10e      	add	r1, pc, #56	; (adr r1, 8005bc8 <scalbn+0xe8>)
 8005b90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b94:	e7bc      	b.n	8005b10 <scalbn+0x30>
 8005b96:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005b9a:	3236      	adds	r2, #54	; 0x36
 8005b9c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005ba0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005ba4:	4620      	mov	r0, r4
 8005ba6:	4b0c      	ldr	r3, [pc, #48]	; (8005bd8 <scalbn+0xf8>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	e7d5      	b.n	8005b58 <scalbn+0x78>
 8005bac:	f3af 8000 	nop.w
 8005bb0:	c2f8f359 	.word	0xc2f8f359
 8005bb4:	01a56e1f 	.word	0x01a56e1f
 8005bb8:	8800759c 	.word	0x8800759c
 8005bbc:	7e37e43c 	.word	0x7e37e43c
 8005bc0:	8800759c 	.word	0x8800759c
 8005bc4:	fe37e43c 	.word	0xfe37e43c
 8005bc8:	c2f8f359 	.word	0xc2f8f359
 8005bcc:	81a56e1f 	.word	0x81a56e1f
 8005bd0:	43500000 	.word	0x43500000
 8005bd4:	ffff3cb0 	.word	0xffff3cb0
 8005bd8:	3c900000 	.word	0x3c900000

08005bdc <__ieee754_sqrt>:
 8005bdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005be0:	ec55 4b10 	vmov	r4, r5, d0
 8005be4:	4e67      	ldr	r6, [pc, #412]	; (8005d84 <__ieee754_sqrt+0x1a8>)
 8005be6:	43ae      	bics	r6, r5
 8005be8:	ee10 0a10 	vmov	r0, s0
 8005bec:	ee10 2a10 	vmov	r2, s0
 8005bf0:	4629      	mov	r1, r5
 8005bf2:	462b      	mov	r3, r5
 8005bf4:	d10d      	bne.n	8005c12 <__ieee754_sqrt+0x36>
 8005bf6:	f7fa fccb 	bl	8000590 <__aeabi_dmul>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	4620      	mov	r0, r4
 8005c00:	4629      	mov	r1, r5
 8005c02:	f7fa fb0f 	bl	8000224 <__adddf3>
 8005c06:	4604      	mov	r4, r0
 8005c08:	460d      	mov	r5, r1
 8005c0a:	ec45 4b10 	vmov	d0, r4, r5
 8005c0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c12:	2d00      	cmp	r5, #0
 8005c14:	dc0b      	bgt.n	8005c2e <__ieee754_sqrt+0x52>
 8005c16:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005c1a:	4326      	orrs	r6, r4
 8005c1c:	d0f5      	beq.n	8005c0a <__ieee754_sqrt+0x2e>
 8005c1e:	b135      	cbz	r5, 8005c2e <__ieee754_sqrt+0x52>
 8005c20:	f7fa fafe 	bl	8000220 <__aeabi_dsub>
 8005c24:	4602      	mov	r2, r0
 8005c26:	460b      	mov	r3, r1
 8005c28:	f7fa fddc 	bl	80007e4 <__aeabi_ddiv>
 8005c2c:	e7eb      	b.n	8005c06 <__ieee754_sqrt+0x2a>
 8005c2e:	1509      	asrs	r1, r1, #20
 8005c30:	f000 808d 	beq.w	8005d4e <__ieee754_sqrt+0x172>
 8005c34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c38:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8005c3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c40:	07c9      	lsls	r1, r1, #31
 8005c42:	bf5c      	itt	pl
 8005c44:	005b      	lslpl	r3, r3, #1
 8005c46:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8005c4a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005c4e:	bf58      	it	pl
 8005c50:	0052      	lslpl	r2, r2, #1
 8005c52:	2500      	movs	r5, #0
 8005c54:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005c58:	1076      	asrs	r6, r6, #1
 8005c5a:	0052      	lsls	r2, r2, #1
 8005c5c:	f04f 0e16 	mov.w	lr, #22
 8005c60:	46ac      	mov	ip, r5
 8005c62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c66:	eb0c 0001 	add.w	r0, ip, r1
 8005c6a:	4298      	cmp	r0, r3
 8005c6c:	bfde      	ittt	le
 8005c6e:	1a1b      	suble	r3, r3, r0
 8005c70:	eb00 0c01 	addle.w	ip, r0, r1
 8005c74:	186d      	addle	r5, r5, r1
 8005c76:	005b      	lsls	r3, r3, #1
 8005c78:	f1be 0e01 	subs.w	lr, lr, #1
 8005c7c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005c80:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005c84:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005c88:	d1ed      	bne.n	8005c66 <__ieee754_sqrt+0x8a>
 8005c8a:	4674      	mov	r4, lr
 8005c8c:	2720      	movs	r7, #32
 8005c8e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005c92:	4563      	cmp	r3, ip
 8005c94:	eb01 000e 	add.w	r0, r1, lr
 8005c98:	dc02      	bgt.n	8005ca0 <__ieee754_sqrt+0xc4>
 8005c9a:	d113      	bne.n	8005cc4 <__ieee754_sqrt+0xe8>
 8005c9c:	4290      	cmp	r0, r2
 8005c9e:	d811      	bhi.n	8005cc4 <__ieee754_sqrt+0xe8>
 8005ca0:	2800      	cmp	r0, #0
 8005ca2:	eb00 0e01 	add.w	lr, r0, r1
 8005ca6:	da57      	bge.n	8005d58 <__ieee754_sqrt+0x17c>
 8005ca8:	f1be 0f00 	cmp.w	lr, #0
 8005cac:	db54      	blt.n	8005d58 <__ieee754_sqrt+0x17c>
 8005cae:	f10c 0801 	add.w	r8, ip, #1
 8005cb2:	eba3 030c 	sub.w	r3, r3, ip
 8005cb6:	4290      	cmp	r0, r2
 8005cb8:	bf88      	it	hi
 8005cba:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8005cbe:	1a12      	subs	r2, r2, r0
 8005cc0:	440c      	add	r4, r1
 8005cc2:	46c4      	mov	ip, r8
 8005cc4:	005b      	lsls	r3, r3, #1
 8005cc6:	3f01      	subs	r7, #1
 8005cc8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005ccc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005cd0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005cd4:	d1dd      	bne.n	8005c92 <__ieee754_sqrt+0xb6>
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	d01b      	beq.n	8005d12 <__ieee754_sqrt+0x136>
 8005cda:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8005d88 <__ieee754_sqrt+0x1ac>
 8005cde:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8005d8c <__ieee754_sqrt+0x1b0>
 8005ce2:	e9da 0100 	ldrd	r0, r1, [sl]
 8005ce6:	e9db 2300 	ldrd	r2, r3, [fp]
 8005cea:	f7fa fa99 	bl	8000220 <__aeabi_dsub>
 8005cee:	e9da 8900 	ldrd	r8, r9, [sl]
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	4640      	mov	r0, r8
 8005cf8:	4649      	mov	r1, r9
 8005cfa:	f7fa fec5 	bl	8000a88 <__aeabi_dcmple>
 8005cfe:	b140      	cbz	r0, 8005d12 <__ieee754_sqrt+0x136>
 8005d00:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005d04:	e9da 0100 	ldrd	r0, r1, [sl]
 8005d08:	e9db 2300 	ldrd	r2, r3, [fp]
 8005d0c:	d126      	bne.n	8005d5c <__ieee754_sqrt+0x180>
 8005d0e:	3501      	adds	r5, #1
 8005d10:	463c      	mov	r4, r7
 8005d12:	106a      	asrs	r2, r5, #1
 8005d14:	0863      	lsrs	r3, r4, #1
 8005d16:	07e9      	lsls	r1, r5, #31
 8005d18:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8005d1c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8005d20:	bf48      	it	mi
 8005d22:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8005d26:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8005d2a:	461c      	mov	r4, r3
 8005d2c:	e76d      	b.n	8005c0a <__ieee754_sqrt+0x2e>
 8005d2e:	0ad3      	lsrs	r3, r2, #11
 8005d30:	3815      	subs	r0, #21
 8005d32:	0552      	lsls	r2, r2, #21
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d0fa      	beq.n	8005d2e <__ieee754_sqrt+0x152>
 8005d38:	02dc      	lsls	r4, r3, #11
 8005d3a:	d50a      	bpl.n	8005d52 <__ieee754_sqrt+0x176>
 8005d3c:	f1c1 0420 	rsb	r4, r1, #32
 8005d40:	fa22 f404 	lsr.w	r4, r2, r4
 8005d44:	1e4d      	subs	r5, r1, #1
 8005d46:	408a      	lsls	r2, r1
 8005d48:	4323      	orrs	r3, r4
 8005d4a:	1b41      	subs	r1, r0, r5
 8005d4c:	e772      	b.n	8005c34 <__ieee754_sqrt+0x58>
 8005d4e:	4608      	mov	r0, r1
 8005d50:	e7f0      	b.n	8005d34 <__ieee754_sqrt+0x158>
 8005d52:	005b      	lsls	r3, r3, #1
 8005d54:	3101      	adds	r1, #1
 8005d56:	e7ef      	b.n	8005d38 <__ieee754_sqrt+0x15c>
 8005d58:	46e0      	mov	r8, ip
 8005d5a:	e7aa      	b.n	8005cb2 <__ieee754_sqrt+0xd6>
 8005d5c:	f7fa fa62 	bl	8000224 <__adddf3>
 8005d60:	e9da 8900 	ldrd	r8, r9, [sl]
 8005d64:	4602      	mov	r2, r0
 8005d66:	460b      	mov	r3, r1
 8005d68:	4640      	mov	r0, r8
 8005d6a:	4649      	mov	r1, r9
 8005d6c:	f7fa fe82 	bl	8000a74 <__aeabi_dcmplt>
 8005d70:	b120      	cbz	r0, 8005d7c <__ieee754_sqrt+0x1a0>
 8005d72:	1ca0      	adds	r0, r4, #2
 8005d74:	bf08      	it	eq
 8005d76:	3501      	addeq	r5, #1
 8005d78:	3402      	adds	r4, #2
 8005d7a:	e7ca      	b.n	8005d12 <__ieee754_sqrt+0x136>
 8005d7c:	3401      	adds	r4, #1
 8005d7e:	f024 0401 	bic.w	r4, r4, #1
 8005d82:	e7c6      	b.n	8005d12 <__ieee754_sqrt+0x136>
 8005d84:	7ff00000 	.word	0x7ff00000
 8005d88:	20000060 	.word	0x20000060
 8005d8c:	20000068 	.word	0x20000068

08005d90 <floor>:
 8005d90:	ec51 0b10 	vmov	r0, r1, d0
 8005d94:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d9c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8005da0:	2e13      	cmp	r6, #19
 8005da2:	ee10 5a10 	vmov	r5, s0
 8005da6:	ee10 8a10 	vmov	r8, s0
 8005daa:	460c      	mov	r4, r1
 8005dac:	dc31      	bgt.n	8005e12 <floor+0x82>
 8005dae:	2e00      	cmp	r6, #0
 8005db0:	da14      	bge.n	8005ddc <floor+0x4c>
 8005db2:	a333      	add	r3, pc, #204	; (adr r3, 8005e80 <floor+0xf0>)
 8005db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db8:	f7fa fa34 	bl	8000224 <__adddf3>
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	f7fa fe76 	bl	8000ab0 <__aeabi_dcmpgt>
 8005dc4:	b138      	cbz	r0, 8005dd6 <floor+0x46>
 8005dc6:	2c00      	cmp	r4, #0
 8005dc8:	da53      	bge.n	8005e72 <floor+0xe2>
 8005dca:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8005dce:	4325      	orrs	r5, r4
 8005dd0:	d052      	beq.n	8005e78 <floor+0xe8>
 8005dd2:	4c2d      	ldr	r4, [pc, #180]	; (8005e88 <floor+0xf8>)
 8005dd4:	2500      	movs	r5, #0
 8005dd6:	4621      	mov	r1, r4
 8005dd8:	4628      	mov	r0, r5
 8005dda:	e024      	b.n	8005e26 <floor+0x96>
 8005ddc:	4f2b      	ldr	r7, [pc, #172]	; (8005e8c <floor+0xfc>)
 8005dde:	4137      	asrs	r7, r6
 8005de0:	ea01 0307 	and.w	r3, r1, r7
 8005de4:	4303      	orrs	r3, r0
 8005de6:	d01e      	beq.n	8005e26 <floor+0x96>
 8005de8:	a325      	add	r3, pc, #148	; (adr r3, 8005e80 <floor+0xf0>)
 8005dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dee:	f7fa fa19 	bl	8000224 <__adddf3>
 8005df2:	2200      	movs	r2, #0
 8005df4:	2300      	movs	r3, #0
 8005df6:	f7fa fe5b 	bl	8000ab0 <__aeabi_dcmpgt>
 8005dfa:	2800      	cmp	r0, #0
 8005dfc:	d0eb      	beq.n	8005dd6 <floor+0x46>
 8005dfe:	2c00      	cmp	r4, #0
 8005e00:	bfbe      	ittt	lt
 8005e02:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005e06:	4133      	asrlt	r3, r6
 8005e08:	18e4      	addlt	r4, r4, r3
 8005e0a:	ea24 0407 	bic.w	r4, r4, r7
 8005e0e:	2500      	movs	r5, #0
 8005e10:	e7e1      	b.n	8005dd6 <floor+0x46>
 8005e12:	2e33      	cmp	r6, #51	; 0x33
 8005e14:	dd0b      	ble.n	8005e2e <floor+0x9e>
 8005e16:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005e1a:	d104      	bne.n	8005e26 <floor+0x96>
 8005e1c:	ee10 2a10 	vmov	r2, s0
 8005e20:	460b      	mov	r3, r1
 8005e22:	f7fa f9ff 	bl	8000224 <__adddf3>
 8005e26:	ec41 0b10 	vmov	d0, r0, r1
 8005e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e2e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8005e32:	f04f 37ff 	mov.w	r7, #4294967295
 8005e36:	40df      	lsrs	r7, r3
 8005e38:	4238      	tst	r0, r7
 8005e3a:	d0f4      	beq.n	8005e26 <floor+0x96>
 8005e3c:	a310      	add	r3, pc, #64	; (adr r3, 8005e80 <floor+0xf0>)
 8005e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e42:	f7fa f9ef 	bl	8000224 <__adddf3>
 8005e46:	2200      	movs	r2, #0
 8005e48:	2300      	movs	r3, #0
 8005e4a:	f7fa fe31 	bl	8000ab0 <__aeabi_dcmpgt>
 8005e4e:	2800      	cmp	r0, #0
 8005e50:	d0c1      	beq.n	8005dd6 <floor+0x46>
 8005e52:	2c00      	cmp	r4, #0
 8005e54:	da0a      	bge.n	8005e6c <floor+0xdc>
 8005e56:	2e14      	cmp	r6, #20
 8005e58:	d101      	bne.n	8005e5e <floor+0xce>
 8005e5a:	3401      	adds	r4, #1
 8005e5c:	e006      	b.n	8005e6c <floor+0xdc>
 8005e5e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005e62:	2301      	movs	r3, #1
 8005e64:	40b3      	lsls	r3, r6
 8005e66:	441d      	add	r5, r3
 8005e68:	45a8      	cmp	r8, r5
 8005e6a:	d8f6      	bhi.n	8005e5a <floor+0xca>
 8005e6c:	ea25 0507 	bic.w	r5, r5, r7
 8005e70:	e7b1      	b.n	8005dd6 <floor+0x46>
 8005e72:	2500      	movs	r5, #0
 8005e74:	462c      	mov	r4, r5
 8005e76:	e7ae      	b.n	8005dd6 <floor+0x46>
 8005e78:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8005e7c:	e7ab      	b.n	8005dd6 <floor+0x46>
 8005e7e:	bf00      	nop
 8005e80:	8800759c 	.word	0x8800759c
 8005e84:	7e37e43c 	.word	0x7e37e43c
 8005e88:	bff00000 	.word	0xbff00000
 8005e8c:	000fffff 	.word	0x000fffff

08005e90 <_init>:
 8005e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e92:	bf00      	nop
 8005e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e96:	bc08      	pop	{r3}
 8005e98:	469e      	mov	lr, r3
 8005e9a:	4770      	bx	lr

08005e9c <_fini>:
 8005e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e9e:	bf00      	nop
 8005ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ea2:	bc08      	pop	{r3}
 8005ea4:	469e      	mov	lr, r3
 8005ea6:	4770      	bx	lr
